
H743VIT6TemplateRepository.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  0800a2fc  0800a2fc  0001a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000008  0800a308  0800a308  0001a308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  24000000  0800a310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000108fc  24000064  0800a374  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24010960  0800a374  00020960  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a7d1  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007245  00000000  00000000  0005a8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c00  00000000  00000000  00061af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001535  00000000  00000000  000636f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044561  00000000  00000000  00064c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002babd  00000000  00000000  000a9186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00182ec6  00000000  00000000  000d4c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000077f0  00000000  00000000  00257b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  0025f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009cfc 	.word	0x08009cfc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08009cfc 	.word	0x08009cfc

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <_ZNK7Command10GetCommandEv>:
    void Reset();    // Reset the command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high

    // Getters
    uint16_t GetDataSize() const;
    uint8_t* GetDataPointer() const { return data; }
    GLOBAL_COMMANDS GetCommand() const { return command; }
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <_ZNK7Command14GetTaskCommandEv>:
    uint16_t GetTaskCommand() const { return taskCommand; }
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	885b      	ldrh	r3, [r3, #2]
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <_ZN9DebugTask4InstEv>:
constexpr uint16_t DEBUG_RX_BUFFER_SZ_BYTES = 16;

/* Class ------------------------------------------------------------------*/
class DebugTask : public Task, public UARTReceiverBase {
 public:
  static DebugTask& Inst() {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
    static DebugTask inst;
 80003e4:	4b10      	ldr	r3, [pc, #64]	; (8000428 <_ZN9DebugTask4InstEv+0x48>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f3bf 8f5b 	dmb	ish
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	bf0c      	ite	eq
 80003f4:	2301      	moveq	r3, #1
 80003f6:	2300      	movne	r3, #0
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d010      	beq.n	8000420 <_ZN9DebugTask4InstEv+0x40>
 80003fe:	480a      	ldr	r0, [pc, #40]	; (8000428 <_ZN9DebugTask4InstEv+0x48>)
 8000400:	f008 ff24 	bl	800924c <__cxa_guard_acquire>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	bf14      	ite	ne
 800040a:	2301      	movne	r3, #1
 800040c:	2300      	moveq	r3, #0
 800040e:	b2db      	uxtb	r3, r3
 8000410:	2b00      	cmp	r3, #0
 8000412:	d005      	beq.n	8000420 <_ZN9DebugTask4InstEv+0x40>
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <_ZN9DebugTask4InstEv+0x4c>)
 8000416:	f000 f82b 	bl	8000470 <_ZN9DebugTaskC1Ev>
 800041a:	4803      	ldr	r0, [pc, #12]	; (8000428 <_ZN9DebugTask4InstEv+0x48>)
 800041c:	f008 ff22 	bl	8009264 <__cxa_guard_release>
    return inst;
 8000420:	4b02      	ldr	r3, [pc, #8]	; (800042c <_ZN9DebugTask4InstEv+0x4c>)
  }
 8000422:	4618      	mov	r0, r3
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	240000a8 	.word	0x240000a8
 800042c:	24000080 	.word	0x24000080

08000430 <_ZN9DebugTask7RunTaskEPv>:

  // Interrupt receive callback
  void InterruptRxData(uint8_t errors);

 protected:
  static void RunTask(void* pvParams) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
    DebugTask::Inst().Run(pvParams);
 8000438:	f7ff ffd2 	bl	80003e0 <_ZN9DebugTask4InstEv>
 800043c:	4603      	mov	r3, r0
 800043e:	6879      	ldr	r1, [r7, #4]
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f879 	bl	8000538 <_ZN9DebugTask3RunEPv>
  }  // Static Task Interface, passes control to the instance Run();
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <_ZN16UARTReceiverBaseC1Ev>:
/**
 * @brief Any classes that are expected to receive using a UART driver
 *		  must derive from this base class and provide an implementation
 *		  for InterruptRxData
 */
class UARTReceiverBase
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <_ZN16UARTReceiverBaseC1Ev+0x1c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4618      	mov	r0, r3
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	0800a25c 	.word	0x0800a25c

08000470 <_ZN9DebugTaskC1Ev>:

/* Functions -----------------------------------------------------------------*/
/**
 * @brief Constructor, sets all member variables
 */
DebugTask::DebugTask()
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    : Task(TASK_DEBUG_QUEUE_DEPTH_OBJS), kUart_(UART::Debug) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	210a      	movs	r1, #10
 800047c:	4618      	mov	r0, r3
 800047e:	f008 fb29 	bl	8008ad4 <_ZN4TaskC1Et>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	330c      	adds	r3, #12
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ffe2 	bl	8000450 <_ZN16UARTReceiverBaseC1Ev>
 800048c:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <_ZN9DebugTaskC1Ev+0x58>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <_ZN9DebugTaskC1Ev+0x5c>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <_ZN9DebugTaskC1Ev+0x60>)
 800049c:	625a      	str	r2, [r3, #36]	; 0x24
  memset(debugBuffer, 0, sizeof(debugBuffer));
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3310      	adds	r3, #16
 80004a2:	2211      	movs	r2, #17
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f008 ff4e 	bl	8009348 <memset>
  debugMsgIdx = 0;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2200      	movs	r2, #0
 80004b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  isDebugMsgReady = false;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	0800a240 	.word	0x0800a240
 80004cc:	0800a250 	.word	0x0800a250
 80004d0:	240000bc 	.word	0x240000bc

080004d4 <_ZN9DebugTask8InitTaskEv>:

/**
 * @brief Init task for RTOS
 */
void DebugTask::InitTask() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af02      	add	r7, sp, #8
 80004da:	6078      	str	r0, [r7, #4]
  // Make sure the task is not already initialized
  CUBE_ASSERT(rtTaskHandle == nullptr, "Cannot initialize Debug task twice");
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d005      	beq.n	80004f0 <_ZN9DebugTask8InitTaskEv+0x1c>
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <_ZN9DebugTask8InitTaskEv+0x50>)
 80004e6:	222e      	movs	r2, #46	; 0x2e
 80004e8:	490f      	ldr	r1, [pc, #60]	; (8000528 <_ZN9DebugTask8InitTaskEv+0x54>)
 80004ea:	2000      	movs	r0, #0
 80004ec:	f008 fb86 	bl	8008bfc <_Z17cube_assert_debugbPKctS0_z>

  // Start the task
  BaseType_t rtValue = xTaskCreate(
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3304      	adds	r3, #4
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2302      	movs	r3, #2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000500:	490a      	ldr	r1, [pc, #40]	; (800052c <_ZN9DebugTask8InitTaskEv+0x58>)
 8000502:	480b      	ldr	r0, [pc, #44]	; (8000530 <_ZN9DebugTask8InitTaskEv+0x5c>)
 8000504:	f006 f943 	bl	800678e <xTaskCreate>
 8000508:	60f8      	str	r0, [r7, #12]
      (TaskFunction_t)DebugTask::RunTask, (const char*)"DebugTask",
      (uint16_t)TASK_DEBUG_STACK_DEPTH_WORDS, (void*)this,
      (UBaseType_t)TASK_DEBUG_PRIORITY, (TaskHandle_t*)&rtTaskHandle);

  // Ensure creation succeded
  CUBE_ASSERT(rtValue == pdPASS, "DebugTask::InitTask - xTaskCreate() failed");
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d005      	beq.n	800051c <_ZN9DebugTask8InitTaskEv+0x48>
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <_ZN9DebugTask8InitTaskEv+0x60>)
 8000512:	2237      	movs	r2, #55	; 0x37
 8000514:	4904      	ldr	r1, [pc, #16]	; (8000528 <_ZN9DebugTask8InitTaskEv+0x54>)
 8000516:	2000      	movs	r0, #0
 8000518:	f008 fb70 	bl	8008bfc <_Z17cube_assert_debugbPKctS0_z>
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	08009d14 	.word	0x08009d14
 8000528:	08009d38 	.word	0x08009d38
 800052c:	08009d54 	.word	0x08009d54
 8000530:	08000431 	.word	0x08000431
 8000534:	08009d60 	.word	0x08009d60

08000538 <_ZN9DebugTask3RunEPv>:

// TODO: Only run thread when appropriate GPIO pin pulled HIGH (or by define)
/**
 *    @brief Runcode for the DebugTask
 */
void DebugTask::Run(void* pvParams) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
  // Arm the interrupt
  ReceiveData();
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f884 	bl	8000650 <_ZN9DebugTask11ReceiveDataEv>

  while (1) {
    Command cm;
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4618      	mov	r0, r3
 800054e:	f008 f8c8 	bl	80086e2 <_ZN7CommandC1Ev>

    // Wait forever for a command
    qEvtQueue->ReceiveWait(cm);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	f107 020c 	add.w	r2, r7, #12
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f008 fa91 	bl	8008a84 <_ZN5Queue11ReceiveWaitER7Command>

    // Process the command
    if (cm.GetCommand() == DATA_COMMAND &&
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff22 	bl	80003b0 <_ZNK7Command10GetCommandEv>
 800056c:	4603      	mov	r3, r0
 800056e:	2b02      	cmp	r3, #2
 8000570:	d109      	bne.n	8000586 <_ZN9DebugTask3RunEPv+0x4e>
        cm.GetTaskCommand() == EVENT_DEBUG_RX_COMPLETE) {
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff26 	bl	80003c8 <_ZNK7Command14GetTaskCommandEv>
 800057c:	4603      	mov	r3, r0
    if (cm.GetCommand() == DATA_COMMAND &&
 800057e:	2b01      	cmp	r3, #1
 8000580:	d101      	bne.n	8000586 <_ZN9DebugTask3RunEPv+0x4e>
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <_ZN9DebugTask3RunEPv+0x50>
 8000586:	2300      	movs	r3, #0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d005      	beq.n	8000598 <_ZN9DebugTask3RunEPv+0x60>
      HandleDebugMessage((const char*)debugBuffer);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3310      	adds	r3, #16
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f806 	bl	80005a4 <_ZN9DebugTask18HandleDebugMessageEPKc>
    }

    cm.Reset();
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	4618      	mov	r0, r3
 800059e:	f008 f939 	bl	8008814 <_ZN7Command5ResetEv>
  }
 80005a2:	e7d1      	b.n	8000548 <_ZN9DebugTask3RunEPv+0x10>

080005a4 <_ZN9DebugTask18HandleDebugMessageEPKc>:

/**
 * @brief Handles debug messages, assumes msg is null terminated
 * @param msg Message to read, must be null termianted
 */
void DebugTask::HandleDebugMessage(const char* msg) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
  //-- SYSTEM / CHAR COMMANDS -- (Must be last)
  if (strcmp(msg, "sysreset") == 0) {
 80005ae:	491f      	ldr	r1, [pc, #124]	; (800062c <_ZN9DebugTask18HandleDebugMessageEPKc+0x88>)
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	f7ff fe95 	bl	80002e0 <strcmp>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d106      	bne.n	80005ca <_ZN9DebugTask18HandleDebugMessageEPKc+0x26>
    // Reset the system
	CUBE_ASSERT(false, "System reset requested");
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <_ZN9DebugTask18HandleDebugMessageEPKc+0x8c>)
 80005be:	225a      	movs	r2, #90	; 0x5a
 80005c0:	491c      	ldr	r1, [pc, #112]	; (8000634 <_ZN9DebugTask18HandleDebugMessageEPKc+0x90>)
 80005c2:	2000      	movs	r0, #0
 80005c4:	f008 fb1a 	bl	8008bfc <_Z17cube_assert_debugbPKctS0_z>
 80005c8:	e024      	b.n	8000614 <_ZN9DebugTask18HandleDebugMessageEPKc+0x70>
  } else if (strcmp(msg, "sysinfo") == 0) {
 80005ca:	491b      	ldr	r1, [pc, #108]	; (8000638 <_ZN9DebugTask18HandleDebugMessageEPKc+0x94>)
 80005cc:	6838      	ldr	r0, [r7, #0]
 80005ce:	f7ff fe87 	bl	80002e0 <strcmp>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d118      	bne.n	800060a <_ZN9DebugTask18HandleDebugMessageEPKc+0x66>
    // Print message
    CUBE_PRINT("\n\n-- CUBE SYSTEM --\n");
 80005d8:	4818      	ldr	r0, [pc, #96]	; (800063c <_ZN9DebugTask18HandleDebugMessageEPKc+0x98>)
 80005da:	f008 faad 	bl	8008b38 <_Z10cube_printPKcz>
    CUBE_PRINT("Current System Free Heap: %d Bytes\n", xPortGetFreeHeapSize());
 80005de:	f007 ff79 	bl	80084d4 <xPortGetFreeHeapSize>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4619      	mov	r1, r3
 80005e6:	4816      	ldr	r0, [pc, #88]	; (8000640 <_ZN9DebugTask18HandleDebugMessageEPKc+0x9c>)
 80005e8:	f008 faa6 	bl	8008b38 <_Z10cube_printPKcz>
    CUBE_PRINT("Lowest Ever Free Heap: %d Bytes\n",
 80005ec:	f007 ff7e 	bl	80084ec <xPortGetMinimumEverFreeHeapSize>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4619      	mov	r1, r3
 80005f4:	4813      	ldr	r0, [pc, #76]	; (8000644 <_ZN9DebugTask18HandleDebugMessageEPKc+0xa0>)
 80005f6:	f008 fa9f 	bl	8008b38 <_Z10cube_printPKcz>
               xPortGetMinimumEverFreeHeapSize());
    CUBE_PRINT("Debug Task Runtime  \t: %d ms\n\n",
 80005fa:	f006 fb63 	bl	8006cc4 <xTaskGetTickCount>
 80005fe:	4603      	mov	r3, r0
 8000600:	4619      	mov	r1, r3
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <_ZN9DebugTask18HandleDebugMessageEPKc+0xa4>)
 8000604:	f008 fa98 	bl	8008b38 <_Z10cube_printPKcz>
 8000608:	e004      	b.n	8000614 <_ZN9DebugTask18HandleDebugMessageEPKc+0x70>
               TICKS_TO_MS(xTaskGetTickCount()));
  } else {
    // Single character command, or unknown command
    switch (msg[0]) {
      default:
    	  CUBE_PRINT("Debug, unknown command: %s\n", msg);
 800060a:	6839      	ldr	r1, [r7, #0]
 800060c:	480f      	ldr	r0, [pc, #60]	; (800064c <_ZN9DebugTask18HandleDebugMessageEPKc+0xa8>)
 800060e:	f008 fa93 	bl	8008b38 <_Z10cube_printPKcz>
        break;
 8000612:	bf00      	nop
    }
  }

  // We've read the data, clear the buffer
  debugMsgIdx = 0;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  isDebugMsgReady = false;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	08009d8c 	.word	0x08009d8c
 8000630:	08009d98 	.word	0x08009d98
 8000634:	08009d38 	.word	0x08009d38
 8000638:	08009db0 	.word	0x08009db0
 800063c:	08009db8 	.word	0x08009db8
 8000640:	08009dd0 	.word	0x08009dd0
 8000644:	08009df4 	.word	0x08009df4
 8000648:	08009e18 	.word	0x08009e18
 800064c:	08009e38 	.word	0x08009e38

08000650 <_ZN9DebugTask11ReceiveDataEv>:

/**
 * @brief Receive data, currently receives by arming interrupt
 */
bool DebugTask::ReceiveData() { return kUart_->ReceiveIT(&debugRxChar, this); }
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	330c      	adds	r3, #12
 8000666:	461a      	mov	r2, r3
 8000668:	f008 fd73 	bl	8009152 <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase>
 800066c:	4603      	mov	r3, r0
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_ZN9DebugTask15InterruptRxDataEh>:

/**
 * @brief Receive data to the buffer
 * @return Whether the debugBuffer is ready or not
 */
void DebugTask::InterruptRxData(uint8_t errors) {
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	70fb      	strb	r3, [r7, #3]
  // If we already have an unprocessed debug message, ignore this byte
  if (!isDebugMsgReady) {
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000688:	f083 0301 	eor.w	r3, r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d049      	beq.n	8000726 <_ZN9DebugTask15InterruptRxDataEh+0xb0>
    // Check byte for end of message - note if using termite you must turn on
    // append CR
    if (debugRxChar == '\r' || debugMsgIdx == DEBUG_RX_BUFFER_SZ_BYTES) {
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000698:	2b0d      	cmp	r3, #13
 800069a:	d004      	beq.n	80006a6 <_ZN9DebugTask15InterruptRxDataEh+0x30>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80006a2:	2b10      	cmp	r3, #16
 80006a4:	d12d      	bne.n	8000702 <_ZN9DebugTask15InterruptRxDataEh+0x8c>
      // Null terminate and process
      debugBuffer[debugMsgIdx++] = '\0';
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	b2d1      	uxtb	r1, r2
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 80006b6:	461a      	mov	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	2200      	movs	r2, #0
 80006be:	741a      	strb	r2, [r3, #16]
      isDebugMsgReady = true;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2201      	movs	r2, #1
 80006c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

      // Notify the debug task
      Command cm(DATA_COMMAND, EVENT_DEBUG_RX_COMPLETE);
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2201      	movs	r2, #1
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f008 f820 	bl	8008716 <_ZN7CommandC1E15GLOBAL_COMMANDSt>
      bool res = qEvtQueue->SendFromISR(cm);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f107 0208 	add.w	r2, r7, #8
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f008 f988 	bl	80089f6 <_ZN5Queue11SendFromISRER7Command>
 80006e6:	4603      	mov	r3, r0
 80006e8:	75fb      	strb	r3, [r7, #23]

      // If we failed to send the event, we should reset the buffer, that way
      // DebugTask doesn't stall
      if (res == false) {
 80006ea:	7dfb      	ldrb	r3, [r7, #23]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d119      	bne.n	8000724 <_ZN9DebugTask15InterruptRxDataEh+0xae>
        debugMsgIdx = 0;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        isDebugMsgReady = false;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      }
    } else {
 8000700:	e010      	b.n	8000724 <_ZN9DebugTask15InterruptRxDataEh+0xae>
      debugBuffer[debugMsgIdx++] = debugRxChar;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	b2d0      	uxtb	r0, r2
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	460a      	mov	r2, r1
 8000720:	741a      	strb	r2, [r3, #16]
 8000722:	e000      	b.n	8000726 <_ZN9DebugTask15InterruptRxDataEh+0xb0>
    } else {
 8000724:	bf00      	nop
    }
  }

  // Re-arm the interrupt
  ReceiveData();
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff92 	bl	8000650 <_ZN9DebugTask11ReceiveDataEv>
}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZThn12_N9DebugTask15InterruptRxDataEh>:
  void InterruptRxData(uint8_t errors);
 8000734:	f1a0 000c 	sub.w	r0, r0, #12
 8000738:	f7ff bf9d 	b.w	8000676 <_ZN9DebugTask15InterruptRxDataEh>

0800073c <run_interface>:
#include "main_system.hpp"
#include "UARTDriver.hpp"

extern "C" {
    void run_interface()
    {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
        run_main();
 8000740:	f000 f854 	bl	80007ec <_Z8run_mainv>
    }
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN10UARTDriverC1EP13USART_TypeDef>:
 *	      based on the STM32 LL Library
 */
class UARTDriver
{
public:
	UARTDriver(USART_TypeDef* uartInstance) :
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
		kUart_(uartInstance),
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	601a      	str	r2, [r3, #0]
		rxCharBuf_(nullptr),
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
		rxReceiver_(nullptr) {}
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <_ZN8CubeTask4InstEv>:

/* Class ------------------------------------------------------------------*/
class CubeTask : public Task
{
public:
    static CubeTask& Inst() {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
        static CubeTask inst;
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <_ZN8CubeTask4InstEv+0x48>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f3bf 8f5b 	dmb	ish
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	2b00      	cmp	r3, #0
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d010      	beq.n	80007b4 <_ZN8CubeTask4InstEv+0x40>
 8000792:	480a      	ldr	r0, [pc, #40]	; (80007bc <_ZN8CubeTask4InstEv+0x48>)
 8000794:	f008 fd5a 	bl	800924c <__cxa_guard_acquire>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	bf14      	ite	ne
 800079e:	2301      	movne	r3, #1
 80007a0:	2300      	moveq	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d005      	beq.n	80007b4 <_ZN8CubeTask4InstEv+0x40>
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <_ZN8CubeTask4InstEv+0x4c>)
 80007aa:	f000 f80b 	bl	80007c4 <_ZN8CubeTaskC1Ev>
 80007ae:	4803      	ldr	r0, [pc, #12]	; (80007bc <_ZN8CubeTask4InstEv+0x48>)
 80007b0:	f008 fd58 	bl	8009264 <__cxa_guard_release>
        return inst;
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <_ZN8CubeTask4InstEv+0x4c>)
    }
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	240000b8 	.word	0x240000b8
 80007c0:	240000ac 	.word	0x240000ac

080007c4 <_ZN8CubeTaskC1Ev>:
    void Run(void* pvParams);    // Main run code

    void HandleCommand(Command& cm);

private:
    CubeTask() : Task(UART_TASK_QUEUE_DEPTH_OBJS) {}    // Private constructor
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	210a      	movs	r1, #10
 80007d0:	4618      	mov	r0, r3
 80007d2:	f008 f97f 	bl	8008ad4 <_ZN4TaskC1Et>
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <_ZN8CubeTaskC1Ev+0x24>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	0800a2c4 	.word	0x0800a2c4

080007ec <_Z8run_mainv>:

/* Interface Functions ------------------------------------------------------------*/
/**
 * @brief Main function interface, called inside main.cpp before os initialization takes place.
*/
void run_main() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    // Init Tasks
    CubeTask::Inst().InitTask();
 80007f0:	f7ff ffc0 	bl	8000774 <_ZN8CubeTask4InstEv>
 80007f4:	4603      	mov	r3, r0
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	4790      	blx	r2
    DebugTask::Inst().InitTask();
 80007fe:	f7ff fdef 	bl	80003e0 <_ZN9DebugTask4InstEv>
 8000802:	4603      	mov	r3, r0
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	4790      	blx	r2

    // Print System Boot Info : Warning, don't queue more than 10 prints before scheduler starts
    CUBE_PRINT("\n-- CUBE SYSTEM --\n");
 800080c:	4810      	ldr	r0, [pc, #64]	; (8000850 <_Z8run_mainv+0x64>)
 800080e:	f008 f993 	bl	8008b38 <_Z10cube_printPKcz>
    CUBE_PRINT("System Reset Reason: [TODO]\n"); //TODO: System reset reason can be implemented via. Flash storage
 8000812:	4810      	ldr	r0, [pc, #64]	; (8000854 <_Z8run_mainv+0x68>)
 8000814:	f008 f990 	bl	8008b38 <_Z10cube_printPKcz>
    CUBE_PRINT("Current System Free Heap: %d Bytes\n", xPortGetFreeHeapSize());
 8000818:	f007 fe5c 	bl	80084d4 <xPortGetFreeHeapSize>
 800081c:	4603      	mov	r3, r0
 800081e:	4619      	mov	r1, r3
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <_Z8run_mainv+0x6c>)
 8000822:	f008 f989 	bl	8008b38 <_Z10cube_printPKcz>
    CUBE_PRINT("Lowest Ever Free Heap: %d Bytes\n\n", xPortGetMinimumEverFreeHeapSize());
 8000826:	f007 fe61 	bl	80084ec <xPortGetMinimumEverFreeHeapSize>
 800082a:	4603      	mov	r3, r0
 800082c:	4619      	mov	r1, r3
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <_Z8run_mainv+0x70>)
 8000830:	f008 f982 	bl	8008b38 <_Z10cube_printPKcz>

    // Start the Scheduler
    // Guidelines:
    // - Be CAREFUL with race conditions after osKernelStart
    // - All uses of new and delete should be closely monitored after this point
    osKernelStart();
 8000834:	f004 ffb8 	bl	80057a8 <osKernelStart>

    // Should never reach here
    CUBE_ASSERT(false, "osKernelStart() failed");
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <_Z8run_mainv+0x74>)
 800083a:	222b      	movs	r2, #43	; 0x2b
 800083c:	4909      	ldr	r1, [pc, #36]	; (8000864 <_Z8run_mainv+0x78>)
 800083e:	2000      	movs	r0, #0
 8000840:	f008 f9dc 	bl	8008bfc <_Z17cube_assert_debugbPKctS0_z>

    while (1)
    {
        osDelay(100);
 8000844:	2064      	movs	r0, #100	; 0x64
 8000846:	f004 ffb6 	bl	80057b6 <osDelay>
        HAL_NVIC_SystemReset();
 800084a:	f000 fe84 	bl	8001556 <HAL_NVIC_SystemReset>
        osDelay(100);
 800084e:	e7f9      	b.n	8000844 <_Z8run_mainv+0x58>
 8000850:	08009ea8 	.word	0x08009ea8
 8000854:	08009ebc 	.word	0x08009ebc
 8000858:	08009edc 	.word	0x08009edc
 800085c:	08009f00 	.word	0x08009f00
 8000860:	08009f24 	.word	0x08009f24
 8000864:	08009f3c 	.word	0x08009f3c

08000868 <_Z41__static_initialization_and_destruction_0ii>:
    }
}
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d108      	bne.n	800088a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087e:	4293      	cmp	r3, r2
 8000880:	d103      	bne.n	800088a <_Z41__static_initialization_and_destruction_0ii+0x22>
    UARTDriver usart3(USART3);
 8000882:	4904      	ldr	r1, [pc, #16]	; (8000894 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000886:	f7ff ff5f 	bl	8000748 <_ZN10UARTDriverC1EP13USART_TypeDef>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40004800 	.word	0x40004800
 8000898:	240000bc 	.word	0x240000bc

0800089c <_GLOBAL__sub_I__ZN6Driver6usart3E>:
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
 80008a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff ffdf 	bl	8000868 <_Z41__static_initialization_and_destruction_0ii>
 80008aa:	bd80      	pop	{r7, pc}

080008ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80008bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <vApplicationGetIdleTaskMemory+0x30>)
 80008c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	22c0      	movs	r2, #192	; 0xc0
 80008c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	240000c8 	.word	0x240000c8
 80008dc:	24000168 	.word	0x24000168

080008e0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <vApplicationGetTimerTaskMemory+0x2c>)
 80008f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <vApplicationGetTimerTaskMemory+0x30>)
 80008f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80008fe:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	24000468 	.word	0x24000468
 8000910:	24000508 	.word	0x24000508

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800093a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800093e:	2b00      	cmp	r3, #0
 8000940:	db0b      	blt.n	800095a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	f003 021f 	and.w	r2, r3, #31
 8000948:	4907      	ldr	r1, [pc, #28]	; (8000968 <__NVIC_EnableIRQ+0x38>)
 800094a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	2001      	movs	r0, #1
 8000952:	fa00 f202 	lsl.w	r2, r0, r2
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	; (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	; (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	; 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	; 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f043 0201 	orr.w	r2, r3, #1
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	601a      	str	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b089      	sub	sp, #36	; 0x24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3308      	adds	r3, #8
 8000a74:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	e853 3f00 	ldrex	r3, [r3]
 8000a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	075b      	lsls	r3, r3, #29
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3308      	adds	r3, #8
 8000a90:	69fa      	ldr	r2, [r7, #28]
 8000a92:	61ba      	str	r2, [r7, #24]
 8000a94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a96:	6979      	ldr	r1, [r7, #20]
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	e841 2300 	strex	r3, r2, [r1]
 8000a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1e4      	bne.n	8000a70 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	3724      	adds	r7, #36	; 0x24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	e853 3f00 	ldrex	r3, [r3]
 8000aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	065b      	lsls	r3, r3, #25
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3308      	adds	r3, #8
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	61ba      	str	r2, [r7, #24]
 8000ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ae4:	6979      	ldr	r1, [r7, #20]
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	e841 2300 	strex	r3, r2, [r1]
 8000aec:	613b      	str	r3, [r7, #16]
   return(result);
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1e4      	bne.n	8000abe <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	609a      	str	r2, [r3, #8]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b42:	d101      	bne.n	8000b48 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b6a:	d101      	bne.n	8000b70 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e000      	b.n	8000b72 <LL_USART_IsActiveFlag_REACK+0x1c>
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b8e:	4909      	ldr	r1, [pc, #36]	; (8000bb4 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	58024400 	.word	0x58024400

08000bb8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <LL_APB1_GRP1_EnableClock+0x34>)
 8000bc2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000bc6:	4909      	ldr	r1, [pc, #36]	; (8000bec <LL_APB1_GRP1_EnableClock+0x34>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <LL_APB1_GRP1_EnableClock+0x34>)
 8000bd2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	58024400 	.word	0x58024400

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf4:	f000 fb50 	bl	8001298 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000bf8:	f000 f954 	bl	8000ea4 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfc:	f000 f80c 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c00:	f000 f936 	bl	8000e70 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c04:	f000 f872 	bl	8000cec <MX_CRC_Init>
  MX_USART3_UART_Init();
 8000c08:	f000 f892 	bl	8000d30 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  run_interface();
 8000c0c:	f7ff fd96 	bl	800073c <run_interface>
 8000c10:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */
  }
  #endif
  /* USER CODE END 3 */
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b09c      	sub	sp, #112	; 0x70
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	224c      	movs	r2, #76	; 0x4c
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 fb8e 	bl	8009348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2220      	movs	r2, #32
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fb88 	bl	8009348 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f000 fdfb 	bl	8001834 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <SystemClock_Config+0xcc>)
 8000c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c46:	4a27      	ldr	r2, [pc, #156]	; (8000ce4 <SystemClock_Config+0xcc>)
 8000c48:	f023 0301 	bic.w	r3, r3, #1
 8000c4c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <SystemClock_Config+0xcc>)
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <SystemClock_Config+0xd0>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <SystemClock_Config+0xd0>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <SystemClock_Config+0xd0>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c74:	bf00      	nop
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <SystemClock_Config+0xd0>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c82:	d1f8      	bne.n	8000c76 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c84:	2302      	movs	r3, #2
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8c:	2340      	movs	r3, #64	; 0x40
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fe05 	bl	80018a8 <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ca4:	f000 f939 	bl	8000f1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca8:	233f      	movs	r3, #63	; 0x3f
 8000caa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fa45 	bl	800215c <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cd8:	f000 f91f 	bl	8000f1a <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3770      	adds	r7, #112	; 0x70
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58000400 	.word	0x58000400
 8000ce8:	58024800 	.word	0x58024800

08000cec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <MX_CRC_Init+0x3c>)
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <MX_CRC_Init+0x40>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_CRC_Init+0x3c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_CRC_Init+0x3c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_CRC_Init+0x3c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_CRC_Init+0x3c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_CRC_Init+0x3c>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_CRC_Init+0x3c>)
 8000d16:	f000 fc9b 	bl	8001650 <HAL_CRC_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d20:	f000 f8fb 	bl	8000f1a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	24000b08 	.word	0x24000b08
 8000d2c:	58024c00 	.word	0x58024c00

08000d30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0be      	sub	sp, #248	; 0xf8
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f008 fb02 	bl	8009348 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	22c0      	movs	r2, #192	; 0xc0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 faf3 	bl	8009348 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d62:	f04f 0202 	mov.w	r2, #2
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 fda9 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8000d80:	f000 f8cb 	bl	8000f1a <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000d84:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d88:	f7ff ff16 	bl	8000bb8 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f7ff fef7 	bl	8000b80 <LL_AHB4_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8000d92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000db2:	2307      	movs	r3, #7
 8000db4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	482a      	ldr	r0, [pc, #168]	; (8000e68 <MX_USART3_UART_Init+0x138>)
 8000dc0:	f003 fc9a 	bl	80046f8 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000dc4:	f7ff fda6 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2105      	movs	r1, #5
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fdf6 	bl	80009c0 <NVIC_EncodePriority>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	2027      	movs	r0, #39	; 0x27
 8000dda:	f7ff fdc7 	bl	800096c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8000dde:	2027      	movs	r0, #39	; 0x27
 8000de0:	f7ff fda6 	bl	8000930 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  USART_InitStruct.BaudRate = 115200;
 8000dea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e04:	230c      	movs	r3, #12
 8000e06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  LL_USART_Init(USART3, &USART_InitStruct);
 8000e16:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4813      	ldr	r0, [pc, #76]	; (8000e6c <MX_USART3_UART_Init+0x13c>)
 8000e1e:	f004 fc19 	bl	8005654 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8000e22:	2100      	movs	r1, #0
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_USART3_UART_Init+0x13c>)
 8000e26:	f7ff fe1e 	bl	8000a66 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	480f      	ldr	r0, [pc, #60]	; (8000e6c <MX_USART3_UART_Init+0x13c>)
 8000e2e:	f7ff fe41 	bl	8000ab4 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 8000e32:	480e      	ldr	r0, [pc, #56]	; (8000e6c <MX_USART3_UART_Init+0x13c>)
 8000e34:	f7ff fe07 	bl	8000a46 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART3);
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_USART3_UART_Init+0x13c>)
 8000e3a:	f7ff fe62 	bl	8000b02 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART3 */

  /* USER CODE END WKUPType USART3 */

  LL_USART_Enable(USART3);
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <MX_USART3_UART_Init+0x13c>)
 8000e40:	f7ff fdf1 	bl	8000a26 <LL_USART_Enable>

  /* Polling USART3 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 8000e44:	bf00      	nop
 8000e46:	4809      	ldr	r0, [pc, #36]	; (8000e6c <MX_USART3_UART_Init+0x13c>)
 8000e48:	f7ff fe71 	bl	8000b2e <LL_USART_IsActiveFlag_TEACK>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f9      	beq.n	8000e46 <MX_USART3_UART_Init+0x116>
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_USART3_UART_Init+0x13c>)
 8000e54:	f7ff fe7f 	bl	8000b56 <LL_USART_IsActiveFlag_REACK>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f3      	beq.n	8000e46 <MX_USART3_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	37f8      	adds	r7, #248	; 0xf8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	58020400 	.word	0x58020400
 8000e6c:	40004800 	.word	0x40004800

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_GPIO_Init+0x30>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <MX_GPIO_Init+0x30>)
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_GPIO_Init+0x30>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	58024400 	.word	0x58024400

08000ea4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eb6:	f000 fb53 	bl	8001560 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ec6:	231f      	movs	r3, #31
 8000ec8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000eca:	2387      	movs	r3, #135	; 0x87
 8000ecc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fb71 	bl	80015d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000eee:	2004      	movs	r0, #4
 8000ef0:	f000 fb4e 	bl	8001590 <HAL_MPU_Enable>

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f0c:	d101      	bne.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f0e:	f000 f9ff 	bl	8001310 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1e:	b672      	cpsid	i
}
 8000f20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <Error_Handler+0x8>

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_MspInit+0x38>)
 8000f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_MspInit+0x38>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_MspInit+0x38>)
 8000f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f06f 0001 	mvn.w	r0, #1
 8000f50:	f000 fad9 	bl	8001506 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	58024400 	.word	0x58024400

08000f60 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_CRC_MspInit+0x3c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10e      	bne.n	8000f90 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_CRC_MspInit+0x40>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <HAL_CRC_MspInit+0x40>)
 8000f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_CRC_MspInit+0x40>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	58024c00 	.word	0x58024c00
 8000fa0:	58024400 	.word	0x58024400

08000fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b090      	sub	sp, #64	; 0x40
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	d827      	bhi.n	8001002 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	201c      	movs	r0, #28
 8000fb8:	f000 faa5 	bl	8001506 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fbc:	201c      	movs	r0, #28
 8000fbe:	f000 fabc 	bl	800153a <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000fc2:	4a29      	ldr	r2, [pc, #164]	; (8001068 <HAL_InitTick+0xc4>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <HAL_InitTick+0xc8>)
 8000fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fce:	4a27      	ldr	r2, [pc, #156]	; (800106c <HAL_InitTick+0xc8>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <HAL_InitTick+0xc8>)
 8000fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe6:	f107 0210 	add.w	r2, r7, #16
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fc29 	bl	8002848 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d106      	bne.n	800100e <HAL_InitTick+0x6a>
 8001000:	e001      	b.n	8001006 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e02c      	b.n	8001060 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001006:	f001 fc09 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 800100a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800100c:	e004      	b.n	8001018 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800100e:	f001 fc05 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8001012:	4603      	mov	r3, r0
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800101a:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_InitTick+0xcc>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	0c9b      	lsrs	r3, r3, #18
 8001022:	3b01      	subs	r3, #1
 8001024:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_InitTick+0xd0>)
 8001028:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800102c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_InitTick+0xd0>)
 8001030:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001034:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <HAL_InitTick+0xd0>)
 8001038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800103a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_InitTick+0xd0>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_InitTick+0xd0>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <HAL_InitTick+0xd0>)
 800104a:	f002 ffad 	bl	8003fa8 <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d104      	bne.n	800105e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001054:	4807      	ldr	r0, [pc, #28]	; (8001074 <HAL_InitTick+0xd0>)
 8001056:	f003 f809 	bl	800406c <HAL_TIM_Base_Start_IT>
 800105a:	4603      	mov	r3, r0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3740      	adds	r7, #64	; 0x40
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	24000008 	.word	0x24000008
 800106c:	58024400 	.word	0x58024400
 8001070:	431bde83 	.word	0x431bde83
 8001074:	24000b2c 	.word	0x24000b2c

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <TIM2_IRQHandler+0x10>)
 80010aa:	f003 f857 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000b2c 	.word	0x24000b2c

080010b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f008 f984 	bl	8009404 <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24080000 	.word	0x24080000
 8001128:	00000400 	.word	0x00000400
 800112c:	24000b78 	.word	0x24000b78
 8001130:	24010960 	.word	0x24010960

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001138:	4b37      	ldr	r3, [pc, #220]	; (8001218 <SystemInit+0xe4>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a36      	ldr	r2, [pc, #216]	; (8001218 <SystemInit+0xe4>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001148:	4b34      	ldr	r3, [pc, #208]	; (800121c <SystemInit+0xe8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	2b06      	cmp	r3, #6
 8001152:	d807      	bhi.n	8001164 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001154:	4b31      	ldr	r3, [pc, #196]	; (800121c <SystemInit+0xe8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 030f 	bic.w	r3, r3, #15
 800115c:	4a2f      	ldr	r2, [pc, #188]	; (800121c <SystemInit+0xe8>)
 800115e:	f043 0307 	orr.w	r3, r3, #7
 8001162:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <SystemInit+0xec>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a2d      	ldr	r2, [pc, #180]	; (8001220 <SystemInit+0xec>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <SystemInit+0xec>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <SystemInit+0xec>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4929      	ldr	r1, [pc, #164]	; (8001220 <SystemInit+0xec>)
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <SystemInit+0xf0>)
 800117e:	4013      	ands	r3, r2
 8001180:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <SystemInit+0xe8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <SystemInit+0xe8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 030f 	bic.w	r3, r3, #15
 8001196:	4a21      	ldr	r2, [pc, #132]	; (800121c <SystemInit+0xe8>)
 8001198:	f043 0307 	orr.w	r3, r3, #7
 800119c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <SystemInit+0xec>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <SystemInit+0xec>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <SystemInit+0xec>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <SystemInit+0xec>)
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <SystemInit+0xf4>)
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <SystemInit+0xec>)
 80011b8:	4a1c      	ldr	r2, [pc, #112]	; (800122c <SystemInit+0xf8>)
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <SystemInit+0xec>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <SystemInit+0xfc>)
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <SystemInit+0xec>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <SystemInit+0xec>)
 80011ca:	4a19      	ldr	r2, [pc, #100]	; (8001230 <SystemInit+0xfc>)
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <SystemInit+0xec>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <SystemInit+0xec>)
 80011d6:	4a16      	ldr	r2, [pc, #88]	; (8001230 <SystemInit+0xfc>)
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <SystemInit+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <SystemInit+0xec>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <SystemInit+0xec>)
 80011e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <SystemInit+0xec>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <SystemInit+0x100>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <SystemInit+0x104>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011fe:	d202      	bcs.n	8001206 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <SystemInit+0x108>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <SystemInit+0x10c>)
 8001208:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800120c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	52002000 	.word	0x52002000
 8001220:	58024400 	.word	0x58024400
 8001224:	eaf6ed7f 	.word	0xeaf6ed7f
 8001228:	02020200 	.word	0x02020200
 800122c:	01ff0000 	.word	0x01ff0000
 8001230:	01010280 	.word	0x01010280
 8001234:	5c001000 	.word	0x5c001000
 8001238:	ffff0000 	.word	0xffff0000
 800123c:	51008108 	.word	0x51008108
 8001240:	52004000 	.word	0x52004000

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001248:	f7ff ff74 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124e:	490d      	ldr	r1, [pc, #52]	; (8001284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001264:	4c0a      	ldr	r4, [pc, #40]	; (8001290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001272:	f008 f8cd 	bl	8009410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff fcbb 	bl	8000bf0 <main>
  bx  lr
 800127a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800127c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001280:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001284:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001288:	0800a310 	.word	0x0800a310
  ldr r2, =_sbss
 800128c:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001290:	24010960 	.word	0x24010960

08001294 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC3_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 f926 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a4:	f001 f910 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 80012a8:	4602      	mov	r2, r0
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_Init+0x68>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	f003 030f 	and.w	r3, r3, #15
 80012b4:	4913      	ldr	r1, [pc, #76]	; (8001304 <HAL_Init+0x6c>)
 80012b6:	5ccb      	ldrb	r3, [r1, r3]
 80012b8:	f003 031f 	and.w	r3, r3, #31
 80012bc:	fa22 f303 	lsr.w	r3, r2, r3
 80012c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_Init+0x68>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_Init+0x6c>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	f003 031f 	and.w	r3, r3, #31
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <HAL_Init+0x70>)
 80012da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012dc:	4a0b      	ldr	r2, [pc, #44]	; (800130c <HAL_Init+0x74>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e2:	200f      	movs	r0, #15
 80012e4:	f7ff fe5e 	bl	8000fa4 <HAL_InitTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e002      	b.n	80012f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012f2:	f7ff fe17 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	58024400 	.word	0x58024400
 8001304:	0800a260 	.word	0x0800a260
 8001308:	24000004 	.word	0x24000004
 800130c:	24000000 	.word	0x24000000

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2400000c 	.word	0x2400000c
 8001334:	24000b7c 	.word	0x24000b7c

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	24000b7c 	.word	0x24000b7c

08001350 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetREVID+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0c1b      	lsrs	r3, r3, #16
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	5c001000 	.word	0x5c001000

08001368 <__NVIC_SetPriorityGrouping>:
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <__NVIC_SetPriorityGrouping+0x40>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	4313      	orrs	r3, r2
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	05fa0000 	.word	0x05fa0000

080013b0 <__NVIC_GetPriorityGrouping>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	; (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80014c8:	f3bf 8f4f 	dsb	sy
}
 80014cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <__NVIC_SystemReset+0x24>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014d6:	4904      	ldr	r1, [pc, #16]	; (80014e8 <__NVIC_SystemReset+0x24>)
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_SystemReset+0x28>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014de:	f3bf 8f4f 	dsb	sy
}
 80014e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <__NVIC_SystemReset+0x20>
 80014e8:	e000ed00 	.word	0xe000ed00
 80014ec:	05fa0004 	.word	0x05fa0004

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff35 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff4c 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff9c 	bl	800145c <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff6b 	bl	8001408 <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff3f 	bl	80013cc <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800155a:	f7ff ffb3 	bl	80014c4 <__NVIC_SystemReset>
	...

08001560 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001564:	f3bf 8f5f 	dmb	sy
}
 8001568:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_MPU_Disable+0x28>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4a06      	ldr	r2, [pc, #24]	; (8001588 <HAL_MPU_Disable+0x28>)
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_MPU_Disable+0x2c>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	e000ed90 	.word	0xe000ed90

08001590 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_MPU_Enable+0x38>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_MPU_Enable+0x3c>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_MPU_Enable+0x3c>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015ae:	f3bf 8f4f 	dsb	sy
}
 80015b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b4:	f3bf 8f6f 	isb	sy
}
 80015b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed90 	.word	0xe000ed90
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	785a      	ldrb	r2, [r3, #1]
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_MPU_ConfigRegion+0x7c>)
 80015de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_MPU_ConfigRegion+0x7c>)
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <HAL_MPU_ConfigRegion+0x7c>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015ec:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_MPU_ConfigRegion+0x7c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7b1b      	ldrb	r3, [r3, #12]
 80015f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7adb      	ldrb	r3, [r3, #11]
 80015fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001600:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7a9b      	ldrb	r3, [r3, #10]
 8001606:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001608:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7b5b      	ldrb	r3, [r3, #13]
 800160e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001610:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7b9b      	ldrb	r3, [r3, #14]
 8001616:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001618:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7bdb      	ldrb	r3, [r3, #15]
 800161e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001620:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7a5b      	ldrb	r3, [r3, #9]
 8001626:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7a1b      	ldrb	r3, [r3, #8]
 800162e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001630:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800163a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800163c:	6113      	str	r3, [r2, #16]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed90 	.word	0xe000ed90

08001650 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e054      	b.n	800170c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7f5b      	ldrb	r3, [r3, #29]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d105      	bne.n	8001678 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fc74 	bl	8000f60 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	791b      	ldrb	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10c      	bne.n	80016a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_CRC_Init+0xc4>)
 800168c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0218 	bic.w	r2, r2, #24
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	e00c      	b.n	80016ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6899      	ldr	r1, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	461a      	mov	r2, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f834 	bl	8001718 <HAL_CRCEx_Polynomial_Set>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e028      	b.n	800170c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	795b      	ldrb	r3, [r3, #5]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d105      	bne.n	80016ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	e004      	b.n	80016d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6912      	ldr	r2, [r2, #16]
 80016d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699a      	ldr	r2, [r3, #24]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	04c11db7 	.word	0x04c11db7

08001718 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001728:	231f      	movs	r3, #31
 800172a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	75fb      	strb	r3, [r7, #23]
 800173a:	e063      	b.n	8001804 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800173c:	bf00      	nop
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	613a      	str	r2, [r7, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d009      	beq.n	800175c <HAL_CRCEx_Polynomial_Set+0x44>
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b18      	cmp	r3, #24
 8001760:	d846      	bhi.n	80017f0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	080017f7 	.word	0x080017f7
 800176c:	080017f1 	.word	0x080017f1
 8001770:	080017f1 	.word	0x080017f1
 8001774:	080017f1 	.word	0x080017f1
 8001778:	080017f1 	.word	0x080017f1
 800177c:	080017f1 	.word	0x080017f1
 8001780:	080017f1 	.word	0x080017f1
 8001784:	080017f1 	.word	0x080017f1
 8001788:	080017e5 	.word	0x080017e5
 800178c:	080017f1 	.word	0x080017f1
 8001790:	080017f1 	.word	0x080017f1
 8001794:	080017f1 	.word	0x080017f1
 8001798:	080017f1 	.word	0x080017f1
 800179c:	080017f1 	.word	0x080017f1
 80017a0:	080017f1 	.word	0x080017f1
 80017a4:	080017f1 	.word	0x080017f1
 80017a8:	080017d9 	.word	0x080017d9
 80017ac:	080017f1 	.word	0x080017f1
 80017b0:	080017f1 	.word	0x080017f1
 80017b4:	080017f1 	.word	0x080017f1
 80017b8:	080017f1 	.word	0x080017f1
 80017bc:	080017f1 	.word	0x080017f1
 80017c0:	080017f1 	.word	0x080017f1
 80017c4:	080017f1 	.word	0x080017f1
 80017c8:	080017cd 	.word	0x080017cd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d913      	bls.n	80017fa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017d6:	e010      	b.n	80017fa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2b07      	cmp	r3, #7
 80017dc:	d90f      	bls.n	80017fe <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017e2:	e00c      	b.n	80017fe <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	d90b      	bls.n	8001802 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017ee:	e008      	b.n	8001802 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	75fb      	strb	r3, [r7, #23]
        break;
 80017f4:	e006      	b.n	8001804 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017f6:	bf00      	nop
 80017f8:	e004      	b.n	8001804 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017fa:	bf00      	nop
 80017fc:	e002      	b.n	8001804 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017fe:	bf00      	nop
 8001800:	e000      	b.n	8001804 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001802:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10d      	bne.n	8001826 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 0118 	bic.w	r1, r3, #24
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001826:	7dfb      	ldrb	r3, [r7, #23]
}
 8001828:	4618      	mov	r0, r3
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_PWREx_ConfigSupply+0x70>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b04      	cmp	r3, #4
 8001846:	d00a      	beq.n	800185e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_PWREx_ConfigSupply+0x70>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e01f      	b.n	800189a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e01d      	b.n	800189a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_PWREx_ConfigSupply+0x70>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f023 0207 	bic.w	r2, r3, #7
 8001866:	490f      	ldr	r1, [pc, #60]	; (80018a4 <HAL_PWREx_ConfigSupply+0x70>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4313      	orrs	r3, r2
 800186c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800186e:	f7ff fd63 	bl	8001338 <HAL_GetTick>
 8001872:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001874:	e009      	b.n	800188a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001876:	f7ff fd5f 	bl	8001338 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001884:	d901      	bls.n	800188a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e007      	b.n	800189a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_PWREx_ConfigSupply+0x70>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001896:	d1ee      	bne.n	8001876 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	58024800 	.word	0x58024800

080018a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f000 bc48 	b.w	800214c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 8088 	beq.w	80019da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ca:	4b99      	ldr	r3, [pc, #612]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018d4:	4b96      	ldr	r3, [pc, #600]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	2b10      	cmp	r3, #16
 80018de:	d007      	beq.n	80018f0 <HAL_RCC_OscConfig+0x48>
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	2b18      	cmp	r3, #24
 80018e4:	d111      	bne.n	800190a <HAL_RCC_OscConfig+0x62>
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d10c      	bne.n	800190a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	4b8f      	ldr	r3, [pc, #572]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d06d      	beq.n	80019d8 <HAL_RCC_OscConfig+0x130>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d169      	bne.n	80019d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	f000 bc21 	b.w	800214c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x7a>
 8001914:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a85      	ldr	r2, [pc, #532]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 800191a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	e02e      	b.n	8001980 <HAL_RCC_OscConfig+0xd8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x9c>
 800192a:	4b81      	ldr	r3, [pc, #516]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a80      	ldr	r2, [pc, #512]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b7e      	ldr	r3, [pc, #504]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7d      	ldr	r2, [pc, #500]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 800193c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e01d      	b.n	8001980 <HAL_RCC_OscConfig+0xd8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0xc0>
 800194e:	4b78      	ldr	r3, [pc, #480]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a77      	ldr	r2, [pc, #476]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b75      	ldr	r3, [pc, #468]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a74      	ldr	r2, [pc, #464]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0xd8>
 8001968:	4b71      	ldr	r3, [pc, #452]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a70      	ldr	r2, [pc, #448]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 800196e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b6e      	ldr	r3, [pc, #440]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6d      	ldr	r2, [pc, #436]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fcd6 	bl	8001338 <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff fcd2 	bl	8001338 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e3d4      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0xe8>
 80019ae:	e014      	b.n	80019da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff fcc2 	bl	8001338 <HAL_GetTick>
 80019b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fcbe 	bl	8001338 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e3c0      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ca:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x110>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80ca 	beq.w	8001b7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e8:	4b51      	ldr	r3, [pc, #324]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019f2:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <HAL_RCC_OscConfig+0x166>
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	2b18      	cmp	r3, #24
 8001a02:	d156      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x20a>
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d151      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a0e:	4b48      	ldr	r3, [pc, #288]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <HAL_RCC_OscConfig+0x17e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e392      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a26:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 0219 	bic.w	r2, r3, #25
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	493f      	ldr	r1, [pc, #252]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fc7e 	bl	8001338 <HAL_GetTick>
 8001a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff fc7a 	bl	8001338 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e37c      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5e:	f7ff fc77 	bl	8001350 <HAL_GetREVID>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d817      	bhi.n	8001a9c <HAL_RCC_OscConfig+0x1f4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	2b40      	cmp	r3, #64	; 0x40
 8001a72:	d108      	bne.n	8001a86 <HAL_RCC_OscConfig+0x1de>
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a7c:	4a2c      	ldr	r2, [pc, #176]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a84:	e07a      	b.n	8001b7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	031b      	lsls	r3, r3, #12
 8001a94:	4926      	ldr	r1, [pc, #152]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a9a:	e06f      	b.n	8001b7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	061b      	lsls	r3, r3, #24
 8001aaa:	4921      	ldr	r1, [pc, #132]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab0:	e064      	b.n	8001b7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d047      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 0219 	bic.w	r2, r3, #25
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	491a      	ldr	r1, [pc, #104]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff fc34 	bl	8001338 <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fc30 	bl	8001338 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e332      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	f7ff fc2d 	bl	8001350 <HAL_GetREVID>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d819      	bhi.n	8001b34 <HAL_RCC_OscConfig+0x28c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	2b40      	cmp	r3, #64	; 0x40
 8001b06:	d108      	bne.n	8001b1a <HAL_RCC_OscConfig+0x272>
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b16:	6053      	str	r3, [r2, #4]
 8001b18:	e030      	b.n	8001b7c <HAL_RCC_OscConfig+0x2d4>
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	031b      	lsls	r3, r3, #12
 8001b28:	4901      	ldr	r1, [pc, #4]	; (8001b30 <HAL_RCC_OscConfig+0x288>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
 8001b2e:	e025      	b.n	8001b7c <HAL_RCC_OscConfig+0x2d4>
 8001b30:	58024400 	.word	0x58024400
 8001b34:	4b9a      	ldr	r3, [pc, #616]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	4997      	ldr	r1, [pc, #604]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
 8001b48:	e018      	b.n	8001b7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4a:	4b95      	ldr	r3, [pc, #596]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a94      	ldr	r2, [pc, #592]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b56:	f7ff fbef 	bl	8001338 <HAL_GetTick>
 8001b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fbeb 	bl	8001338 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e2ed      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b70:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80a9 	beq.w	8001cdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b94:	4b82      	ldr	r3, [pc, #520]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d007      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x308>
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b18      	cmp	r3, #24
 8001ba4:	d13a      	bne.n	8001c1c <HAL_RCC_OscConfig+0x374>
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d135      	bne.n	8001c1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x320>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	2b80      	cmp	r3, #128	; 0x80
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e2c1      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bc8:	f7ff fbc2 	bl	8001350 <HAL_GetREVID>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d817      	bhi.n	8001c06 <HAL_RCC_OscConfig+0x35e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d108      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x348>
 8001bde:	4b70      	ldr	r3, [pc, #448]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001be6:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001be8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bee:	e075      	b.n	8001cdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	069b      	lsls	r3, r3, #26
 8001bfe:	4968      	ldr	r1, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c04:	e06a      	b.n	8001cdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c06:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	4962      	ldr	r1, [pc, #392]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c1a:	e05f      	b.n	8001cdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d042      	beq.n	8001caa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c24:	4b5e      	ldr	r3, [pc, #376]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5d      	ldr	r2, [pc, #372]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fb82 	bl	8001338 <HAL_GetTick>
 8001c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c38:	f7ff fb7e 	bl	8001338 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e280      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c4a:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c56:	f7ff fb7b 	bl	8001350 <HAL_GetREVID>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d817      	bhi.n	8001c94 <HAL_RCC_OscConfig+0x3ec>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d108      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3d6>
 8001c6c:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c74:	4a4a      	ldr	r2, [pc, #296]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c7a:	6053      	str	r3, [r2, #4]
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0x434>
 8001c7e:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	069b      	lsls	r3, r3, #26
 8001c8c:	4944      	ldr	r1, [pc, #272]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
 8001c92:	e023      	b.n	8001cdc <HAL_RCC_OscConfig+0x434>
 8001c94:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	493f      	ldr	r1, [pc, #252]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60cb      	str	r3, [r1, #12]
 8001ca8:	e018      	b.n	8001cdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a3c      	ldr	r2, [pc, #240]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb3f 	bl	8001338 <HAL_GetTick>
 8001cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fb3b 	bl	8001338 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e23d      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cd0:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d036      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d019      	beq.n	8001d24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf4:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fb1c 	bl	8001338 <HAL_GetTick>
 8001d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d04:	f7ff fb18 	bl	8001338 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e21a      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x45c>
 8001d22:	e018      	b.n	8001d56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d24:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff fb02 	bl	8001338 <HAL_GetTick>
 8001d34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7ff fafe 	bl	8001338 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e200      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d039      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01c      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d76:	f7ff fadf 	bl	8001338 <HAL_GetTick>
 8001d7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d7e:	f7ff fadb 	bl	8001338 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1dd      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x4d6>
 8001d9c:	e01b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x52e>
 8001d9e:	bf00      	nop
 8001da0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001da4:	4b9b      	ldr	r3, [pc, #620]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a9a      	ldr	r2, [pc, #616]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001db0:	f7ff fac2 	bl	8001338 <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db8:	f7ff fabe 	bl	8001338 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1c0      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dca:	4b92      	ldr	r3, [pc, #584]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8081 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001de4:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <HAL_RCC_OscConfig+0x770>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a8b      	ldr	r2, [pc, #556]	; (8002018 <HAL_RCC_OscConfig+0x770>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001df0:	f7ff faa2 	bl	8001338 <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7ff fa9e 	bl	8001338 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1a0      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e0a:	4b83      	ldr	r3, [pc, #524]	; (8002018 <HAL_RCC_OscConfig+0x770>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d106      	bne.n	8001e2c <HAL_RCC_OscConfig+0x584>
 8001e1e:	4b7d      	ldr	r3, [pc, #500]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	4a7c      	ldr	r2, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2a:	e02d      	b.n	8001e88 <HAL_RCC_OscConfig+0x5e0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x5a6>
 8001e34:	4b77      	ldr	r3, [pc, #476]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a76      	ldr	r2, [pc, #472]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e40:	4b74      	ldr	r3, [pc, #464]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a73      	ldr	r2, [pc, #460]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e46:	f023 0304 	bic.w	r3, r3, #4
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x5e0>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5c8>
 8001e56:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	4a6e      	ldr	r2, [pc, #440]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6713      	str	r3, [r2, #112]	; 0x70
 8001e62:	4b6c      	ldr	r3, [pc, #432]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	4a6b      	ldr	r2, [pc, #428]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0x5e0>
 8001e70:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	4a67      	ldr	r2, [pc, #412]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7c:	4b65      	ldr	r3, [pc, #404]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4a64      	ldr	r2, [pc, #400]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d015      	beq.n	8001ebc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7ff fa52 	bl	8001338 <HAL_GetTick>
 8001e94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e98:	f7ff fa4e 	bl	8001338 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e14e      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0ee      	beq.n	8001e98 <HAL_RCC_OscConfig+0x5f0>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fa3c 	bl	8001338 <HAL_GetTick>
 8001ec0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fa38 	bl	8001338 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e138      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eda:	4b4e      	ldr	r3, [pc, #312]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ee      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 812d 	beq.w	800214a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ef0:	4b48      	ldr	r3, [pc, #288]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ef8:	2b18      	cmp	r3, #24
 8001efa:	f000 80bd 	beq.w	8002078 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	f040 809e 	bne.w	8002044 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a41      	ldr	r2, [pc, #260]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff fa10 	bl	8001338 <HAL_GetTick>
 8001f18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff fa0c 	bl	8001338 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e10e      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f2e:	4b39      	ldr	r3, [pc, #228]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f3a:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3e:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_RCC_OscConfig+0x774>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	4931      	ldr	r1, [pc, #196]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	628b      	str	r3, [r1, #40]	; 0x28
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	3b01      	subs	r3, #1
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	061b      	lsls	r3, r3, #24
 8001f80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001f84:	4923      	ldr	r1, [pc, #140]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	4a21      	ldr	r2, [pc, #132]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_RCC_OscConfig+0x778>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fa2:	00d2      	lsls	r2, r2, #3
 8001fa4:	491b      	ldr	r1, [pc, #108]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	f023 020c 	bic.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4917      	ldr	r1, [pc, #92]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	f023 0202 	bic.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	4912      	ldr	r1, [pc, #72]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_RCC_OscConfig+0x76c>)
 8002004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7ff f995 	bl	8001338 <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002010:	e011      	b.n	8002036 <HAL_RCC_OscConfig+0x78e>
 8002012:	bf00      	nop
 8002014:	58024400 	.word	0x58024400
 8002018:	58024800 	.word	0x58024800
 800201c:	fffffc0c 	.word	0xfffffc0c
 8002020:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff f988 	bl	8001338 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e08a      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x77c>
 8002042:	e082      	b.n	800214a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a42      	ldr	r2, [pc, #264]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 800204a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800204e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f972 	bl	8001338 <HAL_GetTick>
 8002054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff f96e 	bl	8001338 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e070      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800206a:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x7b0>
 8002076:	e068      	b.n	800214a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002078:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800207e:	4b35      	ldr	r3, [pc, #212]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	2b01      	cmp	r3, #1
 800208a:	d031      	beq.n	80020f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f003 0203 	and.w	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d12a      	bne.n	80020f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d122      	bne.n	80020f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d11a      	bne.n	80020f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0a5b      	lsrs	r3, r3, #9
 80020be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d111      	bne.n	80020f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d108      	bne.n	80020f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	0e1b      	lsrs	r3, r3, #24
 80020e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e02b      	b.n	800214c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	08db      	lsrs	r3, r3, #3
 80020fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	429a      	cmp	r2, r3
 8002108:	d01f      	beq.n	800214a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	4a11      	ldr	r2, [pc, #68]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002116:	f7ff f90f 	bl	8001338 <HAL_GetTick>
 800211a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800211c:	bf00      	nop
 800211e:	f7ff f90b 	bl	8001338 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	4293      	cmp	r3, r2
 8002128:	d0f9      	beq.n	800211e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 800212c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_OscConfig+0x8b0>)
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002136:	00d2      	lsls	r2, r2, #3
 8002138:	4906      	ldr	r1, [pc, #24]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 800213a:	4313      	orrs	r3, r2
 800213c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_RCC_OscConfig+0x8ac>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3730      	adds	r7, #48	; 0x30
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	58024400 	.word	0x58024400
 8002158:	ffff0007 	.word	0xffff0007

0800215c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e19c      	b.n	80024aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b8a      	ldr	r3, [pc, #552]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d910      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b87      	ldr	r3, [pc, #540]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 020f 	bic.w	r2, r3, #15
 8002186:	4985      	ldr	r1, [pc, #532]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b83      	ldr	r3, [pc, #524]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e184      	b.n	80024aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d010      	beq.n	80021ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d908      	bls.n	80021ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021bc:	4b78      	ldr	r3, [pc, #480]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	4975      	ldr	r1, [pc, #468]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d010      	beq.n	80021fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	4b70      	ldr	r3, [pc, #448]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d908      	bls.n	80021fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021ea:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	496a      	ldr	r1, [pc, #424]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d010      	beq.n	800222a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	4b64      	ldr	r3, [pc, #400]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002214:	429a      	cmp	r2, r3
 8002216:	d908      	bls.n	800222a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002218:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	495e      	ldr	r1, [pc, #376]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002226:	4313      	orrs	r3, r2
 8002228:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	d010      	beq.n	8002258 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002242:	429a      	cmp	r2, r3
 8002244:	d908      	bls.n	8002258 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002246:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	4953      	ldr	r1, [pc, #332]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002254:	4313      	orrs	r3, r2
 8002256:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d010      	beq.n	8002286 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	4b4d      	ldr	r3, [pc, #308]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	429a      	cmp	r2, r3
 8002272:	d908      	bls.n	8002286 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002274:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f023 020f 	bic.w	r2, r3, #15
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4947      	ldr	r1, [pc, #284]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002282:	4313      	orrs	r3, r2
 8002284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d055      	beq.n	800233e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002292:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4940      	ldr	r1, [pc, #256]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ac:	4b3c      	ldr	r3, [pc, #240]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d121      	bne.n	80022fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0f6      	b.n	80024aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022c4:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d115      	bne.n	80022fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0ea      	b.n	80024aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0de      	b.n	80024aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ec:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0d6      	b.n	80024aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f023 0207 	bic.w	r2, r3, #7
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4925      	ldr	r1, [pc, #148]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 800230a:	4313      	orrs	r3, r2
 800230c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800230e:	f7ff f813 	bl	8001338 <HAL_GetTick>
 8002312:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002314:	e00a      	b.n	800232c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002316:	f7ff f80f 	bl	8001338 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0be      	b.n	80024aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232c:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	429a      	cmp	r2, r3
 800233c:	d1eb      	bne.n	8002316 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d010      	beq.n	800236c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	429a      	cmp	r2, r3
 8002358:	d208      	bcs.n	800236c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	490e      	ldr	r1, [pc, #56]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002368:	4313      	orrs	r3, r2
 800236a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d214      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 020f 	bic.w	r2, r3, #15
 8002382:	4906      	ldr	r1, [pc, #24]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e086      	b.n	80024aa <HAL_RCC_ClockConfig+0x34e>
 800239c:	52002000 	.word	0x52002000
 80023a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d010      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023bc:	429a      	cmp	r2, r3
 80023be:	d208      	bcs.n	80023d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023c0:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	4939      	ldr	r1, [pc, #228]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d010      	beq.n	8002400 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d208      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023ee:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	492e      	ldr	r1, [pc, #184]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d010      	beq.n	800242e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002418:	429a      	cmp	r2, r3
 800241a:	d208      	bcs.n	800242e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800241c:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4922      	ldr	r1, [pc, #136]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 800242a:	4313      	orrs	r3, r2
 800242c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d010      	beq.n	800245c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69da      	ldr	r2, [r3, #28]
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002446:	429a      	cmp	r2, r3
 8002448:	d208      	bcs.n	800245c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4917      	ldr	r1, [pc, #92]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 8002458:	4313      	orrs	r3, r2
 800245a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800245c:	f000 f834 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	4912      	ldr	r1, [pc, #72]	; (80024b8 <HAL_RCC_ClockConfig+0x35c>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <HAL_RCC_ClockConfig+0x358>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_RCC_ClockConfig+0x35c>)
 8002484:	5cd3      	ldrb	r3, [r2, r3]
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
 8002490:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <HAL_RCC_ClockConfig+0x360>)
 8002492:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x364>)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x368>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fd80 	bl	8000fa4 <HAL_InitTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	58024400 	.word	0x58024400
 80024b8:	0800a260 	.word	0x0800a260
 80024bc:	24000004 	.word	0x24000004
 80024c0:	24000000 	.word	0x24000000
 80024c4:	24000008 	.word	0x24000008

080024c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ce:	4bb3      	ldr	r3, [pc, #716]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d6:	2b18      	cmp	r3, #24
 80024d8:	f200 8155 	bhi.w	8002786 <HAL_RCC_GetSysClockFreq+0x2be>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	08002549 	.word	0x08002549
 80024e8:	08002787 	.word	0x08002787
 80024ec:	08002787 	.word	0x08002787
 80024f0:	08002787 	.word	0x08002787
 80024f4:	08002787 	.word	0x08002787
 80024f8:	08002787 	.word	0x08002787
 80024fc:	08002787 	.word	0x08002787
 8002500:	08002787 	.word	0x08002787
 8002504:	0800256f 	.word	0x0800256f
 8002508:	08002787 	.word	0x08002787
 800250c:	08002787 	.word	0x08002787
 8002510:	08002787 	.word	0x08002787
 8002514:	08002787 	.word	0x08002787
 8002518:	08002787 	.word	0x08002787
 800251c:	08002787 	.word	0x08002787
 8002520:	08002787 	.word	0x08002787
 8002524:	08002575 	.word	0x08002575
 8002528:	08002787 	.word	0x08002787
 800252c:	08002787 	.word	0x08002787
 8002530:	08002787 	.word	0x08002787
 8002534:	08002787 	.word	0x08002787
 8002538:	08002787 	.word	0x08002787
 800253c:	08002787 	.word	0x08002787
 8002540:	08002787 	.word	0x08002787
 8002544:	0800257b 	.word	0x0800257b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002548:	4b94      	ldr	r3, [pc, #592]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002554:	4b91      	ldr	r3, [pc, #580]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	4a90      	ldr	r2, [pc, #576]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002566:	e111      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002568:	4b8d      	ldr	r3, [pc, #564]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800256a:	61bb      	str	r3, [r7, #24]
      break;
 800256c:	e10e      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800256e:	4b8d      	ldr	r3, [pc, #564]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002570:	61bb      	str	r3, [r7, #24]
      break;
 8002572:	e10b      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002574:	4b8c      	ldr	r3, [pc, #560]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002576:	61bb      	str	r3, [r7, #24]
      break;
 8002578:	e108      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800257a:	4b88      	ldr	r3, [pc, #544]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002584:	4b85      	ldr	r3, [pc, #532]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800258e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002590:	4b82      	ldr	r3, [pc, #520]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800259a:	4b80      	ldr	r3, [pc, #512]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	08db      	lsrs	r3, r3, #3
 80025a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80e1 	beq.w	8002780 <HAL_RCC_GetSysClockFreq+0x2b8>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	f000 8083 	beq.w	80026cc <HAL_RCC_GetSysClockFreq+0x204>
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	f200 80a1 	bhi.w	8002710 <HAL_RCC_GetSysClockFreq+0x248>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x114>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d056      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025da:	e099      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025dc:	4b6f      	ldr	r3, [pc, #444]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d02d      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025e8:	4b6c      	ldr	r3, [pc, #432]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	08db      	lsrs	r3, r3, #3
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	4a6b      	ldr	r2, [pc, #428]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
 80025f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	ee07 3a90 	vmov	s15, r3
 8002600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002612:	4b62      	ldr	r3, [pc, #392]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002622:	ed97 6a02 	vldr	s12, [r7, #8]
 8002626:	eddf 5a61 	vldr	s11, [pc, #388]	; 80027ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800262a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800262e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800263a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002642:	e087      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80027b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002656:	4b51      	ldr	r3, [pc, #324]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002666:	ed97 6a02 	vldr	s12, [r7, #8]
 800266a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80027ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800266e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800267a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800267e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002686:	e065      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	eddf 6a48 	vldr	s13, [pc, #288]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800269a:	4b40      	ldr	r3, [pc, #256]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80027ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80026b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026ca:	e043      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80027b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026de:	4b2f      	ldr	r3, [pc, #188]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80026f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80027ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80026f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800270e:	e021      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800271e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002722:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002732:	ed97 6a02 	vldr	s12, [r7, #8]
 8002736:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80027ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800273a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800273e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800274a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002752:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	0a5b      	lsrs	r3, r3, #9
 800275a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800275e:	3301      	adds	r3, #1
 8002760:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	ee07 3a90 	vmov	s15, r3
 8002768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800276c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002778:	ee17 3a90 	vmov	r3, s15
 800277c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800277e:	e005      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	61bb      	str	r3, [r7, #24]
      break;
 8002784:	e002      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002788:	61bb      	str	r3, [r7, #24]
      break;
 800278a:	bf00      	nop
  }

  return sysclockfreq;
 800278c:	69bb      	ldr	r3, [r7, #24]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	58024400 	.word	0x58024400
 80027a0:	03d09000 	.word	0x03d09000
 80027a4:	003d0900 	.word	0x003d0900
 80027a8:	017d7840 	.word	0x017d7840
 80027ac:	46000000 	.word	0x46000000
 80027b0:	4c742400 	.word	0x4c742400
 80027b4:	4a742400 	.word	0x4a742400
 80027b8:	4bbebc20 	.word	0x4bbebc20

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80027c2:	f7ff fe81 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_RCC_GetHCLKFreq+0x50>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	490f      	ldr	r1, [pc, #60]	; (8002810 <HAL_RCC_GetHCLKFreq+0x54>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_RCC_GetHCLKFreq+0x50>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	4a09      	ldr	r2, [pc, #36]	; (8002810 <HAL_RCC_GetHCLKFreq+0x54>)
 80027ea:	5cd3      	ldrb	r3, [r2, r3]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	fa22 f303 	lsr.w	r3, r2, r3
 80027f6:	4a07      	ldr	r2, [pc, #28]	; (8002814 <HAL_RCC_GetHCLKFreq+0x58>)
 80027f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027fa:	4a07      	ldr	r2, [pc, #28]	; (8002818 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_RCC_GetHCLKFreq+0x58>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58024400 	.word	0x58024400
 8002810:	0800a260 	.word	0x0800a260
 8002814:	24000004 	.word	0x24000004
 8002818:	24000000 	.word	0x24000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002820:	f7ff ffcc 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4904      	ldr	r1, [pc, #16]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	58024400 	.word	0x58024400
 8002844:	0800a260 	.word	0x0800a260

08002848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	223f      	movs	r2, #63	; 0x3f
 8002856:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <HAL_RCC_GetClockConfig+0x7c>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f003 0207 	and.w	r2, r3, #7
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_RCC_GetClockConfig+0x7c>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_RCC_GetClockConfig+0x7c>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 020f 	and.w	r2, r3, #15
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCC_GetClockConfig+0x7c>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_RCC_GetClockConfig+0x7c>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetClockConfig+0x7c>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HAL_RCC_GetClockConfig+0x7c>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_GetClockConfig+0x80>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 020f 	and.w	r2, r3, #15
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	601a      	str	r2, [r3, #0]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	58024400 	.word	0x58024400
 80028c8:	52002000 	.word	0x52002000

080028cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d0:	b0ca      	sub	sp, #296	; 0x128
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80028f0:	2500      	movs	r5, #0
 80028f2:	ea54 0305 	orrs.w	r3, r4, r5
 80028f6:	d049      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80028f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002902:	d02f      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002904:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002908:	d828      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800290a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800290e:	d01a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002914:	d822      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800291a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800291e:	d007      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002920:	e01c      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002922:	4bb8      	ldr	r3, [pc, #736]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	4ab7      	ldr	r2, [pc, #732]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800292e:	e01a      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002934:	3308      	adds	r3, #8
 8002936:	2102      	movs	r1, #2
 8002938:	4618      	mov	r0, r3
 800293a:	f001 f9d1 	bl	8003ce0 <RCCEx_PLL2_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002944:	e00f      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800294a:	3328      	adds	r3, #40	; 0x28
 800294c:	2102      	movs	r1, #2
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fa78 	bl	8003e44 <RCCEx_PLL3_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800295a:	e004      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002962:	e000      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10a      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800296e:	4ba5      	ldr	r3, [pc, #660]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002972:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800297a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800297c:	4aa1      	ldr	r2, [pc, #644]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800297e:	430b      	orrs	r3, r1
 8002980:	6513      	str	r3, [r2, #80]	; 0x50
 8002982:	e003      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002984:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002988:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800298c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002998:	f04f 0900 	mov.w	r9, #0
 800299c:	ea58 0309 	orrs.w	r3, r8, r9
 80029a0:	d047      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80029a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d82a      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80029ac:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b2:	bf00      	nop
 80029b4:	080029c9 	.word	0x080029c9
 80029b8:	080029d7 	.word	0x080029d7
 80029bc:	080029ed 	.word	0x080029ed
 80029c0:	08002a0b 	.word	0x08002a0b
 80029c4:	08002a0b 	.word	0x08002a0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c8:	4b8e      	ldr	r3, [pc, #568]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	4a8d      	ldr	r2, [pc, #564]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029d4:	e01a      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029da:	3308      	adds	r3, #8
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 f97e 	bl	8003ce0 <RCCEx_PLL2_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029ea:	e00f      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f0:	3328      	adds	r3, #40	; 0x28
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 fa25 	bl	8003e44 <RCCEx_PLL3_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a00:	e004      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a08:	e000      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a14:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a18:	f023 0107 	bic.w	r1, r3, #7
 8002a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	4a78      	ldr	r2, [pc, #480]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6513      	str	r3, [r2, #80]	; 0x50
 8002a28:	e003      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002a3e:	f04f 0b00 	mov.w	fp, #0
 8002a42:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a46:	d04c      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a52:	d030      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a58:	d829      	bhi.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a5c:	d02d      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002a5e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a60:	d825      	bhi.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a62:	2b80      	cmp	r3, #128	; 0x80
 8002a64:	d018      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002a66:	2b80      	cmp	r3, #128	; 0x80
 8002a68:	d821      	bhi.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d007      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002a72:	e01c      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a74:	4b63      	ldr	r3, [pc, #396]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	4a62      	ldr	r2, [pc, #392]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a80:	e01c      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a86:	3308      	adds	r3, #8
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f001 f928 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a96:	e011      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a9c:	3328      	adds	r3, #40	; 0x28
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f9cf 	bl	8003e44 <RCCEx_PLL3_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002aac:	e006      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ab4:	e002      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ab6:	bf00      	nop
 8002ab8:	e000      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ac4:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	4a4c      	ldr	r2, [pc, #304]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6513      	str	r3, [r2, #80]	; 0x50
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002aee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002af8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002afc:	460b      	mov	r3, r1
 8002afe:	4313      	orrs	r3, r2
 8002b00:	d053      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b0e:	d035      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002b10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b14:	d82e      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b1a:	d031      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002b1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b20:	d828      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b26:	d01a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b2c:	d822      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002b32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b36:	d007      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002b38:	e01c      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b3a:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	4a31      	ldr	r2, [pc, #196]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b46:	e01c      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 f8c5 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b5c:	e011      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b62:	3328      	adds	r3, #40	; 0x28
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 f96c 	bl	8003e44 <RCCEx_PLL3_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b72:	e006      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b7a:	e002      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b7c:	bf00      	nop
 8002b7e:	e000      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba0:	e003      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002bb6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bc0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	d056      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd6:	d038      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bdc:	d831      	bhi.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002be2:	d034      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002be4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002be8:	d82b      	bhi.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bee:	d01d      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bf4:	d825      	bhi.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002bfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c00:	e01f      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c02:	bf00      	nop
 8002c04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c08:	4ba2      	ldr	r3, [pc, #648]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	4aa1      	ldr	r2, [pc, #644]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c14:	e01c      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 f85e 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c2a:	e011      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c30:	3328      	adds	r3, #40	; 0x28
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 f905 	bl	8003e44 <RCCEx_PLL3_Config>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c48:	e002      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10b      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c58:	4b8e      	ldr	r3, [pc, #568]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c68:	4a8a      	ldr	r2, [pc, #552]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6e:	e003      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002c84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002c8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002c92:	460b      	mov	r3, r1
 8002c94:	4313      	orrs	r3, r2
 8002c96:	d03a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	2b30      	cmp	r3, #48	; 0x30
 8002ca0:	d01f      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002ca2:	2b30      	cmp	r3, #48	; 0x30
 8002ca4:	d819      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d815      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d019      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d111      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb6:	4b77      	ldr	r3, [pc, #476]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	4a76      	ldr	r2, [pc, #472]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002cc2:	e011      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cc8:	3308      	adds	r3, #8
 8002cca:	2102      	movs	r1, #2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 f807 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002cd8:	e006      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002cf0:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfe:	4a65      	ldr	r2, [pc, #404]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d00:	430b      	orrs	r3, r1
 8002d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d04:	e003      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002d1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002d24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	d051      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d38:	d035      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d3e:	d82e      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d44:	d031      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002d46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d4a:	d828      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d50:	d01a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d56:	d822      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d007      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002d62:	e01c      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d64:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	4a4a      	ldr	r2, [pc, #296]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d70:	e01c      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d76:	3308      	adds	r3, #8
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 ffb0 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d86:	e011      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8c:	3328      	adds	r3, #40	; 0x28
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 f857 	bl	8003e44 <RCCEx_PLL3_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d9c:	e006      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002da4:	e002      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002da6:	bf00      	nop
 8002da8:	e000      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002db4:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc2:	4a34      	ldr	r2, [pc, #208]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6513      	str	r3, [r2, #80]	; 0x50
 8002dc8:	e003      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002de8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002dec:	460b      	mov	r3, r1
 8002dee:	4313      	orrs	r3, r2
 8002df0:	d056      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfc:	d033      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002dfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e02:	d82c      	bhi.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e08:	d02f      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002e0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e0e:	d826      	bhi.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e14:	d02b      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002e16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e1a:	d820      	bhi.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e20:	d012      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e26:	d81a      	bhi.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d022      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d115      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e36:	3308      	adds	r3, #8
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 ff50 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e46:	e015      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e4c:	3328      	adds	r3, #40	; 0x28
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fff7 	bl	8003e44 <RCCEx_PLL3_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e64:	e006      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e66:	bf00      	nop
 8002e68:	e004      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e6a:	bf00      	nop
 8002e6c:	e002      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e6e:	bf00      	nop
 8002e70:	e000      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10d      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e8a:	4a02      	ldr	r2, [pc, #8]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6513      	str	r3, [r2, #80]	; 0x50
 8002e90:	e006      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002eb6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	d055      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ecc:	d033      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed2:	d82c      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed8:	d02f      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ede:	d826      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ee0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ee4:	d02b      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002ee6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002eea:	d820      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef0:	d012      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef6:	d81a      	bhi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d022      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f00:	d115      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f06:	3308      	adds	r3, #8
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fee8 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f16:	e015      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1c:	3328      	adds	r3, #40	; 0x28
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 ff8f 	bl	8003e44 <RCCEx_PLL3_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f34:	e006      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f36:	bf00      	nop
 8002f38:	e004      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10b      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f4c:	4ba3      	ldr	r3, [pc, #652]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f5c:	4a9f      	ldr	r2, [pc, #636]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	6593      	str	r3, [r2, #88]	; 0x58
 8002f62:	e003      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002f82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f86:	460b      	mov	r3, r1
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	d037      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f96:	d00e      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9c:	d816      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d018      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fa6:	d111      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fa8:	4b8c      	ldr	r3, [pc, #560]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	4a8b      	ldr	r2, [pc, #556]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fb4:	e00f      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fba:	3308      	adds	r3, #8
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fe8e 	bl	8003ce0 <RCCEx_PLL2_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fca:	e004      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fde:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a7b      	ldr	r2, [pc, #492]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	6513      	str	r3, [r2, #80]	; 0x50
 8002ff2:	e003      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003008:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800300c:	2300      	movs	r3, #0
 800300e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003012:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003016:	460b      	mov	r3, r1
 8003018:	4313      	orrs	r3, r2
 800301a:	d039      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800301c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003022:	2b03      	cmp	r3, #3
 8003024:	d81c      	bhi.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003026:	a201      	add	r2, pc, #4	; (adr r2, 800302c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	08003069 	.word	0x08003069
 8003030:	0800303d 	.word	0x0800303d
 8003034:	0800304b 	.word	0x0800304b
 8003038:	08003069 	.word	0x08003069
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303c:	4b67      	ldr	r3, [pc, #412]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	4a66      	ldr	r2, [pc, #408]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003048:	e00f      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304e:	3308      	adds	r3, #8
 8003050:	2102      	movs	r1, #2
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fe44 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800305e:	e004      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003066:	e000      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800306a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003072:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	f023 0103 	bic.w	r1, r3, #3
 800307a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800307e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003080:	4a56      	ldr	r2, [pc, #344]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003082:	430b      	orrs	r3, r1
 8003084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003086:	e003      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800308c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800309c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80030aa:	460b      	mov	r3, r1
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f000 809f 	beq.w	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b2:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a4a      	ldr	r2, [pc, #296]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030be:	f7fe f93b 	bl	8001338 <HAL_GetTick>
 80030c2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030c6:	e00b      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c8:	f7fe f936 	bl	8001338 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b64      	cmp	r3, #100	; 0x64
 80030d6:	d903      	bls.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030de:	e005      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030e0:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ed      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80030ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d179      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003100:	4053      	eors	r3, r2
 8003102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003106:	2b00      	cmp	r3, #0
 8003108:	d015      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003112:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a30      	ldr	r2, [pc, #192]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003122:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a2d      	ldr	r2, [pc, #180]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800312e:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003130:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800313a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800313e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003142:	d118      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe f8f8 	bl	8001338 <HAL_GetTick>
 8003148:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800314c:	e00d      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7fe f8f3 	bl	8001338 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003158:	1ad2      	subs	r2, r2, r3
 800315a:	f241 3388 	movw	r3, #5000	; 0x1388
 800315e:	429a      	cmp	r2, r3
 8003160:	d903      	bls.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003168:	e005      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0eb      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800317a:	2b00      	cmp	r3, #0
 800317c:	d129      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003182:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800318e:	d10e      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800319c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031a0:	091a      	lsrs	r2, r3, #4
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6113      	str	r3, [r2, #16]
 80031ac:	e005      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031b8:	6113      	str	r3, [r2, #16]
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80031be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ca:	4a04      	ldr	r2, [pc, #16]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
 80031d0:	e00e      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80031da:	e009      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80031dc:	58024400 	.word	0x58024400
 80031e0:	58024800 	.word	0x58024800
 80031e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f002 0301 	and.w	r3, r2, #1
 80031fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003206:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800320a:	460b      	mov	r3, r1
 800320c:	4313      	orrs	r3, r2
 800320e:	f000 8089 	beq.w	8003324 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003218:	2b28      	cmp	r3, #40	; 0x28
 800321a:	d86b      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	080032fd 	.word	0x080032fd
 8003228:	080032f5 	.word	0x080032f5
 800322c:	080032f5 	.word	0x080032f5
 8003230:	080032f5 	.word	0x080032f5
 8003234:	080032f5 	.word	0x080032f5
 8003238:	080032f5 	.word	0x080032f5
 800323c:	080032f5 	.word	0x080032f5
 8003240:	080032f5 	.word	0x080032f5
 8003244:	080032c9 	.word	0x080032c9
 8003248:	080032f5 	.word	0x080032f5
 800324c:	080032f5 	.word	0x080032f5
 8003250:	080032f5 	.word	0x080032f5
 8003254:	080032f5 	.word	0x080032f5
 8003258:	080032f5 	.word	0x080032f5
 800325c:	080032f5 	.word	0x080032f5
 8003260:	080032f5 	.word	0x080032f5
 8003264:	080032df 	.word	0x080032df
 8003268:	080032f5 	.word	0x080032f5
 800326c:	080032f5 	.word	0x080032f5
 8003270:	080032f5 	.word	0x080032f5
 8003274:	080032f5 	.word	0x080032f5
 8003278:	080032f5 	.word	0x080032f5
 800327c:	080032f5 	.word	0x080032f5
 8003280:	080032f5 	.word	0x080032f5
 8003284:	080032fd 	.word	0x080032fd
 8003288:	080032f5 	.word	0x080032f5
 800328c:	080032f5 	.word	0x080032f5
 8003290:	080032f5 	.word	0x080032f5
 8003294:	080032f5 	.word	0x080032f5
 8003298:	080032f5 	.word	0x080032f5
 800329c:	080032f5 	.word	0x080032f5
 80032a0:	080032f5 	.word	0x080032f5
 80032a4:	080032fd 	.word	0x080032fd
 80032a8:	080032f5 	.word	0x080032f5
 80032ac:	080032f5 	.word	0x080032f5
 80032b0:	080032f5 	.word	0x080032f5
 80032b4:	080032f5 	.word	0x080032f5
 80032b8:	080032f5 	.word	0x080032f5
 80032bc:	080032f5 	.word	0x080032f5
 80032c0:	080032f5 	.word	0x080032f5
 80032c4:	080032fd 	.word	0x080032fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032cc:	3308      	adds	r3, #8
 80032ce:	2101      	movs	r1, #1
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fd05 	bl	8003ce0 <RCCEx_PLL2_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032dc:	e00f      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e2:	3328      	adds	r3, #40	; 0x28
 80032e4:	2101      	movs	r1, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fdac 	bl	8003e44 <RCCEx_PLL3_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032f2:	e004      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032fa:	e000      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80032fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003306:	4bbf      	ldr	r3, [pc, #764]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800330e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003314:	4abb      	ldr	r2, [pc, #748]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003316:	430b      	orrs	r3, r1
 8003318:	6553      	str	r3, [r2, #84]	; 0x54
 800331a:	e003      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003320:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332c:	f002 0302 	and.w	r3, r2, #2
 8003330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003334:	2300      	movs	r3, #0
 8003336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800333a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800333e:	460b      	mov	r3, r1
 8003340:	4313      	orrs	r3, r2
 8003342:	d041      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800334a:	2b05      	cmp	r3, #5
 800334c:	d824      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	080033a1 	.word	0x080033a1
 8003358:	0800336d 	.word	0x0800336d
 800335c:	08003383 	.word	0x08003383
 8003360:	080033a1 	.word	0x080033a1
 8003364:	080033a1 	.word	0x080033a1
 8003368:	080033a1 	.word	0x080033a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003370:	3308      	adds	r3, #8
 8003372:	2101      	movs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fcb3 	bl	8003ce0 <RCCEx_PLL2_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003380:	e00f      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003386:	3328      	adds	r3, #40	; 0x28
 8003388:	2101      	movs	r1, #1
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fd5a 	bl	8003e44 <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003396:	e004      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80033a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033aa:	4b96      	ldr	r3, [pc, #600]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f023 0107 	bic.w	r1, r3, #7
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b8:	4a92      	ldr	r2, [pc, #584]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033ba:	430b      	orrs	r3, r1
 80033bc:	6553      	str	r3, [r2, #84]	; 0x54
 80033be:	e003      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f002 0304 	and.w	r3, r2, #4
 80033d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	d044      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d825      	bhi.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80033f4:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	08003449 	.word	0x08003449
 8003400:	08003415 	.word	0x08003415
 8003404:	0800342b 	.word	0x0800342b
 8003408:	08003449 	.word	0x08003449
 800340c:	08003449 	.word	0x08003449
 8003410:	08003449 	.word	0x08003449
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003418:	3308      	adds	r3, #8
 800341a:	2101      	movs	r1, #1
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fc5f 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003428:	e00f      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342e:	3328      	adds	r3, #40	; 0x28
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fd06 	bl	8003e44 <RCCEx_PLL3_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800343e:	e004      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800344a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003452:	4b6c      	ldr	r3, [pc, #432]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	f023 0107 	bic.w	r1, r3, #7
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800345e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003462:	4a68      	ldr	r2, [pc, #416]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003464:	430b      	orrs	r3, r1
 8003466:	6593      	str	r3, [r2, #88]	; 0x58
 8003468:	e003      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800346e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f002 0320 	and.w	r3, r2, #32
 800347e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800348c:	460b      	mov	r3, r1
 800348e:	4313      	orrs	r3, r2
 8003490:	d055      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800349e:	d033      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80034a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a4:	d82c      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d02f      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d826      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034b6:	d02b      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80034b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034bc:	d820      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c2:	d012      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80034c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c8:	d81a      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d022      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80034ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034d2:	d115      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d8:	3308      	adds	r3, #8
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fbff 	bl	8003ce0 <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034e8:	e015      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ee:	3328      	adds	r3, #40	; 0x28
 80034f0:	2102      	movs	r1, #2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fca6 	bl	8003e44 <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034fe:	e00a      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003506:	e006      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003508:	bf00      	nop
 800350a:	e004      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800350c:	bf00      	nop
 800350e:	e002      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800351e:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	4a35      	ldr	r2, [pc, #212]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003530:	430b      	orrs	r3, r1
 8003532:	6553      	str	r3, [r2, #84]	; 0x54
 8003534:	e003      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800353a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800354a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800354e:	2300      	movs	r3, #0
 8003550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003554:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003558:	460b      	mov	r3, r1
 800355a:	4313      	orrs	r3, r2
 800355c:	d058      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003566:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800356a:	d033      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800356c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003570:	d82c      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003576:	d02f      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357c:	d826      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800357e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003582:	d02b      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003588:	d820      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800358a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358e:	d012      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003594:	d81a      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d022      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d115      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a4:	3308      	adds	r3, #8
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fb99 	bl	8003ce0 <RCCEx_PLL2_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035b4:	e015      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ba:	3328      	adds	r3, #40	; 0x28
 80035bc:	2102      	movs	r1, #2
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fc40 	bl	8003e44 <RCCEx_PLL3_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035ca:	e00a      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035d2:	e006      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035d4:	bf00      	nop
 80035d6:	e004      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035d8:	bf00      	nop
 80035da:	e002      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035dc:	bf00      	nop
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10e      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035fa:	4a02      	ldr	r2, [pc, #8]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003600:	e006      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003602:	bf00      	nop
 8003604:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800360c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800361c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003626:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800362a:	460b      	mov	r3, r1
 800362c:	4313      	orrs	r3, r2
 800362e:	d055      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003634:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003638:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800363c:	d033      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800363e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003642:	d82c      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003648:	d02f      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800364a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800364e:	d826      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003650:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003654:	d02b      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003656:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800365a:	d820      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800365c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003660:	d012      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003666:	d81a      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d022      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800366c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003670:	d115      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003676:	3308      	adds	r3, #8
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fb30 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003686:	e015      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368c:	3328      	adds	r3, #40	; 0x28
 800368e:	2102      	movs	r1, #2
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fbd7 	bl	8003e44 <RCCEx_PLL3_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800369c:	e00a      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036a4:	e006      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80036a6:	bf00      	nop
 80036a8:	e004      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80036aa:	bf00      	nop
 80036ac:	e002      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80036b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80036bc:	4ba1      	ldr	r3, [pc, #644]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036cc:	4a9d      	ldr	r2, [pc, #628]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ce:	430b      	orrs	r3, r1
 80036d0:	6593      	str	r3, [r2, #88]	; 0x58
 80036d2:	e003      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f002 0308 	and.w	r3, r2, #8
 80036e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80036f6:	460b      	mov	r3, r1
 80036f8:	4313      	orrs	r3, r2
 80036fa:	d01e      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003708:	d10c      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370e:	3328      	adds	r3, #40	; 0x28
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fb96 	bl	8003e44 <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003724:	4b87      	ldr	r3, [pc, #540]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003734:	4a83      	ldr	r2, [pc, #524]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003736:	430b      	orrs	r3, r1
 8003738:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f002 0310 	and.w	r3, r2, #16
 8003746:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800374a:	2300      	movs	r3, #0
 800374c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003750:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003754:	460b      	mov	r3, r1
 8003756:	4313      	orrs	r3, r2
 8003758:	d01e      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003766:	d10c      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376c:	3328      	adds	r3, #40	; 0x28
 800376e:	2102      	movs	r1, #2
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fb67 	bl	8003e44 <RCCEx_PLL3_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003782:	4b70      	ldr	r3, [pc, #448]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003792:	4a6c      	ldr	r2, [pc, #432]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003794:	430b      	orrs	r3, r1
 8003796:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80037a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80037b2:	460b      	mov	r3, r1
 80037b4:	4313      	orrs	r3, r2
 80037b6:	d03e      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c4:	d022      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80037c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ca:	d81b      	bhi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d4:	d00b      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80037d6:	e015      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037dc:	3308      	adds	r3, #8
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fa7d 	bl	8003ce0 <RCCEx_PLL2_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037ec:	e00f      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f2:	3328      	adds	r3, #40	; 0x28
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fb24 	bl	8003e44 <RCCEx_PLL3_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003802:	e004      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800380c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10b      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003816:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003826:	4a47      	ldr	r2, [pc, #284]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6593      	str	r3, [r2, #88]	; 0x58
 800382c:	e003      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003842:	67bb      	str	r3, [r7, #120]	; 0x78
 8003844:	2300      	movs	r3, #0
 8003846:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003848:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800384c:	460b      	mov	r3, r1
 800384e:	4313      	orrs	r3, r2
 8003850:	d03b      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800385e:	d01f      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003860:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003864:	d818      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386a:	d003      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800386c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003870:	d007      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003872:	e011      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003874:	4b33      	ldr	r3, [pc, #204]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4a32      	ldr	r2, [pc, #200]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800387a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003880:	e00f      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003886:	3328      	adds	r3, #40	; 0x28
 8003888:	2101      	movs	r1, #1
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fada 	bl	8003e44 <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003896:	e004      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80038a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038aa:	4b26      	ldr	r3, [pc, #152]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	4a22      	ldr	r2, [pc, #136]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	6553      	str	r3, [r2, #84]	; 0x54
 80038c0:	e003      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80038d6:	673b      	str	r3, [r7, #112]	; 0x70
 80038d8:	2300      	movs	r3, #0
 80038da:	677b      	str	r3, [r7, #116]	; 0x74
 80038dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80038e0:	460b      	mov	r3, r1
 80038e2:	4313      	orrs	r3, r2
 80038e4:	d034      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80038e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d007      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80038f6:	e011      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a11      	ldr	r2, [pc, #68]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003904:	e00e      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390a:	3308      	adds	r3, #8
 800390c:	2102      	movs	r1, #2
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f9e6 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800391a:	e003      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10d      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393a:	4a02      	ldr	r2, [pc, #8]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800393c:	430b      	orrs	r3, r1
 800393e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003942:	bf00      	nop
 8003944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800394c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800395c:	66bb      	str	r3, [r7, #104]	; 0x68
 800395e:	2300      	movs	r3, #0
 8003960:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003962:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d00c      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003970:	3328      	adds	r3, #40	; 0x28
 8003972:	2102      	movs	r1, #2
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fa65 	bl	8003e44 <RCCEx_PLL3_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003992:	663b      	str	r3, [r7, #96]	; 0x60
 8003994:	2300      	movs	r3, #0
 8003996:	667b      	str	r3, [r7, #100]	; 0x64
 8003998:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800399c:	460b      	mov	r3, r1
 800399e:	4313      	orrs	r3, r2
 80039a0:	d038      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ae:	d018      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80039b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b4:	d811      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80039b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ba:	d014      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80039bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c0:	d80b      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d011      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ca:	d106      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039cc:	4bc3      	ldr	r3, [pc, #780]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	4ac2      	ldr	r2, [pc, #776]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80039d8:	e008      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039e0:	e004      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039e2:	bf00      	nop
 80039e4:	e002      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f4:	4bb9      	ldr	r3, [pc, #740]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a04:	4ab5      	ldr	r2, [pc, #724]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a06:	430b      	orrs	r3, r1
 8003a08:	6553      	str	r3, [r2, #84]	; 0x54
 8003a0a:	e003      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003a20:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a22:	2300      	movs	r3, #0
 8003a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a30:	4baa      	ldr	r3, [pc, #680]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3e:	4aa7      	ldr	r2, [pc, #668]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003a50:	653b      	str	r3, [r7, #80]	; 0x50
 8003a52:	2300      	movs	r3, #0
 8003a54:	657b      	str	r3, [r7, #84]	; 0x54
 8003a56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a60:	4b9e      	ldr	r3, [pc, #632]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a70:	4a9a      	ldr	r2, [pc, #616]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a72:	430b      	orrs	r3, r1
 8003a74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a84:	2300      	movs	r3, #0
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a92:	4b92      	ldr	r3, [pc, #584]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aa0:	4a8e      	ldr	r2, [pc, #568]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003abc:	460b      	mov	r3, r1
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ac2:	4b86      	ldr	r3, [pc, #536]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	4a85      	ldr	r2, [pc, #532]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ac8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003acc:	6113      	str	r3, [r2, #16]
 8003ace:	4b83      	ldr	r3, [pc, #524]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ad0:	6919      	ldr	r1, [r3, #16]
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ada:	4a80      	ldr	r2, [pc, #512]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003aec:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aee:	2300      	movs	r3, #0
 8003af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003af6:	460b      	mov	r3, r1
 8003af8:	4313      	orrs	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003afc:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b00:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	4a74      	ldr	r2, [pc, #464]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b1e:	2300      	movs	r3, #0
 8003b20:	637b      	str	r3, [r7, #52]	; 0x34
 8003b22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003b26:	460b      	mov	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b2c:	4b6b      	ldr	r3, [pc, #428]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b3c:	4a67      	ldr	r2, [pc, #412]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	d011      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b62:	3308      	adds	r3, #8
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f8ba 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	6239      	str	r1, [r7, #32]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	d011      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f89a 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	61b9      	str	r1, [r7, #24]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	d011      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be2:	3308      	adds	r3, #8
 8003be4:	2102      	movs	r1, #2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f87a 	bl	8003ce0 <RCCEx_PLL2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	6139      	str	r1, [r7, #16]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	d011      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c22:	3328      	adds	r3, #40	; 0x28
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f90c 	bl	8003e44 <RCCEx_PLL3_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	d011      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c62:	3328      	adds	r3, #40	; 0x28
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f8ec 	bl	8003e44 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	6039      	str	r1, [r7, #0]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	607b      	str	r3, [r7, #4]
 8003c94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d011      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca2:	3328      	adds	r3, #40	; 0x28
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f8cc 	bl	8003e44 <RCCEx_PLL3_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003cc2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cdc:	58024400 	.word	0x58024400

08003ce0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cee:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d101      	bne.n	8003cfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e099      	b.n	8003e32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cfe:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a4e      	ldr	r2, [pc, #312]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0a:	f7fd fb15 	bl	8001338 <HAL_GetTick>
 8003d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d10:	e008      	b.n	8003d24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d12:	f7fd fb11 	bl	8001338 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e086      	b.n	8003e32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d24:	4b45      	ldr	r3, [pc, #276]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d30:	4b42      	ldr	r3, [pc, #264]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	031b      	lsls	r3, r3, #12
 8003d3e:	493f      	ldr	r1, [pc, #252]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	628b      	str	r3, [r1, #40]	; 0x28
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	025b      	lsls	r3, r3, #9
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	061b      	lsls	r3, r3, #24
 8003d70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d74:	4931      	ldr	r1, [pc, #196]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d7a:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	492d      	ldr	r1, [pc, #180]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f023 0220 	bic.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4928      	ldr	r1, [pc, #160]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003da4:	f023 0310 	bic.w	r3, r3, #16
 8003da8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003daa:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <RCCEx_PLL2_Config+0x160>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	69d2      	ldr	r2, [r2, #28]
 8003db6:	00d2      	lsls	r2, r2, #3
 8003db8:	4920      	ldr	r1, [pc, #128]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dc4:	f043 0310 	orr.w	r3, r3, #16
 8003dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ddc:	e00f      	b.n	8003dfe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d106      	bne.n	8003df2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003de4:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003df0:	e005      	b.n	8003dfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	4a11      	ldr	r2, [pc, #68]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003e04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0a:	f7fd fa95 	bl	8001338 <HAL_GetTick>
 8003e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e10:	e008      	b.n	8003e24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e12:	f7fd fa91 	bl	8001338 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e006      	b.n	8003e32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <RCCEx_PLL2_Config+0x15c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	58024400 	.word	0x58024400
 8003e40:	ffff0007 	.word	0xffff0007

08003e44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e52:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d101      	bne.n	8003e62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e099      	b.n	8003f96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e62:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a4e      	ldr	r2, [pc, #312]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6e:	f7fd fa63 	bl	8001338 <HAL_GetTick>
 8003e72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e74:	e008      	b.n	8003e88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e76:	f7fd fa5f 	bl	8001338 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e086      	b.n	8003f96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e88:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e94:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	051b      	lsls	r3, r3, #20
 8003ea2:	493f      	ldr	r1, [pc, #252]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	025b      	lsls	r3, r3, #9
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	061b      	lsls	r3, r3, #24
 8003ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ed8:	4931      	ldr	r1, [pc, #196]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ede:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	492d      	ldr	r1, [pc, #180]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	4928      	ldr	r1, [pc, #160]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f02:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <RCCEx_PLL3_Config+0x160>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	69d2      	ldr	r2, [r2, #28]
 8003f1a:	00d2      	lsls	r2, r2, #3
 8003f1c:	4920      	ldr	r1, [pc, #128]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f22:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f40:	e00f      	b.n	8003f62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d106      	bne.n	8003f56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f54:	e005      	b.n	8003f62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6e:	f7fd f9e3 	bl	8001338 <HAL_GetTick>
 8003f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f74:	e008      	b.n	8003f88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f76:	f7fd f9df 	bl	8001338 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e006      	b.n	8003f96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <RCCEx_PLL3_Config+0x15c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	ffff0007 	.word	0xffff0007

08003fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e049      	b.n	800404e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f841 	bl	8004056 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f000 f9e8 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d001      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e054      	b.n	800412e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a26      	ldr	r2, [pc, #152]	; (800413c <HAL_TIM_Base_Start_IT+0xd0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d022      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ae:	d01d      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a22      	ldr	r2, [pc, #136]	; (8004140 <HAL_TIM_Base_Start_IT+0xd4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d018      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a21      	ldr	r2, [pc, #132]	; (8004144 <HAL_TIM_Base_Start_IT+0xd8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <HAL_TIM_Base_Start_IT+0xdc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00e      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <HAL_TIM_Base_Start_IT+0xe0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d009      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <HAL_TIM_Base_Start_IT+0xe4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d004      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x80>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <HAL_TIM_Base_Start_IT+0xe8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d115      	bne.n	8004118 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_TIM_Base_Start_IT+0xec>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d015      	beq.n	800412a <HAL_TIM_Base_Start_IT+0xbe>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d011      	beq.n	800412a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004116:	e008      	b.n	800412a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e000      	b.n	800412c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00
 800414c:	40010400 	.word	0x40010400
 8004150:	40001800 	.word	0x40001800
 8004154:	40014000 	.word	0x40014000
 8004158:	00010007 	.word	0x00010007

0800415c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d020      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01b      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0202 	mvn.w	r2, #2
 8004190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8e9 	bl	800437e <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f8db 	bl	800436a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8ec 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d020      	beq.n	800420c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01b      	beq.n	800420c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0204 	mvn.w	r2, #4
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f8c3 	bl	800437e <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8b5 	bl	800436a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f8c6 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d020      	beq.n	8004258 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0208 	mvn.w	r2, #8
 8004228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2204      	movs	r2, #4
 800422e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f89d 	bl	800437e <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f88f 	bl	800436a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f8a0 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	d020      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01b      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0210 	mvn.w	r2, #16
 8004274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2208      	movs	r2, #8
 800427a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f877 	bl	800437e <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f869 	bl	800436a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f87a 	bl	8004392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0201 	mvn.w	r2, #1
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fc fe1a 	bl	8000efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00c      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80042ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f913 	bl	800451c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00c      	beq.n	800431a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f90b 	bl	8004530 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f834 	bl	80043a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00c      	beq.n	8004362 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f06f 0220 	mvn.w	r2, #32
 800435a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8d3 	bl	8004508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a46      	ldr	r2, [pc, #280]	; (80044e8 <TIM_Base_SetConfig+0x12c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d013      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d00f      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a43      	ldr	r2, [pc, #268]	; (80044ec <TIM_Base_SetConfig+0x130>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00b      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a42      	ldr	r2, [pc, #264]	; (80044f0 <TIM_Base_SetConfig+0x134>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d007      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a41      	ldr	r2, [pc, #260]	; (80044f4 <TIM_Base_SetConfig+0x138>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a40      	ldr	r2, [pc, #256]	; (80044f8 <TIM_Base_SetConfig+0x13c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d108      	bne.n	800440e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a35      	ldr	r2, [pc, #212]	; (80044e8 <TIM_Base_SetConfig+0x12c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01f      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441c:	d01b      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a32      	ldr	r2, [pc, #200]	; (80044ec <TIM_Base_SetConfig+0x130>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d017      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a31      	ldr	r2, [pc, #196]	; (80044f0 <TIM_Base_SetConfig+0x134>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <TIM_Base_SetConfig+0x138>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00f      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <TIM_Base_SetConfig+0x13c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00b      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2e      	ldr	r2, [pc, #184]	; (80044fc <TIM_Base_SetConfig+0x140>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d007      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a2d      	ldr	r2, [pc, #180]	; (8004500 <TIM_Base_SetConfig+0x144>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_Base_SetConfig+0x9a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <TIM_Base_SetConfig+0x148>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <TIM_Base_SetConfig+0x12c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00f      	beq.n	80044b4 <TIM_Base_SetConfig+0xf8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <TIM_Base_SetConfig+0x13c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00b      	beq.n	80044b4 <TIM_Base_SetConfig+0xf8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a17      	ldr	r2, [pc, #92]	; (80044fc <TIM_Base_SetConfig+0x140>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <TIM_Base_SetConfig+0xf8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a16      	ldr	r2, [pc, #88]	; (8004500 <TIM_Base_SetConfig+0x144>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_Base_SetConfig+0xf8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a15      	ldr	r2, [pc, #84]	; (8004504 <TIM_Base_SetConfig+0x148>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d103      	bne.n	80044bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f023 0201 	bic.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]
  }
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40010000 	.word	0x40010000
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40000800 	.word	0x40000800
 80044f4:	40000c00 	.word	0x40000c00
 80044f8:	40010400 	.word	0x40010400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	fb03 f203 	mul.w	r2, r3, r3
 800455a:	4613      	mov	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4413      	add	r3, r2
 8004560:	43db      	mvns	r3, r3
 8004562:	ea01 0203 	and.w	r2, r1, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	fb03 f303 	mul.w	r3, r3, r3
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	431a      	orrs	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	601a      	str	r2, [r3, #0]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	43db      	mvns	r3, r3
 8004598:	401a      	ands	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	431a      	orrs	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	605a      	str	r2, [r3, #4]
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6899      	ldr	r1, [r3, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	fb03 f203 	mul.w	r2, r3, r3
 80045ca:	4613      	mov	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4413      	add	r3, r2
 80045d0:	43db      	mvns	r3, r3
 80045d2:	ea01 0203 	and.w	r2, r1, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	fb03 f303 	mul.w	r3, r3, r3
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68d9      	ldr	r1, [r3, #12]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	fb03 f203 	mul.w	r2, r3, r3
 800460a:	4613      	mov	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	4413      	add	r3, r2
 8004610:	43db      	mvns	r3, r3
 8004612:	ea01 0203 	and.w	r2, r1, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	fb03 f303 	mul.w	r3, r3, r3
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	431a      	orrs	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	60da      	str	r2, [r3, #12]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a19      	ldr	r1, [r3, #32]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	fb03 f303 	mul.w	r3, r3, r3
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	fb02 f303 	mul.w	r3, r2, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	fb03 f202 	mul.w	r2, r3, r2
 8004656:	4613      	mov	r3, r2
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	43db      	mvns	r3, r3
 800465e:	ea01 0203 	and.w	r2, r1, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	fb03 f303 	mul.w	r3, r3, r3
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	431a      	orrs	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	0a12      	lsrs	r2, r2, #8
 80046a4:	fb02 f303 	mul.w	r3, r2, r3
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	0a12      	lsrs	r2, r2, #8
 80046ac:	fb02 f303 	mul.w	r3, r2, r3
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	0a12      	lsrs	r2, r2, #8
 80046b4:	fb03 f202 	mul.w	r2, r3, r2
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	43db      	mvns	r3, r3
 80046c0:	ea01 0203 	and.w	r2, r1, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	0a09      	lsrs	r1, r1, #8
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	0a09      	lsrs	r1, r1, #8
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	0a09      	lsrs	r1, r1, #8
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	431a      	orrs	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	60fb      	str	r3, [r7, #12]
  return result;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <LL_GPIO_Init+0x26>
    return 32U;
 800471a:	2320      	movs	r3, #32
 800471c:	e003      	b.n	8004726 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	fab3 f383 	clz	r3, r3
 8004724:	b2db      	uxtb	r3, r3
 8004726:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004728:	e048      	b.n	80047bc <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	2101      	movs	r1, #1
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d03a      	beq.n	80047b6 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d003      	beq.n	8004750 <LL_GPIO_Init+0x58>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d10e      	bne.n	800476e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	461a      	mov	r2, r3
 8004756:	69b9      	ldr	r1, [r7, #24]
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ff2b 	bl	80045b4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6819      	ldr	r1, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff0b 	bl	8004584 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	461a      	mov	r2, r3
 8004774:	69b9      	ldr	r1, [r7, #24]
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff ff3c 	bl	80045f4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d111      	bne.n	80047a8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2bff      	cmp	r3, #255	; 0xff
 8004788:	d807      	bhi.n	800479a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	461a      	mov	r2, r3
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff ff4e 	bl	8004634 <LL_GPIO_SetAFPin_0_7>
 8004798:	e006      	b.n	80047a8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	461a      	mov	r2, r3
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff ff72 	bl	800468c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	461a      	mov	r2, r3
 80047ae:	69b9      	ldr	r1, [r7, #24]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fec7 	bl	8004544 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3301      	adds	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	fa22 f303 	lsr.w	r3, r2, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1af      	bne.n	800472a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <LL_RCC_HSE_IsReady+0x24>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047e4:	d101      	bne.n	80047ea <LL_RCC_HSE_IsReady+0x16>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <LL_RCC_HSE_IsReady+0x18>
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	58024400 	.word	0x58024400

080047fc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <LL_RCC_HSI_IsReady+0x20>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b04      	cmp	r3, #4
 800480a:	d101      	bne.n	8004810 <LL_RCC_HSI_IsReady+0x14>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <LL_RCC_HSI_IsReady+0x16>
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	58024400 	.word	0x58024400

08004820 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <LL_RCC_HSI_GetDivider+0x18>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0318 	and.w	r3, r3, #24
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	58024400 	.word	0x58024400

0800483c <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <LL_RCC_CSI_IsReady+0x24>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484c:	d101      	bne.n	8004852 <LL_RCC_CSI_IsReady+0x16>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <LL_RCC_CSI_IsReady+0x18>
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	58024400 	.word	0x58024400

08004864 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <LL_RCC_LSE_IsReady+0x20>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b02      	cmp	r3, #2
 8004872:	d101      	bne.n	8004878 <LL_RCC_LSE_IsReady+0x14>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <LL_RCC_LSE_IsReady+0x16>
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	58024400 	.word	0x58024400

08004888 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <LL_RCC_GetSysClkSource+0x18>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0338 	and.w	r3, r3, #56	; 0x38
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	58024400 	.word	0x58024400

080048a4 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 80048a8:	4b04      	ldr	r3, [pc, #16]	; (80048bc <LL_RCC_GetSysPrescaler+0x18>)
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	58024400 	.word	0x58024400

080048c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <LL_RCC_GetAHBPrescaler+0x18>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	58024400 	.word	0x58024400

080048dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 80048e0:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	58024400 	.word	0x58024400

080048f8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <LL_RCC_GetAPB2Prescaler+0x18>)
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	58024400 	.word	0x58024400

08004914 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	b2da      	uxtb	r2, r3
 8004920:	4b0e      	ldr	r3, [pc, #56]	; (800495c <LL_RCC_GetClockSource+0x48>)
 8004922:	4413      	add	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0e19      	lsrs	r1, r3, #24
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	401a      	ands	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	fa22 f303 	lsr.w	r3, r2, r3
 8004948:	041a      	lsls	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4313      	orrs	r3, r2
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	5802444c 	.word	0x5802444c

08004960 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ffd3 	bl	8004914 <LL_RCC_GetClockSource>
 800496e:	4603      	mov	r3, r0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <LL_RCC_PLL_GetSource+0x18>)
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	f003 0303 	and.w	r3, r3, #3
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	58024400 	.word	0x58024400

08004994 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <LL_RCC_PLL1P_IsEnabled+0x24>)
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d101      	bne.n	80049aa <LL_RCC_PLL1P_IsEnabled+0x16>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <LL_RCC_PLL1P_IsEnabled+0x18>
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	58024400 	.word	0x58024400

080049bc <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049cc:	d101      	bne.n	80049d2 <LL_RCC_PLL1Q_IsEnabled+0x16>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <LL_RCC_PLL1Q_IsEnabled+0x18>
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	58024400 	.word	0x58024400

080049e4 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <LL_RCC_PLL1R_IsEnabled+0x24>)
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049f4:	d101      	bne.n	80049fa <LL_RCC_PLL1R_IsEnabled+0x16>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <LL_RCC_PLL1R_IsEnabled+0x18>
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	58024400 	.word	0x58024400

08004a0c <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	58024400 	.word	0x58024400

08004a30 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <LL_RCC_PLL1_GetN+0x18>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3c:	3301      	adds	r3, #1
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	58024400 	.word	0x58024400

08004a4c <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <LL_RCC_PLL1_GetM+0x18>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	58024400 	.word	0x58024400

08004a68 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <LL_RCC_PLL1_GetP+0x1c>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	0a5b      	lsrs	r3, r3, #9
 8004a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a76:	3301      	adds	r3, #1
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	58024400 	.word	0x58024400

08004a88 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <LL_RCC_PLL1_GetQ+0x1c>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a96:	3301      	adds	r3, #1
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	58024400 	.word	0x58024400

08004aa8 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <LL_RCC_PLL1_GetR+0x1c>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	0e1b      	lsrs	r3, r3, #24
 8004ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab6:	3301      	adds	r3, #1
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	58024400 	.word	0x58024400

08004ac8 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8004acc:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <LL_RCC_PLL1_GetFRACN+0x18>)
 8004ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad0:	08db      	lsrs	r3, r3, #3
 8004ad2:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	58024400 	.word	0x58024400

08004ae4 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <LL_RCC_PLL2_IsReady+0x24>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af4:	d101      	bne.n	8004afa <LL_RCC_PLL2_IsReady+0x16>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <LL_RCC_PLL2_IsReady+0x18>
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	58024400 	.word	0x58024400

08004b0c <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b1c:	d101      	bne.n	8004b22 <LL_RCC_PLL2P_IsEnabled+0x16>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <LL_RCC_PLL2P_IsEnabled+0x18>
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	58024400 	.word	0x58024400

08004b34 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8004b38:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b44:	d101      	bne.n	8004b4a <LL_RCC_PLL2Q_IsEnabled+0x16>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <LL_RCC_PLL2Q_IsEnabled+0x18>
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	58024400 	.word	0x58024400

08004b5c <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <LL_RCC_PLL2R_IsEnabled+0x24>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b6c:	d101      	bne.n	8004b72 <LL_RCC_PLL2R_IsEnabled+0x16>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <LL_RCC_PLL2R_IsEnabled+0x18>
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	58024400 	.word	0x58024400

08004b84 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d101      	bne.n	8004b98 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	58024400 	.word	0x58024400

08004ba8 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <LL_RCC_PLL2_GetN+0x18>)
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb4:	3301      	adds	r3, #1
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	58024400 	.word	0x58024400

08004bc4 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <LL_RCC_PLL2_GetM+0x18>)
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	0b1b      	lsrs	r3, r3, #12
 8004bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	58024400 	.word	0x58024400

08004be0 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <LL_RCC_PLL2_GetP+0x1c>)
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	0a5b      	lsrs	r3, r3, #9
 8004bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bee:	3301      	adds	r3, #1
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	58024400 	.word	0x58024400

08004c00 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <LL_RCC_PLL2_GetQ+0x1c>)
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0e:	3301      	adds	r3, #1
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	58024400 	.word	0x58024400

08004c20 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <LL_RCC_PLL2_GetR+0x1c>)
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	0e1b      	lsrs	r3, r3, #24
 8004c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2e:	3301      	adds	r3, #1
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	58024400 	.word	0x58024400

08004c40 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <LL_RCC_PLL2_GetFRACN+0x18>)
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	08db      	lsrs	r3, r3, #3
 8004c4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	58024400 	.word	0x58024400

08004c5c <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <LL_RCC_PLL3_IsReady+0x24>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6c:	d101      	bne.n	8004c72 <LL_RCC_PLL3_IsReady+0x16>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <LL_RCC_PLL3_IsReady+0x18>
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	58024400 	.word	0x58024400

08004c84 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <LL_RCC_PLL3P_IsEnabled+0x24>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c94:	d101      	bne.n	8004c9a <LL_RCC_PLL3P_IsEnabled+0x16>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <LL_RCC_PLL3P_IsEnabled+0x18>
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	58024400 	.word	0x58024400

08004cac <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cbc:	d101      	bne.n	8004cc2 <LL_RCC_PLL3Q_IsEnabled+0x16>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	58024400 	.word	0x58024400

08004cd4 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8004cd8:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <LL_RCC_PLL3R_IsEnabled+0x24>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce4:	d101      	bne.n	8004cea <LL_RCC_PLL3R_IsEnabled+0x16>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <LL_RCC_PLL3R_IsEnabled+0x18>
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	58024400 	.word	0x58024400

08004cfc <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0c:	d101      	bne.n	8004d12 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	58024400 	.word	0x58024400

08004d24 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <LL_RCC_PLL3_GetN+0x18>)
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d30:	3301      	adds	r3, #1
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	58024400 	.word	0x58024400

08004d40 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <LL_RCC_PLL3_GetM+0x18>)
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	0d1b      	lsrs	r3, r3, #20
 8004d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	58024400 	.word	0x58024400

08004d5c <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <LL_RCC_PLL3_GetP+0x1c>)
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	0a5b      	lsrs	r3, r3, #9
 8004d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6a:	3301      	adds	r3, #1
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400

08004d7c <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <LL_RCC_PLL3_GetQ+0x1c>)
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	0c1b      	lsrs	r3, r3, #16
 8004d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d8a:	3301      	adds	r3, #1
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	58024400 	.word	0x58024400

08004d9c <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <LL_RCC_PLL3_GetR+0x1c>)
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	0e1b      	lsrs	r3, r3, #24
 8004da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004daa:	3301      	adds	r3, #1
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	58024400 	.word	0x58024400

08004dbc <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8004dc0:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <LL_RCC_PLL3_GetFRACN+0x18>)
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc4:	08db      	lsrs	r3, r3, #3
 8004dc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	58024400 	.word	0x58024400

08004dd8 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8004de8:	f7ff fdc6 	bl	8004978 <LL_RCC_PLL_GetSource>
 8004dec:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d01f      	beq.n	8004e34 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d824      	bhi.n	8004e44 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <LL_RCC_GetPLL1ClockFreq+0x30>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d00e      	beq.n	8004e24 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8004e06:	e01d      	b.n	8004e44 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8004e08:	f7ff fcf8 	bl	80047fc <LL_RCC_HSI_IsReady>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01a      	beq.n	8004e48 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8004e12:	f7ff fd05 	bl	8004820 <LL_RCC_HSI_GetDivider>
 8004e16:	4603      	mov	r3, r0
 8004e18:	08db      	lsrs	r3, r3, #3
 8004e1a:	4a38      	ldr	r2, [pc, #224]	; (8004efc <LL_RCC_GetPLL1ClockFreq+0x124>)
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e20:	61fb      	str	r3, [r7, #28]
      break;
 8004e22:	e011      	b.n	8004e48 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8004e24:	f7ff fd0a 	bl	800483c <LL_RCC_CSI_IsReady>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00e      	beq.n	8004e4c <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8004e2e:	4b34      	ldr	r3, [pc, #208]	; (8004f00 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8004e30:	61fb      	str	r3, [r7, #28]
      break;
 8004e32:	e00b      	b.n	8004e4c <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8004e34:	f7ff fcce 	bl	80047d4 <LL_RCC_HSE_IsReady>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8004e3e:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8004e40:	61fb      	str	r3, [r7, #28]
      break;
 8004e42:	e005      	b.n	8004e50 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8004e44:	bf00      	nop
 8004e46:	e004      	b.n	8004e52 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004e48:	bf00      	nop
 8004e4a:	e002      	b.n	8004e52 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004e50:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8004e64:	f7ff fdf2 	bl	8004a4c <LL_RCC_PLL1_GetM>
 8004e68:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8004e6a:	f7ff fde1 	bl	8004a30 <LL_RCC_PLL1_GetN>
 8004e6e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 8004e70:	f7ff fdcc 	bl	8004a0c <LL_RCC_PLL1FRACN_IsEnabled>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8004e7a:	f7ff fe25 	bl	8004ac8 <LL_RCC_PLL1_GetFRACN>
 8004e7e:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d035      	beq.n	8004ef2 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 8004e86:	f7ff fd85 	bl	8004994 <LL_RCC_PLL1P_IsEnabled>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00c      	beq.n	8004eaa <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 8004e90:	f7ff fdea 	bl	8004a68 <LL_RCC_PLL1_GetP>
 8004e94:	4603      	mov	r3, r0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	6939      	ldr	r1, [r7, #16]
 8004e9e:	69f8      	ldr	r0, [r7, #28]
 8004ea0:	f000 f964 	bl	800516c <LL_RCC_CalcPLLClockFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8004eaa:	f7ff fd87 	bl	80049bc <LL_RCC_PLL1Q_IsEnabled>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8004eb4:	f7ff fde8 	bl	8004a88 <LL_RCC_PLL1_GetQ>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	6939      	ldr	r1, [r7, #16]
 8004ec2:	69f8      	ldr	r0, [r7, #28]
 8004ec4:	f000 f952 	bl	800516c <LL_RCC_CalcPLLClockFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 8004ece:	f7ff fd89 	bl	80049e4 <LL_RCC_PLL1R_IsEnabled>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00c      	beq.n	8004ef2 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8004ed8:	f7ff fde6 	bl	8004aa8 <LL_RCC_PLL1_GetR>
 8004edc:	4603      	mov	r3, r0
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	6939      	ldr	r1, [r7, #16]
 8004ee6:	69f8      	ldr	r0, [r7, #28]
 8004ee8:	f000 f940 	bl	800516c <LL_RCC_CalcPLLClockFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	609a      	str	r2, [r3, #8]
    }
  }
}
 8004ef2:	bf00      	nop
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	03d09000 	.word	0x03d09000
 8004f00:	003d0900 	.word	0x003d0900
 8004f04:	017d7840 	.word	0x017d7840

08004f08 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8004f18:	f7ff fd2e 	bl	8004978 <LL_RCC_PLL_GetSource>
 8004f1c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d01f      	beq.n	8004f64 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d824      	bhi.n	8004f74 <LL_RCC_GetPLL2ClockFreq+0x6c>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <LL_RCC_GetPLL2ClockFreq+0x30>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d00e      	beq.n	8004f54 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8004f36:	e01d      	b.n	8004f74 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8004f38:	f7ff fc60 	bl	80047fc <LL_RCC_HSI_IsReady>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01a      	beq.n	8004f78 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8004f42:	f7ff fc6d 	bl	8004820 <LL_RCC_HSI_GetDivider>
 8004f46:	4603      	mov	r3, r0
 8004f48:	08db      	lsrs	r3, r3, #3
 8004f4a:	4a38      	ldr	r2, [pc, #224]	; (800502c <LL_RCC_GetPLL2ClockFreq+0x124>)
 8004f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f50:	61fb      	str	r3, [r7, #28]
      break;
 8004f52:	e011      	b.n	8004f78 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8004f54:	f7ff fc72 	bl	800483c <LL_RCC_CSI_IsReady>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00e      	beq.n	8004f7c <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8004f5e:	4b34      	ldr	r3, [pc, #208]	; (8005030 <LL_RCC_GetPLL2ClockFreq+0x128>)
 8004f60:	61fb      	str	r3, [r7, #28]
      break;
 8004f62:	e00b      	b.n	8004f7c <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8004f64:	f7ff fc36 	bl	80047d4 <LL_RCC_HSE_IsReady>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8004f6e:	4b31      	ldr	r3, [pc, #196]	; (8005034 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 8004f70:	61fb      	str	r3, [r7, #28]
      break;
 8004f72:	e005      	b.n	8004f80 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8004f74:	bf00      	nop
 8004f76:	e004      	b.n	8004f82 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8004f78:	bf00      	nop
 8004f7a:	e002      	b.n	8004f82 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8004f7c:	bf00      	nop
 8004f7e:	e000      	b.n	8004f82 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8004f80:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8004f94:	f7ff fe16 	bl	8004bc4 <LL_RCC_PLL2_GetM>
 8004f98:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8004f9a:	f7ff fe05 	bl	8004ba8 <LL_RCC_PLL2_GetN>
 8004f9e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 8004fa0:	f7ff fdf0 	bl	8004b84 <LL_RCC_PLL2FRACN_IsEnabled>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8004faa:	f7ff fe49 	bl	8004c40 <LL_RCC_PLL2_GetFRACN>
 8004fae:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d035      	beq.n	8005022 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8004fb6:	f7ff fda9 	bl	8004b0c <LL_RCC_PLL2P_IsEnabled>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00c      	beq.n	8004fda <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8004fc0:	f7ff fe0e 	bl	8004be0 <LL_RCC_PLL2_GetP>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	6939      	ldr	r1, [r7, #16]
 8004fce:	69f8      	ldr	r0, [r7, #28]
 8004fd0:	f000 f8cc 	bl	800516c <LL_RCC_CalcPLLClockFreq>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8004fda:	f7ff fdab 	bl	8004b34 <LL_RCC_PLL2Q_IsEnabled>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00c      	beq.n	8004ffe <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8004fe4:	f7ff fe0c 	bl	8004c00 <LL_RCC_PLL2_GetQ>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	6939      	ldr	r1, [r7, #16]
 8004ff2:	69f8      	ldr	r0, [r7, #28]
 8004ff4:	f000 f8ba 	bl	800516c <LL_RCC_CalcPLLClockFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8004ffe:	f7ff fdad 	bl	8004b5c <LL_RCC_PLL2R_IsEnabled>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00c      	beq.n	8005022 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8005008:	f7ff fe0a 	bl	8004c20 <LL_RCC_PLL2_GetR>
 800500c:	4603      	mov	r3, r0
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	6939      	ldr	r1, [r7, #16]
 8005016:	69f8      	ldr	r0, [r7, #28]
 8005018:	f000 f8a8 	bl	800516c <LL_RCC_CalcPLLClockFreq>
 800501c:	4602      	mov	r2, r0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	609a      	str	r2, [r3, #8]
    }
  }
}
 8005022:	bf00      	nop
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	03d09000 	.word	0x03d09000
 8005030:	003d0900 	.word	0x003d0900
 8005034:	017d7840 	.word	0x017d7840

08005038 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af02      	add	r7, sp, #8
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8005040:	2300      	movs	r3, #0
 8005042:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8005048:	f7ff fc96 	bl	8004978 <LL_RCC_PLL_GetSource>
 800504c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d01f      	beq.n	8005094 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d824      	bhi.n	80050a4 <LL_RCC_GetPLL3ClockFreq+0x6c>
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <LL_RCC_GetPLL3ClockFreq+0x30>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d00e      	beq.n	8005084 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8005066:	e01d      	b.n	80050a4 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8005068:	f7ff fbc8 	bl	80047fc <LL_RCC_HSI_IsReady>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01a      	beq.n	80050a8 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8005072:	f7ff fbd5 	bl	8004820 <LL_RCC_HSI_GetDivider>
 8005076:	4603      	mov	r3, r0
 8005078:	08db      	lsrs	r3, r3, #3
 800507a:	4a39      	ldr	r2, [pc, #228]	; (8005160 <LL_RCC_GetPLL3ClockFreq+0x128>)
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	61fb      	str	r3, [r7, #28]
      break;
 8005082:	e011      	b.n	80050a8 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8005084:	f7ff fbda 	bl	800483c <LL_RCC_CSI_IsReady>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00e      	beq.n	80050ac <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800508e:	4b35      	ldr	r3, [pc, #212]	; (8005164 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 8005090:	61fb      	str	r3, [r7, #28]
      break;
 8005092:	e00b      	b.n	80050ac <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8005094:	f7ff fb9e 	bl	80047d4 <LL_RCC_HSE_IsReady>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <LL_RCC_GetPLL3ClockFreq+0x130>)
 80050a0:	61fb      	str	r3, [r7, #28]
      break;
 80050a2:	e005      	b.n	80050b0 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 80050a4:	bf00      	nop
 80050a6:	e004      	b.n	80050b2 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80050a8:	bf00      	nop
 80050aa:	e002      	b.n	80050b2 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80050ac:	bf00      	nop
 80050ae:	e000      	b.n	80050b2 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80050b0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 80050c4:	f7ff fe3c 	bl	8004d40 <LL_RCC_PLL3_GetM>
 80050c8:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 80050ca:	f7ff fe2b 	bl	8004d24 <LL_RCC_PLL3_GetN>
 80050ce:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 80050d0:	f7ff fe14 	bl	8004cfc <LL_RCC_PLL3FRACN_IsEnabled>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 80050da:	f7ff fe6f 	bl	8004dbc <LL_RCC_PLL3_GetFRACN>
 80050de:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d038      	beq.n	8005158 <LL_RCC_GetPLL3ClockFreq+0x120>
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d035      	beq.n	8005158 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 80050ec:	f7ff fdca 	bl	8004c84 <LL_RCC_PLL3P_IsEnabled>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00c      	beq.n	8005110 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 80050f6:	f7ff fe31 	bl	8004d5c <LL_RCC_PLL3_GetP>
 80050fa:	4603      	mov	r3, r0
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	6939      	ldr	r1, [r7, #16]
 8005104:	69f8      	ldr	r0, [r7, #28]
 8005106:	f000 f831 	bl	800516c <LL_RCC_CalcPLLClockFreq>
 800510a:	4602      	mov	r2, r0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005110:	f7ff fdcc 	bl	8004cac <LL_RCC_PLL3Q_IsEnabled>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800511a:	f7ff fe2f 	bl	8004d7c <LL_RCC_PLL3_GetQ>
 800511e:	4603      	mov	r3, r0
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	6939      	ldr	r1, [r7, #16]
 8005128:	69f8      	ldr	r0, [r7, #28]
 800512a:	f000 f81f 	bl	800516c <LL_RCC_CalcPLLClockFreq>
 800512e:	4602      	mov	r2, r0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8005134:	f7ff fdce 	bl	8004cd4 <LL_RCC_PLL3R_IsEnabled>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 800513e:	f7ff fe2d 	bl	8004d9c <LL_RCC_PLL3_GetR>
 8005142:	4603      	mov	r3, r0
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	6939      	ldr	r1, [r7, #16]
 800514c:	69f8      	ldr	r0, [r7, #28]
 800514e:	f000 f80d 	bl	800516c <LL_RCC_CalcPLLClockFreq>
 8005152:	4602      	mov	r2, r0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	609a      	str	r2, [r3, #8]
    }
  }
}
 8005158:	bf00      	nop
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	03d09000 	.word	0x03d09000
 8005164:	003d0900 	.word	0x003d0900
 8005168:	017d7840 	.word	0x017d7840

0800516c <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	ee07 3a90 	vmov	s15, r3
 8005180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	ee07 3a90 	vmov	s15, r3
 8005198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80051a6:	eddf 5a10 	vldr	s11, [pc, #64]	; 80051e8 <LL_RCC_CalcPLLClockFreq+0x7c>
 80051aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b6:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	ee07 3a90 	vmov	s15, r3
 80051c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80051c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051cc:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 80051d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80051d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d8:	ee17 3a90 	vmov	r3, s15
}
 80051dc:	4618      	mov	r0, r3
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	46000000 	.word	0x46000000

080051ec <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff fbb1 	bl	8004960 <LL_RCC_GetUSARTClockSource>
 80051fe:	4603      	mov	r3, r0
 8005200:	4a62      	ldr	r2, [pc, #392]	; (800538c <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	f000 80a9 	beq.w	800535a <LL_RCC_GetUSARTClockFreq+0x16e>
 8005208:	4a60      	ldr	r2, [pc, #384]	; (800538c <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	f200 80ae 	bhi.w	800536c <LL_RCC_GetUSARTClockFreq+0x180>
 8005210:	4a5f      	ldr	r2, [pc, #380]	; (8005390 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	f000 80a1 	beq.w	800535a <LL_RCC_GetUSARTClockFreq+0x16e>
 8005218:	4a5d      	ldr	r2, [pc, #372]	; (8005390 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	f200 80a6 	bhi.w	800536c <LL_RCC_GetUSARTClockFreq+0x180>
 8005220:	4a5c      	ldr	r2, [pc, #368]	; (8005394 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	f000 8091 	beq.w	800534a <LL_RCC_GetUSARTClockFreq+0x15e>
 8005228:	4a5a      	ldr	r2, [pc, #360]	; (8005394 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	f200 809e 	bhi.w	800536c <LL_RCC_GetUSARTClockFreq+0x180>
 8005230:	4a59      	ldr	r2, [pc, #356]	; (8005398 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8005232:	4293      	cmp	r3, r2
 8005234:	f000 8089 	beq.w	800534a <LL_RCC_GetUSARTClockFreq+0x15e>
 8005238:	4a57      	ldr	r2, [pc, #348]	; (8005398 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800523a:	4293      	cmp	r3, r2
 800523c:	f200 8096 	bhi.w	800536c <LL_RCC_GetUSARTClockFreq+0x180>
 8005240:	4a56      	ldr	r2, [pc, #344]	; (800539c <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d073      	beq.n	800532e <LL_RCC_GetUSARTClockFreq+0x142>
 8005246:	4a55      	ldr	r2, [pc, #340]	; (800539c <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	f200 808f 	bhi.w	800536c <LL_RCC_GetUSARTClockFreq+0x180>
 800524e:	4a54      	ldr	r2, [pc, #336]	; (80053a0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d06c      	beq.n	800532e <LL_RCC_GetUSARTClockFreq+0x142>
 8005254:	4a52      	ldr	r2, [pc, #328]	; (80053a0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	f200 8088 	bhi.w	800536c <LL_RCC_GetUSARTClockFreq+0x180>
 800525c:	4a51      	ldr	r2, [pc, #324]	; (80053a4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d058      	beq.n	8005314 <LL_RCC_GetUSARTClockFreq+0x128>
 8005262:	4a50      	ldr	r2, [pc, #320]	; (80053a4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	f200 8081 	bhi.w	800536c <LL_RCC_GetUSARTClockFreq+0x180>
 800526a:	4a4f      	ldr	r2, [pc, #316]	; (80053a8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d051      	beq.n	8005314 <LL_RCC_GetUSARTClockFreq+0x128>
 8005270:	4a4d      	ldr	r2, [pc, #308]	; (80053a8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d87a      	bhi.n	800536c <LL_RCC_GetUSARTClockFreq+0x180>
 8005276:	4a4d      	ldr	r2, [pc, #308]	; (80053ac <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d03e      	beq.n	80052fa <LL_RCC_GetUSARTClockFreq+0x10e>
 800527c:	4a4b      	ldr	r2, [pc, #300]	; (80053ac <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d874      	bhi.n	800536c <LL_RCC_GetUSARTClockFreq+0x180>
 8005282:	4a4b      	ldr	r2, [pc, #300]	; (80053b0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d038      	beq.n	80052fa <LL_RCC_GetUSARTClockFreq+0x10e>
 8005288:	4a49      	ldr	r2, [pc, #292]	; (80053b0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d86e      	bhi.n	800536c <LL_RCC_GetUSARTClockFreq+0x180>
 800528e:	4a49      	ldr	r2, [pc, #292]	; (80053b4 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d01a      	beq.n	80052ca <LL_RCC_GetUSARTClockFreq+0xde>
 8005294:	4a48      	ldr	r2, [pc, #288]	; (80053b8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d168      	bne.n	800536c <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800529a:	f000 f895 	bl	80053c8 <RCC_GetSystemClockFreq>
 800529e:	4604      	mov	r4, r0
 80052a0:	f7ff fb00 	bl	80048a4 <LL_RCC_GetSysPrescaler>
 80052a4:	4603      	mov	r3, r0
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	4a43      	ldr	r2, [pc, #268]	; (80053bc <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80052ae:	5cd3      	ldrb	r3, [r2, r3]
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	fa24 f303 	lsr.w	r3, r4, r3
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 f8e7 	bl	800548c <RCC_GetHCLKClockFreq>
 80052be:	4603      	mov	r3, r0
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 f911 	bl	80054e8 <RCC_GetPCLK2ClockFreq>
 80052c6:	6178      	str	r0, [r7, #20]
      break;
 80052c8:	e05b      	b.n	8005382 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80052ca:	f000 f87d 	bl	80053c8 <RCC_GetSystemClockFreq>
 80052ce:	4604      	mov	r4, r0
 80052d0:	f7ff fae8 	bl	80048a4 <LL_RCC_GetSysPrescaler>
 80052d4:	4603      	mov	r3, r0
 80052d6:	0a1b      	lsrs	r3, r3, #8
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	4a37      	ldr	r2, [pc, #220]	; (80053bc <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80052de:	5cd3      	ldrb	r3, [r2, r3]
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	fa24 f303 	lsr.w	r3, r4, r3
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 f8cf 	bl	800548c <RCC_GetHCLKClockFreq>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f8e1 	bl	80054b8 <RCC_GetPCLK1ClockFreq>
 80052f6:	6178      	str	r0, [r7, #20]
      break;
 80052f8:	e043      	b.n	8005382 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 80052fa:	f7ff fbf3 	bl	8004ae4 <LL_RCC_PLL2_IsReady>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d035      	beq.n	8005370 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff fdfd 	bl	8004f08 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	617b      	str	r3, [r7, #20]
      }
      break;
 8005312:	e02d      	b.n	8005370 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8005314:	f7ff fca2 	bl	8004c5c <LL_RCC_PLL3_IsReady>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02a      	beq.n	8005374 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800531e:	f107 0308 	add.w	r3, r7, #8
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff fe88 	bl	8005038 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	617b      	str	r3, [r7, #20]
      }
      break;
 800532c:	e022      	b.n	8005374 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 800532e:	f7ff fa65 	bl	80047fc <LL_RCC_HSI_IsReady>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01f      	beq.n	8005378 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8005338:	f7ff fa72 	bl	8004820 <LL_RCC_HSI_GetDivider>
 800533c:	4603      	mov	r3, r0
 800533e:	08db      	lsrs	r3, r3, #3
 8005340:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8005342:	fa22 f303 	lsr.w	r3, r2, r3
 8005346:	617b      	str	r3, [r7, #20]
      }
      break;
 8005348:	e016      	b.n	8005378 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 800534a:	f7ff fa77 	bl	800483c <LL_RCC_CSI_IsReady>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d013      	beq.n	800537c <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8005354:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8005356:	617b      	str	r3, [r7, #20]
      }
      break;
 8005358:	e010      	b.n	800537c <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 800535a:	f7ff fa83 	bl	8004864 <LL_RCC_LSE_IsReady>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00d      	beq.n	8005380 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8005364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005368:	617b      	str	r3, [r7, #20]
      }
      break;
 800536a:	e009      	b.n	8005380 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 800536c:	bf00      	nop
 800536e:	e008      	b.n	8005382 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005370:	bf00      	nop
 8005372:	e006      	b.n	8005382 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005374:	bf00      	nop
 8005376:	e004      	b.n	8005382 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005378:	bf00      	nop
 800537a:	e002      	b.n	8005382 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800537c:	bf00      	nop
 800537e:	e000      	b.n	8005382 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005380:	bf00      	nop
  }

  return usart_frequency;
 8005382:	697b      	ldr	r3, [r7, #20]
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	bd90      	pop	{r4, r7, pc}
 800538c:	07050308 	.word	0x07050308
 8005390:	07050008 	.word	0x07050008
 8005394:	07040308 	.word	0x07040308
 8005398:	07040008 	.word	0x07040008
 800539c:	07030308 	.word	0x07030308
 80053a0:	07030008 	.word	0x07030008
 80053a4:	07020308 	.word	0x07020308
 80053a8:	07020008 	.word	0x07020008
 80053ac:	07010308 	.word	0x07010308
 80053b0:	07010008 	.word	0x07010008
 80053b4:	07000008 	.word	0x07000008
 80053b8:	07000308 	.word	0x07000308
 80053bc:	0800a270 	.word	0x0800a270
 80053c0:	03d09000 	.word	0x03d09000
 80053c4:	003d0900 	.word	0x003d0900

080053c8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80053d2:	f7ff fa59 	bl	8004888 <LL_RCC_GetSysClkSource>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b18      	cmp	r3, #24
 80053da:	d84b      	bhi.n	8005474 <RCC_GetSystemClockFreq+0xac>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <RCC_GetSystemClockFreq+0x1c>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	08005449 	.word	0x08005449
 80053e8:	08005475 	.word	0x08005475
 80053ec:	08005475 	.word	0x08005475
 80053f0:	08005475 	.word	0x08005475
 80053f4:	08005475 	.word	0x08005475
 80053f8:	08005475 	.word	0x08005475
 80053fc:	08005475 	.word	0x08005475
 8005400:	08005475 	.word	0x08005475
 8005404:	0800545b 	.word	0x0800545b
 8005408:	08005475 	.word	0x08005475
 800540c:	08005475 	.word	0x08005475
 8005410:	08005475 	.word	0x08005475
 8005414:	08005475 	.word	0x08005475
 8005418:	08005475 	.word	0x08005475
 800541c:	08005475 	.word	0x08005475
 8005420:	08005475 	.word	0x08005475
 8005424:	08005461 	.word	0x08005461
 8005428:	08005475 	.word	0x08005475
 800542c:	08005475 	.word	0x08005475
 8005430:	08005475 	.word	0x08005475
 8005434:	08005475 	.word	0x08005475
 8005438:	08005475 	.word	0x08005475
 800543c:	08005475 	.word	0x08005475
 8005440:	08005475 	.word	0x08005475
 8005444:	08005467 	.word	0x08005467
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8005448:	f7ff f9ea 	bl	8004820 <LL_RCC_HSI_GetDivider>
 800544c:	4603      	mov	r3, r0
 800544e:	08db      	lsrs	r3, r3, #3
 8005450:	4a0b      	ldr	r2, [pc, #44]	; (8005480 <RCC_GetSystemClockFreq+0xb8>)
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	60fb      	str	r3, [r7, #12]
      break;
 8005458:	e00d      	b.n	8005476 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 800545a:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <RCC_GetSystemClockFreq+0xbc>)
 800545c:	60fb      	str	r3, [r7, #12]
      break;
 800545e:	e00a      	b.n	8005476 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <RCC_GetSystemClockFreq+0xc0>)
 8005462:	60fb      	str	r3, [r7, #12]
      break;
 8005464:	e007      	b.n	8005476 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8005466:	463b      	mov	r3, r7
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fcb5 	bl	8004dd8 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	60fb      	str	r3, [r7, #12]
      break;
 8005472:	e000      	b.n	8005476 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8005474:	bf00      	nop
  }

  return frequency;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	03d09000 	.word	0x03d09000
 8005484:	003d0900 	.word	0x003d0900
 8005488:	017d7840 	.word	0x017d7840

0800548c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005494:	f7ff fa14 	bl	80048c0 <LL_RCC_GetAHBPrescaler>
 8005498:	4603      	mov	r3, r0
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <RCC_GetHCLKClockFreq+0x28>)
 80054a0:	5cd3      	ldrb	r3, [r2, r3]
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	0800a270 	.word	0x0800a270

080054b8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80054c0:	f7ff fa0c 	bl	80048dc <LL_RCC_GetAPB1Prescaler>
 80054c4:	4603      	mov	r3, r0
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	4a05      	ldr	r2, [pc, #20]	; (80054e4 <RCC_GetPCLK1ClockFreq+0x2c>)
 80054ce:	5cd3      	ldrb	r3, [r2, r3]
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	0800a270 	.word	0x0800a270

080054e8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80054f0:	f7ff fa02 	bl	80048f8 <LL_RCC_GetAPB2Prescaler>
 80054f4:	4603      	mov	r3, r0
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4a05      	ldr	r2, [pc, #20]	; (8005514 <RCC_GetPCLK2ClockFreq+0x2c>)
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	fa22 f303 	lsr.w	r3, r2, r3
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	0800a270 	.word	0x0800a270

08005518 <LL_USART_IsEnabled>:
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <LL_USART_IsEnabled+0x18>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <LL_USART_IsEnabled+0x1a>
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <LL_USART_SetPrescaler>:
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	f023 030f 	bic.w	r3, r3, #15
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	b292      	uxth	r2, r2
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <LL_USART_SetStopBitsLength>:
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	605a      	str	r2, [r3, #4]
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_USART_SetHWFlowCtrl>:
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	609a      	str	r2, [r3, #8]
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <LL_USART_SetBaudRate>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b0b      	cmp	r3, #11
 80055c6:	d83c      	bhi.n	8005642 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d039      	beq.n	8005642 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d4:	d122      	bne.n	800561c <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	4b1c      	ldr	r3, [pc, #112]	; (8005650 <LL_USART_SetBaudRate+0x9c>)
 80055de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e8:	005a      	lsls	r2, r3, #1
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	085b      	lsrs	r3, r3, #1
 80055ee:	441a      	add	r2, r3
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8005600:	4013      	ands	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	b29b      	uxth	r3, r3
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	60da      	str	r2, [r3, #12]
}
 800561a:	e012      	b.n	8005642 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <LL_USART_SetBaudRate+0x9c>)
 8005624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	fbb2 f2f3 	udiv	r2, r2, r3
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	441a      	add	r2, r3
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	60da      	str	r2, [r3, #12]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	0800a280 	.word	0x0800a280

08005654 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af02      	add	r7, sp, #8
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff ff56 	bl	8005518 <LL_USART_IsEnabled>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d17f      	bne.n	8005772 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b41      	ldr	r3, [pc, #260]	; (800577c <LL_USART_Init+0x128>)
 8005678:	4013      	ands	r3, r2
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	6891      	ldr	r1, [r2, #8]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	6912      	ldr	r2, [r2, #16]
 8005682:	4311      	orrs	r1, r2
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	6952      	ldr	r2, [r2, #20]
 8005688:	4311      	orrs	r1, r2
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	69d2      	ldr	r2, [r2, #28]
 800568e:	430a      	orrs	r2, r1
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff62 	bl	8005566 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff ff6f 	bl	800558c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a33      	ldr	r2, [pc, #204]	; (8005780 <LL_USART_Init+0x12c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d104      	bne.n	80056c0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 80056b6:	4833      	ldr	r0, [pc, #204]	; (8005784 <LL_USART_Init+0x130>)
 80056b8:	f7ff fd98 	bl	80051ec <LL_RCC_GetUSARTClockFreq>
 80056bc:	60b8      	str	r0, [r7, #8]
 80056be:	e03d      	b.n	800573c <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a31      	ldr	r2, [pc, #196]	; (8005788 <LL_USART_Init+0x134>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d104      	bne.n	80056d2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80056c8:	4830      	ldr	r0, [pc, #192]	; (800578c <LL_USART_Init+0x138>)
 80056ca:	f7ff fd8f 	bl	80051ec <LL_RCC_GetUSARTClockFreq>
 80056ce:	60b8      	str	r0, [r7, #8]
 80056d0:	e034      	b.n	800573c <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2e      	ldr	r2, [pc, #184]	; (8005790 <LL_USART_Init+0x13c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d104      	bne.n	80056e4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80056da:	482c      	ldr	r0, [pc, #176]	; (800578c <LL_USART_Init+0x138>)
 80056dc:	f7ff fd86 	bl	80051ec <LL_RCC_GetUSARTClockFreq>
 80056e0:	60b8      	str	r0, [r7, #8]
 80056e2:	e02b      	b.n	800573c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a2b      	ldr	r2, [pc, #172]	; (8005794 <LL_USART_Init+0x140>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d104      	bne.n	80056f6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80056ec:	4827      	ldr	r0, [pc, #156]	; (800578c <LL_USART_Init+0x138>)
 80056ee:	f7ff fd7d 	bl	80051ec <LL_RCC_GetUSARTClockFreq>
 80056f2:	60b8      	str	r0, [r7, #8]
 80056f4:	e022      	b.n	800573c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a27      	ldr	r2, [pc, #156]	; (8005798 <LL_USART_Init+0x144>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d104      	bne.n	8005708 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80056fe:	4823      	ldr	r0, [pc, #140]	; (800578c <LL_USART_Init+0x138>)
 8005700:	f7ff fd74 	bl	80051ec <LL_RCC_GetUSARTClockFreq>
 8005704:	60b8      	str	r0, [r7, #8]
 8005706:	e019      	b.n	800573c <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a24      	ldr	r2, [pc, #144]	; (800579c <LL_USART_Init+0x148>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d104      	bne.n	800571a <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8005710:	481c      	ldr	r0, [pc, #112]	; (8005784 <LL_USART_Init+0x130>)
 8005712:	f7ff fd6b 	bl	80051ec <LL_RCC_GetUSARTClockFreq>
 8005716:	60b8      	str	r0, [r7, #8]
 8005718:	e010      	b.n	800573c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a20      	ldr	r2, [pc, #128]	; (80057a0 <LL_USART_Init+0x14c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d104      	bne.n	800572c <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005722:	481a      	ldr	r0, [pc, #104]	; (800578c <LL_USART_Init+0x138>)
 8005724:	f7ff fd62 	bl	80051ec <LL_RCC_GetUSARTClockFreq>
 8005728:	60b8      	str	r0, [r7, #8]
 800572a:	e007      	b.n	800573c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <LL_USART_Init+0x150>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d103      	bne.n	800573c <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005734:	4815      	ldr	r0, [pc, #84]	; (800578c <LL_USART_Init+0x138>)
 8005736:	f7ff fd59 	bl	80051ec <LL_RCC_GetUSARTClockFreq>
 800573a:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d011      	beq.n	8005766 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00d      	beq.n	8005766 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	460b      	mov	r3, r1
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff ff27 	bl	80055b4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fee6 	bl	800553e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005772:	7bfb      	ldrb	r3, [r7, #15]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	efff69f3 	.word	0xefff69f3
 8005780:	40011000 	.word	0x40011000
 8005784:	07000308 	.word	0x07000308
 8005788:	40004400 	.word	0x40004400
 800578c:	07000008 	.word	0x07000008
 8005790:	40004800 	.word	0x40004800
 8005794:	40004c00 	.word	0x40004c00
 8005798:	40005000 	.word	0x40005000
 800579c:	40011400 	.word	0x40011400
 80057a0:	40007800 	.word	0x40007800
 80057a4:	40007c00 	.word	0x40007c00

080057a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057ac:	f001 f970 	bl	8006a90 <vTaskStartScheduler>
  
  return osOK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <osDelay+0x16>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	e000      	b.n	80057ce <osDelay+0x18>
 80057cc:	2301      	movs	r3, #1
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 f92a 	bl	8006a28 <vTaskDelay>
  
  return osOK;
 80057d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f103 0208 	add.w	r2, r3, #8
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f04f 32ff 	mov.w	r2, #4294967295
 80057f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f103 0208 	add.w	r2, r3, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f103 0208 	add.w	r2, r3, #8
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	601a      	str	r2, [r3, #0]
}
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d103      	bne.n	80058a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e00c      	b.n	80058ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3308      	adds	r3, #8
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	e002      	b.n	80058ae <vListInsert+0x2e>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d2f6      	bcs.n	80058a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	601a      	str	r2, [r3, #0]
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6892      	ldr	r2, [r2, #8]
 8005908:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6852      	ldr	r2, [r2, #4]
 8005912:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d103      	bne.n	8005926 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	1e5a      	subs	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
	...

08005948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005972:	f002 fb5f 	bl	8008034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	441a      	add	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	3b01      	subs	r3, #1
 80059a4:	68f9      	ldr	r1, [r7, #12]
 80059a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	441a      	add	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	22ff      	movs	r2, #255	; 0xff
 80059b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	22ff      	movs	r2, #255	; 0xff
 80059be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d114      	bne.n	80059f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01a      	beq.n	8005a06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3310      	adds	r3, #16
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 faef 	bl	8006fb8 <xTaskRemoveFromEventList>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d012      	beq.n	8005a06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059e0:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <xQueueGenericReset+0xcc>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	e009      	b.n	8005a06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3310      	adds	r3, #16
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fef1 	bl	80057de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3324      	adds	r3, #36	; 0x24
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff feec 	bl	80057de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a06:	f002 fb45 	bl	8008094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a0a:	2301      	movs	r3, #1
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08e      	sub	sp, #56	; 0x38
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <xQueueGenericCreateStatic+0x52>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <xQueueGenericCreateStatic+0x56>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <xQueueGenericCreateStatic+0x58>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	623b      	str	r3, [r7, #32]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <xQueueGenericCreateStatic+0x7e>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <xQueueGenericCreateStatic+0x82>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <xQueueGenericCreateStatic+0x84>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	61fb      	str	r3, [r7, #28]
}
 8005ab2:	bf00      	nop
 8005ab4:	e7fe      	b.n	8005ab4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ab6:	2348      	movs	r3, #72	; 0x48
 8005ab8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b48      	cmp	r3, #72	; 0x48
 8005abe:	d00a      	beq.n	8005ad6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	61bb      	str	r3, [r7, #24]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ad6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00d      	beq.n	8005afe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	4613      	mov	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f83f 	bl	8005b7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3730      	adds	r7, #48	; 0x30
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	; 0x28
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	4613      	mov	r3, r2
 8005b14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	613b      	str	r3, [r7, #16]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	3348      	adds	r3, #72	; 0x48
 8005b40:	4618      	mov	r0, r3
 8005b42:	f002 fb99 	bl	8008278 <pvPortMalloc>
 8005b46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d011      	beq.n	8005b72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	3348      	adds	r3, #72	; 0x48
 8005b56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b60:	79fa      	ldrb	r2, [r7, #7]
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f805 	bl	8005b7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b72:	69bb      	ldr	r3, [r7, #24]
	}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3720      	adds	r7, #32
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	e002      	b.n	8005b9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005baa:	2101      	movs	r1, #1
 8005bac:	69b8      	ldr	r0, [r7, #24]
 8005bae:	f7ff fecb 	bl	8005948 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2100      	movs	r1, #0
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f81d 	bl	8005c20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b086      	sub	sp, #24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c00:	79fb      	ldrb	r3, [r7, #7]
 8005c02:	461a      	mov	r2, r3
 8005c04:	6939      	ldr	r1, [r7, #16]
 8005c06:	6978      	ldr	r0, [r7, #20]
 8005c08:	f7ff ff7e 	bl	8005b08 <xQueueGenericCreate>
 8005c0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7ff ffd3 	bl	8005bba <prvInitialiseMutex>

		return xNewQueue;
 8005c14:	68fb      	ldr	r3, [r7, #12]
	}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08e      	sub	sp, #56	; 0x38
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <xQueueGenericSend+0x32>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d103      	bne.n	8005c60 <xQueueGenericSend+0x40>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <xQueueGenericSend+0x44>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <xQueueGenericSend+0x46>
 8005c64:	2300      	movs	r3, #0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10a      	bne.n	8005c80 <xQueueGenericSend+0x60>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c7c:	bf00      	nop
 8005c7e:	e7fe      	b.n	8005c7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d103      	bne.n	8005c8e <xQueueGenericSend+0x6e>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <xQueueGenericSend+0x72>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <xQueueGenericSend+0x74>
 8005c92:	2300      	movs	r3, #0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <xQueueGenericSend+0x8e>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	623b      	str	r3, [r7, #32]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cae:	f001 fb43 	bl	8007338 <xTaskGetSchedulerState>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <xQueueGenericSend+0x9e>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <xQueueGenericSend+0xa2>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <xQueueGenericSend+0xa4>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <xQueueGenericSend+0xbe>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	61fb      	str	r3, [r7, #28]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cde:	f002 f9a9 	bl	8008034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d302      	bcc.n	8005cf4 <xQueueGenericSend+0xd4>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d129      	bne.n	8005d48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cfa:	f000 fb52 	bl	80063a2 <prvCopyDataToQueue>
 8005cfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d010      	beq.n	8005d2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	3324      	adds	r3, #36	; 0x24
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 f953 	bl	8006fb8 <xTaskRemoveFromEventList>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d013      	beq.n	8005d40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d18:	4b3f      	ldr	r3, [pc, #252]	; (8005e18 <xQueueGenericSend+0x1f8>)
 8005d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	e00a      	b.n	8005d40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d30:	4b39      	ldr	r3, [pc, #228]	; (8005e18 <xQueueGenericSend+0x1f8>)
 8005d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d40:	f002 f9a8 	bl	8008094 <vPortExitCritical>
				return pdPASS;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e063      	b.n	8005e10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d4e:	f002 f9a1 	bl	8008094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	e05c      	b.n	8005e10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d5c:	f107 0314 	add.w	r3, r7, #20
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 f98b 	bl	800707c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d66:	2301      	movs	r3, #1
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d6a:	f002 f993 	bl	8008094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d6e:	f000 feff 	bl	8006b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d72:	f002 f95f 	bl	8008034 <vPortEnterCritical>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d7c:	b25b      	sxtb	r3, r3
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d103      	bne.n	8005d8c <xQueueGenericSend+0x16c>
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d92:	b25b      	sxtb	r3, r3
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d103      	bne.n	8005da2 <xQueueGenericSend+0x182>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da2:	f002 f977 	bl	8008094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005da6:	1d3a      	adds	r2, r7, #4
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 f97a 	bl	80070a8 <xTaskCheckForTimeOut>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d124      	bne.n	8005e04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dbc:	f000 fbe9 	bl	8006592 <prvIsQueueFull>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d018      	beq.n	8005df8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	3310      	adds	r3, #16
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4611      	mov	r1, r2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 f8a2 	bl	8006f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd6:	f000 fb74 	bl	80064c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dda:	f000 fed7 	bl	8006b8c <xTaskResumeAll>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f47f af7c 	bne.w	8005cde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <xQueueGenericSend+0x1f8>)
 8005de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	e772      	b.n	8005cde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dfa:	f000 fb62 	bl	80064c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dfe:	f000 fec5 	bl	8006b8c <xTaskResumeAll>
 8005e02:	e76c      	b.n	8005cde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e06:	f000 fb5c 	bl	80064c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e0a:	f000 febf 	bl	8006b8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3738      	adds	r7, #56	; 0x38
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b090      	sub	sp, #64	; 0x40
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d103      	bne.n	8005e58 <xQueueGenericSendFromISR+0x3c>
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <xQueueGenericSendFromISR+0x40>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <xQueueGenericSendFromISR+0x42>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e74:	bf00      	nop
 8005e76:	e7fe      	b.n	8005e76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d103      	bne.n	8005e86 <xQueueGenericSendFromISR+0x6a>
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <xQueueGenericSendFromISR+0x6e>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <xQueueGenericSendFromISR+0x70>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	623b      	str	r3, [r7, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ea6:	f002 f9a7 	bl	80081f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005eaa:	f3ef 8211 	mrs	r2, BASEPRI
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	61fa      	str	r2, [r7, #28]
 8005ec0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ec2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ec4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d302      	bcc.n	8005ed8 <xQueueGenericSendFromISR+0xbc>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d12f      	bne.n	8005f38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eee:	f000 fa58 	bl	80063a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ef2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efa:	d112      	bne.n	8005f22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d016      	beq.n	8005f32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	3324      	adds	r3, #36	; 0x24
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 f855 	bl	8006fb8 <xTaskRemoveFromEventList>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00e      	beq.n	8005f32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00b      	beq.n	8005f32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	e007      	b.n	8005f32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f26:	3301      	adds	r3, #1
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	b25a      	sxtb	r2, r3
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f32:	2301      	movs	r3, #1
 8005f34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f36:	e001      	b.n	8005f3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3740      	adds	r7, #64	; 0x40
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08c      	sub	sp, #48	; 0x30
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <xQueueReceive+0x30>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	623b      	str	r3, [r7, #32]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <xQueueReceive+0x3e>
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <xQueueReceive+0x42>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <xQueueReceive+0x44>
 8005f96:	2300      	movs	r3, #0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xQueueReceive+0x5e>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	61fb      	str	r3, [r7, #28]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fb2:	f001 f9c1 	bl	8007338 <xTaskGetSchedulerState>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d102      	bne.n	8005fc2 <xQueueReceive+0x6e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <xQueueReceive+0x72>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <xQueueReceive+0x74>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <xQueueReceive+0x8e>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	61bb      	str	r3, [r7, #24]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fe2:	f002 f827 	bl	8008034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01f      	beq.n	8006032 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff6:	f000 fa3e 	bl	8006476 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	1e5a      	subs	r2, r3, #1
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00f      	beq.n	800602a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	3310      	adds	r3, #16
 800600e:	4618      	mov	r0, r3
 8006010:	f000 ffd2 	bl	8006fb8 <xTaskRemoveFromEventList>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800601a:	4b3d      	ldr	r3, [pc, #244]	; (8006110 <xQueueReceive+0x1bc>)
 800601c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800602a:	f002 f833 	bl	8008094 <vPortExitCritical>
				return pdPASS;
 800602e:	2301      	movs	r3, #1
 8006030:	e069      	b.n	8006106 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006038:	f002 f82c 	bl	8008094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800603c:	2300      	movs	r3, #0
 800603e:	e062      	b.n	8006106 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006046:	f107 0310 	add.w	r3, r7, #16
 800604a:	4618      	mov	r0, r3
 800604c:	f001 f816 	bl	800707c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006050:	2301      	movs	r3, #1
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006054:	f002 f81e 	bl	8008094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006058:	f000 fd8a 	bl	8006b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800605c:	f001 ffea 	bl	8008034 <vPortEnterCritical>
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006066:	b25b      	sxtb	r3, r3
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606c:	d103      	bne.n	8006076 <xQueueReceive+0x122>
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800607c:	b25b      	sxtb	r3, r3
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006082:	d103      	bne.n	800608c <xQueueReceive+0x138>
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800608c:	f002 f802 	bl	8008094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006090:	1d3a      	adds	r2, r7, #4
 8006092:	f107 0310 	add.w	r3, r7, #16
 8006096:	4611      	mov	r1, r2
 8006098:	4618      	mov	r0, r3
 800609a:	f001 f805 	bl	80070a8 <xTaskCheckForTimeOut>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d123      	bne.n	80060ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060a6:	f000 fa5e 	bl	8006566 <prvIsQueueEmpty>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d017      	beq.n	80060e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	3324      	adds	r3, #36	; 0x24
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 ff2d 	bl	8006f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c0:	f000 f9ff 	bl	80064c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060c4:	f000 fd62 	bl	8006b8c <xTaskResumeAll>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d189      	bne.n	8005fe2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80060ce:	4b10      	ldr	r3, [pc, #64]	; (8006110 <xQueueReceive+0x1bc>)
 80060d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	e780      	b.n	8005fe2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e2:	f000 f9ee 	bl	80064c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060e6:	f000 fd51 	bl	8006b8c <xTaskResumeAll>
 80060ea:	e77a      	b.n	8005fe2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ee:	f000 f9e8 	bl	80064c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060f2:	f000 fd4b 	bl	8006b8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f8:	f000 fa35 	bl	8006566 <prvIsQueueEmpty>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f43f af6f 	beq.w	8005fe2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006104:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006106:	4618      	mov	r0, r3
 8006108:	3730      	adds	r7, #48	; 0x30
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08e      	sub	sp, #56	; 0x38
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800611e:	2300      	movs	r3, #0
 8006120:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006126:	2300      	movs	r3, #0
 8006128:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	623b      	str	r3, [r7, #32]
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	61fb      	str	r3, [r7, #28]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006164:	f001 f8e8 	bl	8007338 <xTaskGetSchedulerState>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <xQueueSemaphoreTake+0x60>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <xQueueSemaphoreTake+0x64>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <xQueueSemaphoreTake+0x66>
 8006178:	2300      	movs	r3, #0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61bb      	str	r3, [r7, #24]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006194:	f001 ff4e 	bl	8008034 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d024      	beq.n	80061ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	1e5a      	subs	r2, r3, #1
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061b4:	f001 fa68 	bl	8007688 <pvTaskIncrementMutexHeldCount>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00f      	beq.n	80061e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	3310      	adds	r3, #16
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fef4 	bl	8006fb8 <xTaskRemoveFromEventList>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061d6:	4b54      	ldr	r3, [pc, #336]	; (8006328 <xQueueSemaphoreTake+0x214>)
 80061d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061e6:	f001 ff55 	bl	8008094 <vPortExitCritical>
				return pdPASS;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e097      	b.n	800631e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d111      	bne.n	8006218 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	617b      	str	r3, [r7, #20]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006210:	f001 ff40 	bl	8008094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006214:	2300      	movs	r3, #0
 8006216:	e082      	b.n	800631e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800621e:	f107 030c 	add.w	r3, r7, #12
 8006222:	4618      	mov	r0, r3
 8006224:	f000 ff2a 	bl	800707c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006228:	2301      	movs	r3, #1
 800622a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800622c:	f001 ff32 	bl	8008094 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006230:	f000 fc9e 	bl	8006b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006234:	f001 fefe 	bl	8008034 <vPortEnterCritical>
 8006238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800623e:	b25b      	sxtb	r3, r3
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d103      	bne.n	800624e <xQueueSemaphoreTake+0x13a>
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006254:	b25b      	sxtb	r3, r3
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625a:	d103      	bne.n	8006264 <xQueueSemaphoreTake+0x150>
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006264:	f001 ff16 	bl	8008094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006268:	463a      	mov	r2, r7
 800626a:	f107 030c 	add.w	r3, r7, #12
 800626e:	4611      	mov	r1, r2
 8006270:	4618      	mov	r0, r3
 8006272:	f000 ff19 	bl	80070a8 <xTaskCheckForTimeOut>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d132      	bne.n	80062e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800627c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800627e:	f000 f972 	bl	8006566 <prvIsQueueEmpty>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d026      	beq.n	80062d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006290:	f001 fed0 	bl	8008034 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	4618      	mov	r0, r3
 800629a:	f001 f86b 	bl	8007374 <xTaskPriorityInherit>
 800629e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80062a0:	f001 fef8 	bl	8008094 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	3324      	adds	r3, #36	; 0x24
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fe33 	bl	8006f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062b4:	f000 f905 	bl	80064c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062b8:	f000 fc68 	bl	8006b8c <xTaskResumeAll>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f47f af68 	bne.w	8006194 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80062c4:	4b18      	ldr	r3, [pc, #96]	; (8006328 <xQueueSemaphoreTake+0x214>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	e75e      	b.n	8006194 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062d8:	f000 f8f3 	bl	80064c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062dc:	f000 fc56 	bl	8006b8c <xTaskResumeAll>
 80062e0:	e758      	b.n	8006194 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80062e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062e4:	f000 f8ed 	bl	80064c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062e8:	f000 fc50 	bl	8006b8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062ee:	f000 f93a 	bl	8006566 <prvIsQueueEmpty>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f43f af4d 	beq.w	8006194 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00d      	beq.n	800631c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006300:	f001 fe98 	bl	8008034 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006306:	f000 f834 	bl	8006372 <prvGetDisinheritPriorityAfterTimeout>
 800630a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006312:	4618      	mov	r0, r3
 8006314:	f001 f92a 	bl	800756c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006318:	f001 febc 	bl	8008094 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800631c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800631e:	4618      	mov	r0, r3
 8006320:	3738      	adds	r7, #56	; 0x38
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <vQueueDelete+0x28>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	60bb      	str	r3, [r7, #8]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f95f 	bl	8006618 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f002 f853 	bl	8008410 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	2b00      	cmp	r3, #0
 8006380:	d006      	beq.n	8006390 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f1c3 0307 	rsb	r3, r3, #7
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e001      	b.n	8006394 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006394:	68fb      	ldr	r3, [r7, #12]
	}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b086      	sub	sp, #24
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10d      	bne.n	80063dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d14d      	bne.n	8006464 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 f847 	bl	8007460 <xTaskPriorityDisinherit>
 80063d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	609a      	str	r2, [r3, #8]
 80063da:	e043      	b.n	8006464 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d119      	bne.n	8006416 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6858      	ldr	r0, [r3, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	461a      	mov	r2, r3
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	f003 f835 	bl	800945c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	441a      	add	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	d32b      	bcc.n	8006464 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	605a      	str	r2, [r3, #4]
 8006414:	e026      	b.n	8006464 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68d8      	ldr	r0, [r3, #12]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	461a      	mov	r2, r3
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	f003 f81b 	bl	800945c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	425b      	negs	r3, r3
 8006430:	441a      	add	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d207      	bcs.n	8006452 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	425b      	negs	r3, r3
 800644c:	441a      	add	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d105      	bne.n	8006464 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	3b01      	subs	r3, #1
 8006462:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800646c:	697b      	ldr	r3, [r7, #20]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d018      	beq.n	80064ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	441a      	add	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d303      	bcc.n	80064aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68d9      	ldr	r1, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	461a      	mov	r2, r3
 80064b4:	6838      	ldr	r0, [r7, #0]
 80064b6:	f002 ffd1 	bl	800945c <memcpy>
	}
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064ca:	f001 fdb3 	bl	8008034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064d6:	e011      	b.n	80064fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d012      	beq.n	8006506 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3324      	adds	r3, #36	; 0x24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fd67 	bl	8006fb8 <xTaskRemoveFromEventList>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064f0:	f000 fe3c 	bl	800716c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006500:	2b00      	cmp	r3, #0
 8006502:	dce9      	bgt.n	80064d8 <prvUnlockQueue+0x16>
 8006504:	e000      	b.n	8006508 <prvUnlockQueue+0x46>
					break;
 8006506:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	22ff      	movs	r2, #255	; 0xff
 800650c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006510:	f001 fdc0 	bl	8008094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006514:	f001 fd8e 	bl	8008034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800651e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006520:	e011      	b.n	8006546 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d012      	beq.n	8006550 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3310      	adds	r3, #16
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fd42 	bl	8006fb8 <xTaskRemoveFromEventList>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800653a:	f000 fe17 	bl	800716c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	3b01      	subs	r3, #1
 8006542:	b2db      	uxtb	r3, r3
 8006544:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006546:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800654a:	2b00      	cmp	r3, #0
 800654c:	dce9      	bgt.n	8006522 <prvUnlockQueue+0x60>
 800654e:	e000      	b.n	8006552 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006550:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	22ff      	movs	r2, #255	; 0xff
 8006556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800655a:	f001 fd9b 	bl	8008094 <vPortExitCritical>
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800656e:	f001 fd61 	bl	8008034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800657a:	2301      	movs	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e001      	b.n	8006584 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006584:	f001 fd86 	bl	8008094 <vPortExitCritical>

	return xReturn;
 8006588:	68fb      	ldr	r3, [r7, #12]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800659a:	f001 fd4b 	bl	8008034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d102      	bne.n	80065b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065aa:	2301      	movs	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e001      	b.n	80065b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065b4:	f001 fd6e 	bl	8008094 <vPortExitCritical>

	return xReturn;
 80065b8:	68fb      	ldr	r3, [r7, #12]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	e014      	b.n	80065fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065d4:	4a0f      	ldr	r2, [pc, #60]	; (8006614 <vQueueAddToRegistry+0x50>)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10b      	bne.n	80065f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065e0:	490c      	ldr	r1, [pc, #48]	; (8006614 <vQueueAddToRegistry+0x50>)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065ea:	4a0a      	ldr	r2, [pc, #40]	; (8006614 <vQueueAddToRegistry+0x50>)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	4413      	add	r3, r2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065f6:	e006      	b.n	8006606 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b07      	cmp	r3, #7
 8006602:	d9e7      	bls.n	80065d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006604:	bf00      	nop
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	24000b80 	.word	0x24000b80

08006618 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	e016      	b.n	8006654 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006626:	4a10      	ldr	r2, [pc, #64]	; (8006668 <vQueueUnregisterQueue+0x50>)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	4413      	add	r3, r2
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	429a      	cmp	r2, r3
 8006634:	d10b      	bne.n	800664e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006636:	4a0c      	ldr	r2, [pc, #48]	; (8006668 <vQueueUnregisterQueue+0x50>)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2100      	movs	r1, #0
 800663c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006640:	4a09      	ldr	r2, [pc, #36]	; (8006668 <vQueueUnregisterQueue+0x50>)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	4413      	add	r3, r2
 8006648:	2200      	movs	r2, #0
 800664a:	605a      	str	r2, [r3, #4]
				break;
 800664c:	e006      	b.n	800665c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b07      	cmp	r3, #7
 8006658:	d9e5      	bls.n	8006626 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	24000b80 	.word	0x24000b80

0800666c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800667c:	f001 fcda 	bl	8008034 <vPortEnterCritical>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006686:	b25b      	sxtb	r3, r3
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668c:	d103      	bne.n	8006696 <vQueueWaitForMessageRestricted+0x2a>
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800669c:	b25b      	sxtb	r3, r3
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d103      	bne.n	80066ac <vQueueWaitForMessageRestricted+0x40>
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ac:	f001 fcf2 	bl	8008094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	3324      	adds	r3, #36	; 0x24
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fc4d 	bl	8006f60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066c6:	6978      	ldr	r0, [r7, #20]
 80066c8:	f7ff fefb 	bl	80064c2 <prvUnlockQueue>
	}
 80066cc:	bf00      	nop
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08e      	sub	sp, #56	; 0x38
 80066d8:	af04      	add	r7, sp, #16
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	623b      	str	r3, [r7, #32]
}
 80066fa:	bf00      	nop
 80066fc:	e7fe      	b.n	80066fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <xTaskCreateStatic+0x46>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	61fb      	str	r3, [r7, #28]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800671a:	23a0      	movs	r3, #160	; 0xa0
 800671c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2ba0      	cmp	r3, #160	; 0xa0
 8006722:	d00a      	beq.n	800673a <xTaskCreateStatic+0x66>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	61bb      	str	r3, [r7, #24]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800673a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01e      	beq.n	8006780 <xTaskCreateStatic+0xac>
 8006742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01b      	beq.n	8006780 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006750:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	2202      	movs	r2, #2
 8006756:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800675a:	2300      	movs	r3, #0
 800675c:	9303      	str	r3, [sp, #12]
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	9302      	str	r3, [sp, #8]
 8006762:	f107 0314 	add.w	r3, r7, #20
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f850 	bl	8006818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800677a:	f000 f8eb 	bl	8006954 <prvAddNewTaskToReadyList>
 800677e:	e001      	b.n	8006784 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006780:	2300      	movs	r3, #0
 8006782:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006784:	697b      	ldr	r3, [r7, #20]
	}
 8006786:	4618      	mov	r0, r3
 8006788:	3728      	adds	r7, #40	; 0x28
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800678e:	b580      	push	{r7, lr}
 8006790:	b08c      	sub	sp, #48	; 0x30
 8006792:	af04      	add	r7, sp, #16
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 fd68 	bl	8008278 <pvPortMalloc>
 80067a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00e      	beq.n	80067ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067b0:	20a0      	movs	r0, #160	; 0xa0
 80067b2:	f001 fd61 	bl	8008278 <pvPortMalloc>
 80067b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	631a      	str	r2, [r3, #48]	; 0x30
 80067c4:	e005      	b.n	80067d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067c6:	6978      	ldr	r0, [r7, #20]
 80067c8:	f001 fe22 	bl	8008410 <vPortFree>
 80067cc:	e001      	b.n	80067d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d017      	beq.n	8006808 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067e0:	88fa      	ldrh	r2, [r7, #6]
 80067e2:	2300      	movs	r3, #0
 80067e4:	9303      	str	r3, [sp, #12]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	9302      	str	r3, [sp, #8]
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 f80e 	bl	8006818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067fc:	69f8      	ldr	r0, [r7, #28]
 80067fe:	f000 f8a9 	bl	8006954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006802:	2301      	movs	r3, #1
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	e002      	b.n	800680e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006808:	f04f 33ff 	mov.w	r3, #4294967295
 800680c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800680e:	69bb      	ldr	r3, [r7, #24]
	}
 8006810:	4618      	mov	r0, r3
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006830:	440b      	add	r3, r1
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	f023 0307 	bic.w	r3, r3, #7
 800683e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <prvInitialiseNewTask+0x48>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	617b      	str	r3, [r7, #20]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01f      	beq.n	80068a6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	e012      	b.n	8006892 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	7819      	ldrb	r1, [r3, #0]
 8006874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	3334      	adds	r3, #52	; 0x34
 800687c:	460a      	mov	r2, r1
 800687e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d006      	beq.n	800689a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	3301      	adds	r3, #1
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b0f      	cmp	r3, #15
 8006896:	d9e9      	bls.n	800686c <prvInitialiseNewTask+0x54>
 8006898:	e000      	b.n	800689c <prvInitialiseNewTask+0x84>
			{
				break;
 800689a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068a4:	e003      	b.n	80068ae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	2b06      	cmp	r3, #6
 80068b2:	d901      	bls.n	80068b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068b4:	2306      	movs	r3, #6
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	2200      	movs	r2, #0
 80068c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	3304      	adds	r3, #4
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe ffa5 	bl	800581e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	3318      	adds	r3, #24
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe ffa0 	bl	800581e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	f1c3 0207 	rsb	r2, r3, #7
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	334c      	adds	r3, #76	; 0x4c
 8006908:	224c      	movs	r2, #76	; 0x4c
 800690a:	2100      	movs	r1, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f002 fd1b 	bl	8009348 <memset>
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	4a0c      	ldr	r2, [pc, #48]	; (8006948 <prvInitialiseNewTask+0x130>)
 8006916:	651a      	str	r2, [r3, #80]	; 0x50
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	4a0c      	ldr	r2, [pc, #48]	; (800694c <prvInitialiseNewTask+0x134>)
 800691c:	655a      	str	r2, [r3, #84]	; 0x54
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	4a0b      	ldr	r2, [pc, #44]	; (8006950 <prvInitialiseNewTask+0x138>)
 8006922:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	69b8      	ldr	r0, [r7, #24]
 800692a:	f001 fa59 	bl	8007de0 <pxPortInitialiseStack>
 800692e:	4602      	mov	r2, r0
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006940:	bf00      	nop
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	24010818 	.word	0x24010818
 800694c:	24010880 	.word	0x24010880
 8006950:	240108e8 	.word	0x240108e8

08006954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800695c:	f001 fb6a 	bl	8008034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006960:	4b2a      	ldr	r3, [pc, #168]	; (8006a0c <prvAddNewTaskToReadyList+0xb8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3301      	adds	r3, #1
 8006966:	4a29      	ldr	r2, [pc, #164]	; (8006a0c <prvAddNewTaskToReadyList+0xb8>)
 8006968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800696a:	4b29      	ldr	r3, [pc, #164]	; (8006a10 <prvAddNewTaskToReadyList+0xbc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006972:	4a27      	ldr	r2, [pc, #156]	; (8006a10 <prvAddNewTaskToReadyList+0xbc>)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006978:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <prvAddNewTaskToReadyList+0xb8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d110      	bne.n	80069a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006980:	f000 fc18 	bl	80071b4 <prvInitialiseTaskLists>
 8006984:	e00d      	b.n	80069a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006986:	4b23      	ldr	r3, [pc, #140]	; (8006a14 <prvAddNewTaskToReadyList+0xc0>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800698e:	4b20      	ldr	r3, [pc, #128]	; (8006a10 <prvAddNewTaskToReadyList+0xbc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	429a      	cmp	r2, r3
 800699a:	d802      	bhi.n	80069a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800699c:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <prvAddNewTaskToReadyList+0xbc>)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069a2:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <prvAddNewTaskToReadyList+0xc4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	4a1b      	ldr	r2, [pc, #108]	; (8006a18 <prvAddNewTaskToReadyList+0xc4>)
 80069aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	2201      	movs	r2, #1
 80069b2:	409a      	lsls	r2, r3
 80069b4:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <prvAddNewTaskToReadyList+0xc8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	4a18      	ldr	r2, [pc, #96]	; (8006a1c <prvAddNewTaskToReadyList+0xc8>)
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <prvAddNewTaskToReadyList+0xcc>)
 80069cc:	441a      	add	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3304      	adds	r3, #4
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f7fe ff2f 	bl	8005838 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069da:	f001 fb5b 	bl	8008094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069de:	4b0d      	ldr	r3, [pc, #52]	; (8006a14 <prvAddNewTaskToReadyList+0xc0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00e      	beq.n	8006a04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <prvAddNewTaskToReadyList+0xbc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d207      	bcs.n	8006a04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069f4:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <prvAddNewTaskToReadyList+0xd0>)
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	24000cc0 	.word	0x24000cc0
 8006a10:	24000bc0 	.word	0x24000bc0
 8006a14:	24000ccc 	.word	0x24000ccc
 8006a18:	24000cdc 	.word	0x24000cdc
 8006a1c:	24000cc8 	.word	0x24000cc8
 8006a20:	24000bc4 	.word	0x24000bc4
 8006a24:	e000ed04 	.word	0xe000ed04

08006a28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d017      	beq.n	8006a6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a3a:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <vTaskDelay+0x60>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <vTaskDelay+0x30>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	60bb      	str	r3, [r7, #8]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a58:	f000 f88a 	bl	8006b70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fe26 	bl	80076b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a64:	f000 f892 	bl	8006b8c <xTaskResumeAll>
 8006a68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d107      	bne.n	8006a80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a70:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <vTaskDelay+0x64>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a80:	bf00      	nop
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	24000ce8 	.word	0x24000ce8
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	; 0x28
 8006a94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a9e:	463a      	mov	r2, r7
 8006aa0:	1d39      	adds	r1, r7, #4
 8006aa2:	f107 0308 	add.w	r3, r7, #8
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7f9 ff00 	bl	80008ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	9202      	str	r2, [sp, #8]
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	2300      	movs	r3, #0
 8006abc:	460a      	mov	r2, r1
 8006abe:	4924      	ldr	r1, [pc, #144]	; (8006b50 <vTaskStartScheduler+0xc0>)
 8006ac0:	4824      	ldr	r0, [pc, #144]	; (8006b54 <vTaskStartScheduler+0xc4>)
 8006ac2:	f7ff fe07 	bl	80066d4 <xTaskCreateStatic>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4a23      	ldr	r2, [pc, #140]	; (8006b58 <vTaskStartScheduler+0xc8>)
 8006aca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006acc:	4b22      	ldr	r3, [pc, #136]	; (8006b58 <vTaskStartScheduler+0xc8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e001      	b.n	8006ade <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d102      	bne.n	8006aea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ae4:	f000 fe4a 	bl	800777c <xTimerCreateTimerTask>
 8006ae8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d11b      	bne.n	8006b28 <vTaskStartScheduler+0x98>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	613b      	str	r3, [r7, #16]
}
 8006b02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b04:	4b15      	ldr	r3, [pc, #84]	; (8006b5c <vTaskStartScheduler+0xcc>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	334c      	adds	r3, #76	; 0x4c
 8006b0a:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <vTaskStartScheduler+0xd0>)
 8006b0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b0e:	4b15      	ldr	r3, [pc, #84]	; (8006b64 <vTaskStartScheduler+0xd4>)
 8006b10:	f04f 32ff 	mov.w	r2, #4294967295
 8006b14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b16:	4b14      	ldr	r3, [pc, #80]	; (8006b68 <vTaskStartScheduler+0xd8>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b1c:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <vTaskStartScheduler+0xdc>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b22:	f001 f9e5 	bl	8007ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b26:	e00e      	b.n	8006b46 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d10a      	bne.n	8006b46 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60fb      	str	r3, [r7, #12]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <vTaskStartScheduler+0xb4>
}
 8006b46:	bf00      	nop
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	08009f5c 	.word	0x08009f5c
 8006b54:	08007185 	.word	0x08007185
 8006b58:	24000ce4 	.word	0x24000ce4
 8006b5c:	24000bc0 	.word	0x24000bc0
 8006b60:	24000060 	.word	0x24000060
 8006b64:	24000ce0 	.word	0x24000ce0
 8006b68:	24000ccc 	.word	0x24000ccc
 8006b6c:	24000cc4 	.word	0x24000cc4

08006b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b74:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <vTaskSuspendAll+0x18>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	4a03      	ldr	r2, [pc, #12]	; (8006b88 <vTaskSuspendAll+0x18>)
 8006b7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b7e:	bf00      	nop
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	24000ce8 	.word	0x24000ce8

08006b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b9a:	4b41      	ldr	r3, [pc, #260]	; (8006ca0 <xTaskResumeAll+0x114>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10a      	bne.n	8006bb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	603b      	str	r3, [r7, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	e7fe      	b.n	8006bb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bb8:	f001 fa3c 	bl	8008034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bbc:	4b38      	ldr	r3, [pc, #224]	; (8006ca0 <xTaskResumeAll+0x114>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	4a37      	ldr	r2, [pc, #220]	; (8006ca0 <xTaskResumeAll+0x114>)
 8006bc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc6:	4b36      	ldr	r3, [pc, #216]	; (8006ca0 <xTaskResumeAll+0x114>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d161      	bne.n	8006c92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bce:	4b35      	ldr	r3, [pc, #212]	; (8006ca4 <xTaskResumeAll+0x118>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d05d      	beq.n	8006c92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bd6:	e02e      	b.n	8006c36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd8:	4b33      	ldr	r3, [pc, #204]	; (8006ca8 <xTaskResumeAll+0x11c>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3318      	adds	r3, #24
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe fe84 	bl	80058f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fe7f 	bl	80058f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	4b2b      	ldr	r3, [pc, #172]	; (8006cac <xTaskResumeAll+0x120>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	4a2a      	ldr	r2, [pc, #168]	; (8006cac <xTaskResumeAll+0x120>)
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4a27      	ldr	r2, [pc, #156]	; (8006cb0 <xTaskResumeAll+0x124>)
 8006c14:	441a      	add	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f7fe fe0b 	bl	8005838 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c26:	4b23      	ldr	r3, [pc, #140]	; (8006cb4 <xTaskResumeAll+0x128>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d302      	bcc.n	8006c36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c30:	4b21      	ldr	r3, [pc, #132]	; (8006cb8 <xTaskResumeAll+0x12c>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c36:	4b1c      	ldr	r3, [pc, #112]	; (8006ca8 <xTaskResumeAll+0x11c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1cc      	bne.n	8006bd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c44:	f000 fb58 	bl	80072f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c48:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <xTaskResumeAll+0x130>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d010      	beq.n	8006c76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c54:	f000 f846 	bl	8006ce4 <xTaskIncrementTick>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c5e:	4b16      	ldr	r3, [pc, #88]	; (8006cb8 <xTaskResumeAll+0x12c>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1f1      	bne.n	8006c54 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006c70:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <xTaskResumeAll+0x130>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c76:	4b10      	ldr	r3, [pc, #64]	; (8006cb8 <xTaskResumeAll+0x12c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c82:	4b0f      	ldr	r3, [pc, #60]	; (8006cc0 <xTaskResumeAll+0x134>)
 8006c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c92:	f001 f9ff 	bl	8008094 <vPortExitCritical>

	return xAlreadyYielded;
 8006c96:	68bb      	ldr	r3, [r7, #8]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	24000ce8 	.word	0x24000ce8
 8006ca4:	24000cc0 	.word	0x24000cc0
 8006ca8:	24000c80 	.word	0x24000c80
 8006cac:	24000cc8 	.word	0x24000cc8
 8006cb0:	24000bc4 	.word	0x24000bc4
 8006cb4:	24000bc0 	.word	0x24000bc0
 8006cb8:	24000cd4 	.word	0x24000cd4
 8006cbc:	24000cd0 	.word	0x24000cd0
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <xTaskGetTickCount+0x1c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006cd0:	687b      	ldr	r3, [r7, #4]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	24000cc4 	.word	0x24000cc4

08006ce4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cee:	4b4e      	ldr	r3, [pc, #312]	; (8006e28 <xTaskIncrementTick+0x144>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f040 808e 	bne.w	8006e14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cf8:	4b4c      	ldr	r3, [pc, #304]	; (8006e2c <xTaskIncrementTick+0x148>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d00:	4a4a      	ldr	r2, [pc, #296]	; (8006e2c <xTaskIncrementTick+0x148>)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d120      	bne.n	8006d4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d0c:	4b48      	ldr	r3, [pc, #288]	; (8006e30 <xTaskIncrementTick+0x14c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <xTaskIncrementTick+0x48>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	603b      	str	r3, [r7, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	e7fe      	b.n	8006d2a <xTaskIncrementTick+0x46>
 8006d2c:	4b40      	ldr	r3, [pc, #256]	; (8006e30 <xTaskIncrementTick+0x14c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	4b40      	ldr	r3, [pc, #256]	; (8006e34 <xTaskIncrementTick+0x150>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a3e      	ldr	r2, [pc, #248]	; (8006e30 <xTaskIncrementTick+0x14c>)
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	4a3e      	ldr	r2, [pc, #248]	; (8006e34 <xTaskIncrementTick+0x150>)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	4b3d      	ldr	r3, [pc, #244]	; (8006e38 <xTaskIncrementTick+0x154>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3301      	adds	r3, #1
 8006d46:	4a3c      	ldr	r2, [pc, #240]	; (8006e38 <xTaskIncrementTick+0x154>)
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	f000 fad5 	bl	80072f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d4e:	4b3b      	ldr	r3, [pc, #236]	; (8006e3c <xTaskIncrementTick+0x158>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d348      	bcc.n	8006dea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d58:	4b35      	ldr	r3, [pc, #212]	; (8006e30 <xTaskIncrementTick+0x14c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d104      	bne.n	8006d6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d62:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <xTaskIncrementTick+0x158>)
 8006d64:	f04f 32ff 	mov.w	r2, #4294967295
 8006d68:	601a      	str	r2, [r3, #0]
					break;
 8006d6a:	e03e      	b.n	8006dea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d6c:	4b30      	ldr	r3, [pc, #192]	; (8006e30 <xTaskIncrementTick+0x14c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d203      	bcs.n	8006d8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d84:	4a2d      	ldr	r2, [pc, #180]	; (8006e3c <xTaskIncrementTick+0x158>)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d8a:	e02e      	b.n	8006dea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fe fdae 	bl	80058f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	3318      	adds	r3, #24
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe fda5 	bl	80058f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	2201      	movs	r2, #1
 8006dae:	409a      	lsls	r2, r3
 8006db0:	4b23      	ldr	r3, [pc, #140]	; (8006e40 <xTaskIncrementTick+0x15c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	4a22      	ldr	r2, [pc, #136]	; (8006e40 <xTaskIncrementTick+0x15c>)
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a1f      	ldr	r2, [pc, #124]	; (8006e44 <xTaskIncrementTick+0x160>)
 8006dc8:	441a      	add	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7fe fd31 	bl	8005838 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dda:	4b1b      	ldr	r3, [pc, #108]	; (8006e48 <xTaskIncrementTick+0x164>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d3b9      	bcc.n	8006d58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006de8:	e7b6      	b.n	8006d58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dea:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <xTaskIncrementTick+0x164>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	4914      	ldr	r1, [pc, #80]	; (8006e44 <xTaskIncrementTick+0x160>)
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d901      	bls.n	8006e06 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006e02:	2301      	movs	r3, #1
 8006e04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e06:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <xTaskIncrementTick+0x168>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e004      	b.n	8006e1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e14:	4b0e      	ldr	r3, [pc, #56]	; (8006e50 <xTaskIncrementTick+0x16c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	4a0d      	ldr	r2, [pc, #52]	; (8006e50 <xTaskIncrementTick+0x16c>)
 8006e1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e1e:	697b      	ldr	r3, [r7, #20]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	24000ce8 	.word	0x24000ce8
 8006e2c:	24000cc4 	.word	0x24000cc4
 8006e30:	24000c78 	.word	0x24000c78
 8006e34:	24000c7c 	.word	0x24000c7c
 8006e38:	24000cd8 	.word	0x24000cd8
 8006e3c:	24000ce0 	.word	0x24000ce0
 8006e40:	24000cc8 	.word	0x24000cc8
 8006e44:	24000bc4 	.word	0x24000bc4
 8006e48:	24000bc0 	.word	0x24000bc0
 8006e4c:	24000cd4 	.word	0x24000cd4
 8006e50:	24000cd0 	.word	0x24000cd0

08006e54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e5a:	4b29      	ldr	r3, [pc, #164]	; (8006f00 <vTaskSwitchContext+0xac>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e62:	4b28      	ldr	r3, [pc, #160]	; (8006f04 <vTaskSwitchContext+0xb0>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e68:	e044      	b.n	8006ef4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006e6a:	4b26      	ldr	r3, [pc, #152]	; (8006f04 <vTaskSwitchContext+0xb0>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e70:	4b25      	ldr	r3, [pc, #148]	; (8006f08 <vTaskSwitchContext+0xb4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	fab3 f383 	clz	r3, r3
 8006e7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e7e:	7afb      	ldrb	r3, [r7, #11]
 8006e80:	f1c3 031f 	rsb	r3, r3, #31
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	4921      	ldr	r1, [pc, #132]	; (8006f0c <vTaskSwitchContext+0xb8>)
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	607b      	str	r3, [r7, #4]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <vTaskSwitchContext+0x5a>
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4a14      	ldr	r2, [pc, #80]	; (8006f0c <vTaskSwitchContext+0xb8>)
 8006ebc:	4413      	add	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	605a      	str	r2, [r3, #4]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d104      	bne.n	8006ee0 <vTaskSwitchContext+0x8c>
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	605a      	str	r2, [r3, #4]
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	4a0a      	ldr	r2, [pc, #40]	; (8006f10 <vTaskSwitchContext+0xbc>)
 8006ee8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <vTaskSwitchContext+0xbc>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	334c      	adds	r3, #76	; 0x4c
 8006ef0:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <vTaskSwitchContext+0xc0>)
 8006ef2:	6013      	str	r3, [r2, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	24000ce8 	.word	0x24000ce8
 8006f04:	24000cd4 	.word	0x24000cd4
 8006f08:	24000cc8 	.word	0x24000cc8
 8006f0c:	24000bc4 	.word	0x24000bc4
 8006f10:	24000bc0 	.word	0x24000bc0
 8006f14:	24000060 	.word	0x24000060

08006f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	60fb      	str	r3, [r7, #12]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f3e:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <vTaskPlaceOnEventList+0x44>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3318      	adds	r3, #24
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fe fc9a 	bl	8005880 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	6838      	ldr	r0, [r7, #0]
 8006f50:	f000 fbae 	bl	80076b0 <prvAddCurrentTaskToDelayedList>
}
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	24000bc0 	.word	0x24000bc0

08006f60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	617b      	str	r3, [r7, #20]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3318      	adds	r3, #24
 8006f8e:	4619      	mov	r1, r3
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7fe fc51 	bl	8005838 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	68b8      	ldr	r0, [r7, #8]
 8006fa6:	f000 fb83 	bl	80076b0 <prvAddCurrentTaskToDelayedList>
	}
 8006faa:	bf00      	nop
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	24000bc0 	.word	0x24000bc0

08006fb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	60fb      	str	r3, [r7, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	3318      	adds	r3, #24
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe fc82 	bl	80058f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fee:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <xTaskRemoveFromEventList+0xac>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d11c      	bne.n	8007030 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fc79 	bl	80058f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	2201      	movs	r2, #1
 8007006:	409a      	lsls	r2, r3
 8007008:	4b17      	ldr	r3, [pc, #92]	; (8007068 <xTaskRemoveFromEventList+0xb0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4313      	orrs	r3, r2
 800700e:	4a16      	ldr	r2, [pc, #88]	; (8007068 <xTaskRemoveFromEventList+0xb0>)
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4a13      	ldr	r2, [pc, #76]	; (800706c <xTaskRemoveFromEventList+0xb4>)
 8007020:	441a      	add	r2, r3
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	3304      	adds	r3, #4
 8007026:	4619      	mov	r1, r3
 8007028:	4610      	mov	r0, r2
 800702a:	f7fe fc05 	bl	8005838 <vListInsertEnd>
 800702e:	e005      	b.n	800703c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	3318      	adds	r3, #24
 8007034:	4619      	mov	r1, r3
 8007036:	480e      	ldr	r0, [pc, #56]	; (8007070 <xTaskRemoveFromEventList+0xb8>)
 8007038:	f7fe fbfe 	bl	8005838 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <xTaskRemoveFromEventList+0xbc>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	429a      	cmp	r2, r3
 8007048:	d905      	bls.n	8007056 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800704a:	2301      	movs	r3, #1
 800704c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <xTaskRemoveFromEventList+0xc0>)
 8007050:	2201      	movs	r2, #1
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	e001      	b.n	800705a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800705a:	697b      	ldr	r3, [r7, #20]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	24000ce8 	.word	0x24000ce8
 8007068:	24000cc8 	.word	0x24000cc8
 800706c:	24000bc4 	.word	0x24000bc4
 8007070:	24000c80 	.word	0x24000c80
 8007074:	24000bc0 	.word	0x24000bc0
 8007078:	24000cd4 	.word	0x24000cd4

0800707c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007084:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <vTaskInternalSetTimeOutState+0x24>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <vTaskInternalSetTimeOutState+0x28>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	605a      	str	r2, [r3, #4]
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	24000cd8 	.word	0x24000cd8
 80070a4:	24000cc4 	.word	0x24000cc4

080070a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	613b      	str	r3, [r7, #16]
}
 80070ca:	bf00      	nop
 80070cc:	e7fe      	b.n	80070cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	60fb      	str	r3, [r7, #12]
}
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80070ea:	f000 ffa3 	bl	8008034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070ee:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <xTaskCheckForTimeOut+0xbc>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d102      	bne.n	800710e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007108:	2300      	movs	r3, #0
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	e023      	b.n	8007156 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <xTaskCheckForTimeOut+0xc0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d007      	beq.n	800712a <xTaskCheckForTimeOut+0x82>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	429a      	cmp	r2, r3
 8007122:	d302      	bcc.n	800712a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007124:	2301      	movs	r3, #1
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	e015      	b.n	8007156 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	429a      	cmp	r2, r3
 8007132:	d20b      	bcs.n	800714c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	1ad2      	subs	r2, r2, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ff9b 	bl	800707c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	61fb      	str	r3, [r7, #28]
 800714a:	e004      	b.n	8007156 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007152:	2301      	movs	r3, #1
 8007154:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007156:	f000 ff9d 	bl	8008094 <vPortExitCritical>

	return xReturn;
 800715a:	69fb      	ldr	r3, [r7, #28]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	24000cc4 	.word	0x24000cc4
 8007168:	24000cd8 	.word	0x24000cd8

0800716c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007170:	4b03      	ldr	r3, [pc, #12]	; (8007180 <vTaskMissedYield+0x14>)
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]
}
 8007176:	bf00      	nop
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	24000cd4 	.word	0x24000cd4

08007184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800718c:	f000 f852 	bl	8007234 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <prvIdleTask+0x28>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d9f9      	bls.n	800718c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <prvIdleTask+0x2c>)
 800719a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071a8:	e7f0      	b.n	800718c <prvIdleTask+0x8>
 80071aa:	bf00      	nop
 80071ac:	24000bc4 	.word	0x24000bc4
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071ba:	2300      	movs	r3, #0
 80071bc:	607b      	str	r3, [r7, #4]
 80071be:	e00c      	b.n	80071da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	4613      	mov	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4a12      	ldr	r2, [pc, #72]	; (8007214 <prvInitialiseTaskLists+0x60>)
 80071cc:	4413      	add	r3, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fb05 	bl	80057de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3301      	adds	r3, #1
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b06      	cmp	r3, #6
 80071de:	d9ef      	bls.n	80071c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071e0:	480d      	ldr	r0, [pc, #52]	; (8007218 <prvInitialiseTaskLists+0x64>)
 80071e2:	f7fe fafc 	bl	80057de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071e6:	480d      	ldr	r0, [pc, #52]	; (800721c <prvInitialiseTaskLists+0x68>)
 80071e8:	f7fe faf9 	bl	80057de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071ec:	480c      	ldr	r0, [pc, #48]	; (8007220 <prvInitialiseTaskLists+0x6c>)
 80071ee:	f7fe faf6 	bl	80057de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071f2:	480c      	ldr	r0, [pc, #48]	; (8007224 <prvInitialiseTaskLists+0x70>)
 80071f4:	f7fe faf3 	bl	80057de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071f8:	480b      	ldr	r0, [pc, #44]	; (8007228 <prvInitialiseTaskLists+0x74>)
 80071fa:	f7fe faf0 	bl	80057de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071fe:	4b0b      	ldr	r3, [pc, #44]	; (800722c <prvInitialiseTaskLists+0x78>)
 8007200:	4a05      	ldr	r2, [pc, #20]	; (8007218 <prvInitialiseTaskLists+0x64>)
 8007202:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007204:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <prvInitialiseTaskLists+0x7c>)
 8007206:	4a05      	ldr	r2, [pc, #20]	; (800721c <prvInitialiseTaskLists+0x68>)
 8007208:	601a      	str	r2, [r3, #0]
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	24000bc4 	.word	0x24000bc4
 8007218:	24000c50 	.word	0x24000c50
 800721c:	24000c64 	.word	0x24000c64
 8007220:	24000c80 	.word	0x24000c80
 8007224:	24000c94 	.word	0x24000c94
 8007228:	24000cac 	.word	0x24000cac
 800722c:	24000c78 	.word	0x24000c78
 8007230:	24000c7c 	.word	0x24000c7c

08007234 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800723a:	e019      	b.n	8007270 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800723c:	f000 fefa 	bl	8008034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007240:	4b10      	ldr	r3, [pc, #64]	; (8007284 <prvCheckTasksWaitingTermination+0x50>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3304      	adds	r3, #4
 800724c:	4618      	mov	r0, r3
 800724e:	f7fe fb50 	bl	80058f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007252:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <prvCheckTasksWaitingTermination+0x54>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3b01      	subs	r3, #1
 8007258:	4a0b      	ldr	r2, [pc, #44]	; (8007288 <prvCheckTasksWaitingTermination+0x54>)
 800725a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800725c:	4b0b      	ldr	r3, [pc, #44]	; (800728c <prvCheckTasksWaitingTermination+0x58>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3b01      	subs	r3, #1
 8007262:	4a0a      	ldr	r2, [pc, #40]	; (800728c <prvCheckTasksWaitingTermination+0x58>)
 8007264:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007266:	f000 ff15 	bl	8008094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f810 	bl	8007290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007270:	4b06      	ldr	r3, [pc, #24]	; (800728c <prvCheckTasksWaitingTermination+0x58>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e1      	bne.n	800723c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	24000c94 	.word	0x24000c94
 8007288:	24000cc0 	.word	0x24000cc0
 800728c:	24000ca8 	.word	0x24000ca8

08007290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	334c      	adds	r3, #76	; 0x4c
 800729c:	4618      	mov	r0, r3
 800729e:	f002 f85b 	bl	8009358 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d108      	bne.n	80072be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 f8ad 	bl	8008410 <vPortFree>
				vPortFree( pxTCB );
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 f8aa 	bl	8008410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072bc:	e018      	b.n	80072f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d103      	bne.n	80072d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 f8a1 	bl	8008410 <vPortFree>
	}
 80072ce:	e00f      	b.n	80072f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d00a      	beq.n	80072f0 <prvDeleteTCB+0x60>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	60fb      	str	r3, [r7, #12]
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <prvDeleteTCB+0x5e>
	}
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072fe:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <prvResetNextTaskUnblockTime+0x38>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <prvResetNextTaskUnblockTime+0x3c>)
 800730a:	f04f 32ff 	mov.w	r2, #4294967295
 800730e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007310:	e008      	b.n	8007324 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007312:	4b07      	ldr	r3, [pc, #28]	; (8007330 <prvResetNextTaskUnblockTime+0x38>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4a04      	ldr	r2, [pc, #16]	; (8007334 <prvResetNextTaskUnblockTime+0x3c>)
 8007322:	6013      	str	r3, [r2, #0]
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	24000c78 	.word	0x24000c78
 8007334:	24000ce0 	.word	0x24000ce0

08007338 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800733e:	4b0b      	ldr	r3, [pc, #44]	; (800736c <xTaskGetSchedulerState+0x34>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d102      	bne.n	800734c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007346:	2301      	movs	r3, #1
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	e008      	b.n	800735e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800734c:	4b08      	ldr	r3, [pc, #32]	; (8007370 <xTaskGetSchedulerState+0x38>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d102      	bne.n	800735a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007354:	2302      	movs	r3, #2
 8007356:	607b      	str	r3, [r7, #4]
 8007358:	e001      	b.n	800735e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800735a:	2300      	movs	r3, #0
 800735c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800735e:	687b      	ldr	r3, [r7, #4]
	}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	24000ccc 	.word	0x24000ccc
 8007370:	24000ce8 	.word	0x24000ce8

08007374 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d05e      	beq.n	8007448 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738e:	4b31      	ldr	r3, [pc, #196]	; (8007454 <xTaskPriorityInherit+0xe0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	429a      	cmp	r2, r3
 8007396:	d24e      	bcs.n	8007436 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	db06      	blt.n	80073ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a0:	4b2c      	ldr	r3, [pc, #176]	; (8007454 <xTaskPriorityInherit+0xe0>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	f1c3 0207 	rsb	r2, r3, #7
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	6959      	ldr	r1, [r3, #20]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4a26      	ldr	r2, [pc, #152]	; (8007458 <xTaskPriorityInherit+0xe4>)
 80073c0:	4413      	add	r3, r2
 80073c2:	4299      	cmp	r1, r3
 80073c4:	d12f      	bne.n	8007426 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	3304      	adds	r3, #4
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe fa91 	bl	80058f2 <uxListRemove>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	2201      	movs	r2, #1
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	43da      	mvns	r2, r3
 80073e2:	4b1e      	ldr	r3, [pc, #120]	; (800745c <xTaskPriorityInherit+0xe8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4013      	ands	r3, r2
 80073e8:	4a1c      	ldr	r2, [pc, #112]	; (800745c <xTaskPriorityInherit+0xe8>)
 80073ea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073ec:	4b19      	ldr	r3, [pc, #100]	; (8007454 <xTaskPriorityInherit+0xe0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	2201      	movs	r2, #1
 80073fc:	409a      	lsls	r2, r3
 80073fe:	4b17      	ldr	r3, [pc, #92]	; (800745c <xTaskPriorityInherit+0xe8>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4313      	orrs	r3, r2
 8007404:	4a15      	ldr	r2, [pc, #84]	; (800745c <xTaskPriorityInherit+0xe8>)
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4a10      	ldr	r2, [pc, #64]	; (8007458 <xTaskPriorityInherit+0xe4>)
 8007416:	441a      	add	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	3304      	adds	r3, #4
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f7fe fa0a 	bl	8005838 <vListInsertEnd>
 8007424:	e004      	b.n	8007430 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007426:	4b0b      	ldr	r3, [pc, #44]	; (8007454 <xTaskPriorityInherit+0xe0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007430:	2301      	movs	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e008      	b.n	8007448 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800743a:	4b06      	ldr	r3, [pc, #24]	; (8007454 <xTaskPriorityInherit+0xe0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	429a      	cmp	r2, r3
 8007442:	d201      	bcs.n	8007448 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007444:	2301      	movs	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007448:	68fb      	ldr	r3, [r7, #12]
	}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	24000bc0 	.word	0x24000bc0
 8007458:	24000bc4 	.word	0x24000bc4
 800745c:	24000cc8 	.word	0x24000cc8

08007460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d06e      	beq.n	8007554 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007476:	4b3a      	ldr	r3, [pc, #232]	; (8007560 <xTaskPriorityDisinherit+0x100>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d00a      	beq.n	8007496 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	60fb      	str	r3, [r7, #12]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	60bb      	str	r3, [r7, #8]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b8:	1e5a      	subs	r2, r3, #1
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d044      	beq.n	8007554 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d140      	bne.n	8007554 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	3304      	adds	r3, #4
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fa0b 	bl	80058f2 <uxListRemove>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d115      	bne.n	800750e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e6:	491f      	ldr	r1, [pc, #124]	; (8007564 <xTaskPriorityDisinherit+0x104>)
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <xTaskPriorityDisinherit+0xae>
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	2201      	movs	r2, #1
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	43da      	mvns	r2, r3
 8007504:	4b18      	ldr	r3, [pc, #96]	; (8007568 <xTaskPriorityDisinherit+0x108>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4013      	ands	r3, r2
 800750a:	4a17      	ldr	r2, [pc, #92]	; (8007568 <xTaskPriorityDisinherit+0x108>)
 800750c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751a:	f1c3 0207 	rsb	r2, r3, #7
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	2201      	movs	r2, #1
 8007528:	409a      	lsls	r2, r3
 800752a:	4b0f      	ldr	r3, [pc, #60]	; (8007568 <xTaskPriorityDisinherit+0x108>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4313      	orrs	r3, r2
 8007530:	4a0d      	ldr	r2, [pc, #52]	; (8007568 <xTaskPriorityDisinherit+0x108>)
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4a08      	ldr	r2, [pc, #32]	; (8007564 <xTaskPriorityDisinherit+0x104>)
 8007542:	441a      	add	r2, r3
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	3304      	adds	r3, #4
 8007548:	4619      	mov	r1, r3
 800754a:	4610      	mov	r0, r2
 800754c:	f7fe f974 	bl	8005838 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007554:	697b      	ldr	r3, [r7, #20]
	}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	24000bc0 	.word	0x24000bc0
 8007564:	24000bc4 	.word	0x24000bc4
 8007568:	24000cc8 	.word	0x24000cc8

0800756c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800757a:	2301      	movs	r3, #1
 800757c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d077      	beq.n	8007674 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	60fb      	str	r3, [r7, #12]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d902      	bls.n	80075b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	61fb      	str	r3, [r7, #28]
 80075b0:	e002      	b.n	80075b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d058      	beq.n	8007674 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d153      	bne.n	8007674 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075cc:	4b2b      	ldr	r3, [pc, #172]	; (800767c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d10a      	bne.n	80075ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60bb      	str	r3, [r7, #8]
}
 80075e8:	bf00      	nop
 80075ea:	e7fe      	b.n	80075ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	db04      	blt.n	800760a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	f1c3 0207 	rsb	r2, r3, #7
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	6959      	ldr	r1, [r3, #20]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4a19      	ldr	r2, [pc, #100]	; (8007680 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800761a:	4413      	add	r3, r2
 800761c:	4299      	cmp	r1, r3
 800761e:	d129      	bne.n	8007674 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	3304      	adds	r3, #4
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe f964 	bl	80058f2 <uxListRemove>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	2201      	movs	r2, #1
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43da      	mvns	r2, r3
 800763c:	4b11      	ldr	r3, [pc, #68]	; (8007684 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4013      	ands	r3, r2
 8007642:	4a10      	ldr	r2, [pc, #64]	; (8007684 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007644:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	2201      	movs	r2, #1
 800764c:	409a      	lsls	r2, r3
 800764e:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4313      	orrs	r3, r2
 8007654:	4a0b      	ldr	r2, [pc, #44]	; (8007684 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4a06      	ldr	r2, [pc, #24]	; (8007680 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007666:	441a      	add	r2, r3
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	3304      	adds	r3, #4
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	f7fe f8e2 	bl	8005838 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007674:	bf00      	nop
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	24000bc0 	.word	0x24000bc0
 8007680:	24000bc4 	.word	0x24000bc4
 8007684:	24000cc8 	.word	0x24000cc8

08007688 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800768c:	4b07      	ldr	r3, [pc, #28]	; (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800769a:	3201      	adds	r2, #1
 800769c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800769e:	4b03      	ldr	r3, [pc, #12]	; (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 80076a0:	681b      	ldr	r3, [r3, #0]
	}
 80076a2:	4618      	mov	r0, r3
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	24000bc0 	.word	0x24000bc0

080076b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076ba:	4b29      	ldr	r3, [pc, #164]	; (8007760 <prvAddCurrentTaskToDelayedList+0xb0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c0:	4b28      	ldr	r3, [pc, #160]	; (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe f913 	bl	80058f2 <uxListRemove>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10b      	bne.n	80076ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	2201      	movs	r2, #1
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	43da      	mvns	r2, r3
 80076e0:	4b21      	ldr	r3, [pc, #132]	; (8007768 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4013      	ands	r3, r2
 80076e6:	4a20      	ldr	r2, [pc, #128]	; (8007768 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d10a      	bne.n	8007708 <prvAddCurrentTaskToDelayedList+0x58>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d007      	beq.n	8007708 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4619      	mov	r1, r3
 8007700:	481a      	ldr	r0, [pc, #104]	; (800776c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007702:	f7fe f899 	bl	8005838 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007706:	e026      	b.n	8007756 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007710:	4b14      	ldr	r3, [pc, #80]	; (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	429a      	cmp	r2, r3
 800771e:	d209      	bcs.n	8007734 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007720:	4b13      	ldr	r3, [pc, #76]	; (8007770 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3304      	adds	r3, #4
 800772a:	4619      	mov	r1, r3
 800772c:	4610      	mov	r0, r2
 800772e:	f7fe f8a7 	bl	8005880 <vListInsert>
}
 8007732:	e010      	b.n	8007756 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007734:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3304      	adds	r3, #4
 800773e:	4619      	mov	r1, r3
 8007740:	4610      	mov	r0, r2
 8007742:	f7fe f89d 	bl	8005880 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007746:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	429a      	cmp	r2, r3
 800774e:	d202      	bcs.n	8007756 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007750:	4a09      	ldr	r2, [pc, #36]	; (8007778 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6013      	str	r3, [r2, #0]
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	24000cc4 	.word	0x24000cc4
 8007764:	24000bc0 	.word	0x24000bc0
 8007768:	24000cc8 	.word	0x24000cc8
 800776c:	24000cac 	.word	0x24000cac
 8007770:	24000c7c 	.word	0x24000c7c
 8007774:	24000c78 	.word	0x24000c78
 8007778:	24000ce0 	.word	0x24000ce0

0800777c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007782:	2300      	movs	r3, #0
 8007784:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007786:	f000 faeb 	bl	8007d60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800778a:	4b1c      	ldr	r3, [pc, #112]	; (80077fc <xTimerCreateTimerTask+0x80>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d021      	beq.n	80077d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800779a:	1d3a      	adds	r2, r7, #4
 800779c:	f107 0108 	add.w	r1, r7, #8
 80077a0:	f107 030c 	add.w	r3, r7, #12
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7f9 f89b 	bl	80008e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	9202      	str	r2, [sp, #8]
 80077b2:	9301      	str	r3, [sp, #4]
 80077b4:	2302      	movs	r3, #2
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	2300      	movs	r3, #0
 80077ba:	460a      	mov	r2, r1
 80077bc:	4910      	ldr	r1, [pc, #64]	; (8007800 <xTimerCreateTimerTask+0x84>)
 80077be:	4811      	ldr	r0, [pc, #68]	; (8007804 <xTimerCreateTimerTask+0x88>)
 80077c0:	f7fe ff88 	bl	80066d4 <xTaskCreateStatic>
 80077c4:	4603      	mov	r3, r0
 80077c6:	4a10      	ldr	r2, [pc, #64]	; (8007808 <xTimerCreateTimerTask+0x8c>)
 80077c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077ca:	4b0f      	ldr	r3, [pc, #60]	; (8007808 <xTimerCreateTimerTask+0x8c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077d2:	2301      	movs	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	613b      	str	r3, [r7, #16]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077f2:	697b      	ldr	r3, [r7, #20]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	24000d1c 	.word	0x24000d1c
 8007800:	08009f64 	.word	0x08009f64
 8007804:	08007941 	.word	0x08007941
 8007808:	24000d20 	.word	0x24000d20

0800780c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	; 0x28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800781a:	2300      	movs	r3, #0
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	623b      	str	r3, [r7, #32]
}
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800783a:	4b1a      	ldr	r3, [pc, #104]	; (80078a4 <xTimerGenericCommand+0x98>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d02a      	beq.n	8007898 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b05      	cmp	r3, #5
 8007852:	dc18      	bgt.n	8007886 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007854:	f7ff fd70 	bl	8007338 <xTaskGetSchedulerState>
 8007858:	4603      	mov	r3, r0
 800785a:	2b02      	cmp	r3, #2
 800785c:	d109      	bne.n	8007872 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800785e:	4b11      	ldr	r3, [pc, #68]	; (80078a4 <xTimerGenericCommand+0x98>)
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	f107 0114 	add.w	r1, r7, #20
 8007866:	2300      	movs	r3, #0
 8007868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786a:	f7fe f9d9 	bl	8005c20 <xQueueGenericSend>
 800786e:	6278      	str	r0, [r7, #36]	; 0x24
 8007870:	e012      	b.n	8007898 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007872:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <xTimerGenericCommand+0x98>)
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	f107 0114 	add.w	r1, r7, #20
 800787a:	2300      	movs	r3, #0
 800787c:	2200      	movs	r2, #0
 800787e:	f7fe f9cf 	bl	8005c20 <xQueueGenericSend>
 8007882:	6278      	str	r0, [r7, #36]	; 0x24
 8007884:	e008      	b.n	8007898 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007886:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <xTimerGenericCommand+0x98>)
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	f107 0114 	add.w	r1, r7, #20
 800788e:	2300      	movs	r3, #0
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	f7fe fac3 	bl	8005e1c <xQueueGenericSendFromISR>
 8007896:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800789a:	4618      	mov	r0, r3
 800789c:	3728      	adds	r7, #40	; 0x28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	24000d1c 	.word	0x24000d1c

080078a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b2:	4b22      	ldr	r3, [pc, #136]	; (800793c <prvProcessExpiredTimer+0x94>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	3304      	adds	r3, #4
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe f816 	bl	80058f2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d022      	beq.n	800791a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	699a      	ldr	r2, [r3, #24]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	18d1      	adds	r1, r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	6978      	ldr	r0, [r7, #20]
 80078e2:	f000 f8d1 	bl	8007a88 <prvInsertTimerInActiveList>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01f      	beq.n	800792c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078ec:	2300      	movs	r3, #0
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	2300      	movs	r3, #0
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	2100      	movs	r1, #0
 80078f6:	6978      	ldr	r0, [r7, #20]
 80078f8:	f7ff ff88 	bl	800780c <xTimerGenericCommand>
 80078fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d113      	bne.n	800792c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	60fb      	str	r3, [r7, #12]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	b2da      	uxtb	r2, r3
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	6978      	ldr	r0, [r7, #20]
 8007932:	4798      	blx	r3
}
 8007934:	bf00      	nop
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	24000d14 	.word	0x24000d14

08007940 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007948:	f107 0308 	add.w	r3, r7, #8
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f857 	bl	8007a00 <prvGetNextExpireTime>
 8007952:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	4619      	mov	r1, r3
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f803 	bl	8007964 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800795e:	f000 f8d5 	bl	8007b0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007962:	e7f1      	b.n	8007948 <prvTimerTask+0x8>

08007964 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800796e:	f7ff f8ff 	bl	8006b70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007972:	f107 0308 	add.w	r3, r7, #8
 8007976:	4618      	mov	r0, r3
 8007978:	f000 f866 	bl	8007a48 <prvSampleTimeNow>
 800797c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d130      	bne.n	80079e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10a      	bne.n	80079a0 <prvProcessTimerOrBlockTask+0x3c>
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	429a      	cmp	r2, r3
 8007990:	d806      	bhi.n	80079a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007992:	f7ff f8fb 	bl	8006b8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007996:	68f9      	ldr	r1, [r7, #12]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff ff85 	bl	80078a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800799e:	e024      	b.n	80079ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d008      	beq.n	80079b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079a6:	4b13      	ldr	r3, [pc, #76]	; (80079f4 <prvProcessTimerOrBlockTask+0x90>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <prvProcessTimerOrBlockTask+0x50>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <prvProcessTimerOrBlockTask+0x52>
 80079b4:	2300      	movs	r3, #0
 80079b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079b8:	4b0f      	ldr	r3, [pc, #60]	; (80079f8 <prvProcessTimerOrBlockTask+0x94>)
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	4619      	mov	r1, r3
 80079c6:	f7fe fe51 	bl	800666c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079ca:	f7ff f8df 	bl	8006b8c <xTaskResumeAll>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079d4:	4b09      	ldr	r3, [pc, #36]	; (80079fc <prvProcessTimerOrBlockTask+0x98>)
 80079d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	f3bf 8f6f 	isb	sy
}
 80079e4:	e001      	b.n	80079ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079e6:	f7ff f8d1 	bl	8006b8c <xTaskResumeAll>
}
 80079ea:	bf00      	nop
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	24000d18 	.word	0x24000d18
 80079f8:	24000d1c 	.word	0x24000d1c
 80079fc:	e000ed04 	.word	0xe000ed04

08007a00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a08:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <prvGetNextExpireTime+0x44>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <prvGetNextExpireTime+0x16>
 8007a12:	2201      	movs	r2, #1
 8007a14:	e000      	b.n	8007a18 <prvGetNextExpireTime+0x18>
 8007a16:	2200      	movs	r2, #0
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d105      	bne.n	8007a30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a24:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <prvGetNextExpireTime+0x44>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	e001      	b.n	8007a34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a34:	68fb      	ldr	r3, [r7, #12]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	24000d14 	.word	0x24000d14

08007a48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a50:	f7ff f938 	bl	8006cc4 <xTaskGetTickCount>
 8007a54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a56:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <prvSampleTimeNow+0x3c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d205      	bcs.n	8007a6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a60:	f000 f91a 	bl	8007c98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	e002      	b.n	8007a72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a72:	4a04      	ldr	r2, [pc, #16]	; (8007a84 <prvSampleTimeNow+0x3c>)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a78:	68fb      	ldr	r3, [r7, #12]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	24000d24 	.word	0x24000d24

08007a88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d812      	bhi.n	8007ad4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d302      	bcc.n	8007ac2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e01b      	b.n	8007afa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ac2:	4b10      	ldr	r3, [pc, #64]	; (8007b04 <prvInsertTimerInActiveList+0x7c>)
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7fd fed7 	bl	8005880 <vListInsert>
 8007ad2:	e012      	b.n	8007afa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d206      	bcs.n	8007aea <prvInsertTimerInActiveList+0x62>
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d302      	bcc.n	8007aea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e007      	b.n	8007afa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007aea:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <prvInsertTimerInActiveList+0x80>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3304      	adds	r3, #4
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f7fd fec3 	bl	8005880 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007afa:	697b      	ldr	r3, [r7, #20]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	24000d18 	.word	0x24000d18
 8007b08:	24000d14 	.word	0x24000d14

08007b0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08c      	sub	sp, #48	; 0x30
 8007b10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b12:	e0ae      	b.n	8007c72 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f2c0 80ab 	blt.w	8007c72 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d004      	beq.n	8007b32 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fd fee0 	bl	80058f2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b32:	1d3b      	adds	r3, r7, #4
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff ff87 	bl	8007a48 <prvSampleTimeNow>
 8007b3a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b09      	cmp	r3, #9
 8007b40:	f200 8096 	bhi.w	8007c70 <prvProcessReceivedCommands+0x164>
 8007b44:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <prvProcessReceivedCommands+0x40>)
 8007b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4a:	bf00      	nop
 8007b4c:	08007b75 	.word	0x08007b75
 8007b50:	08007b75 	.word	0x08007b75
 8007b54:	08007b75 	.word	0x08007b75
 8007b58:	08007be9 	.word	0x08007be9
 8007b5c:	08007bfd 	.word	0x08007bfd
 8007b60:	08007c47 	.word	0x08007c47
 8007b64:	08007b75 	.word	0x08007b75
 8007b68:	08007b75 	.word	0x08007b75
 8007b6c:	08007be9 	.word	0x08007be9
 8007b70:	08007bfd 	.word	0x08007bfd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	18d1      	adds	r1, r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6a3a      	ldr	r2, [r7, #32]
 8007b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b94:	f7ff ff78 	bl	8007a88 <prvInsertTimerInActiveList>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d069      	beq.n	8007c72 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ba4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d05e      	beq.n	8007c72 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	441a      	add	r2, r3
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bc6:	f7ff fe21 	bl	800780c <xTimerGenericCommand>
 8007bca:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d14f      	bne.n	8007c72 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	61bb      	str	r3, [r7, #24]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bee:	f023 0301 	bic.w	r3, r3, #1
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007bfa:	e03a      	b.n	8007c72 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c02:	f043 0301 	orr.w	r3, r3, #1
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	617b      	str	r3, [r7, #20]
}
 8007c2e:	bf00      	nop
 8007c30:	e7fe      	b.n	8007c30 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	18d1      	adds	r1, r2, r3
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	6a3a      	ldr	r2, [r7, #32]
 8007c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c40:	f7ff ff22 	bl	8007a88 <prvInsertTimerInActiveList>
					break;
 8007c44:	e015      	b.n	8007c72 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d103      	bne.n	8007c5c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8007c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c56:	f000 fbdb 	bl	8008410 <vPortFree>
 8007c5a:	e00a      	b.n	8007c72 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c62:	f023 0301 	bic.w	r3, r3, #1
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c6e:	e000      	b.n	8007c72 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8007c70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c72:	4b08      	ldr	r3, [pc, #32]	; (8007c94 <prvProcessReceivedCommands+0x188>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f107 0108 	add.w	r1, r7, #8
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe f969 	bl	8005f54 <xQueueReceive>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f47f af45 	bne.w	8007b14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	3728      	adds	r7, #40	; 0x28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	24000d1c 	.word	0x24000d1c

08007c98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c9e:	e048      	b.n	8007d32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ca0:	4b2d      	ldr	r3, [pc, #180]	; (8007d58 <prvSwitchTimerLists+0xc0>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007caa:	4b2b      	ldr	r3, [pc, #172]	; (8007d58 <prvSwitchTimerLists+0xc0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fd fe1a 	bl	80058f2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d02e      	beq.n	8007d32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4413      	add	r3, r2
 8007cdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d90e      	bls.n	8007d04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cf2:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <prvSwitchTimerLists+0xc0>)
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	f7fd fdbf 	bl	8005880 <vListInsert>
 8007d02:	e016      	b.n	8007d32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d04:	2300      	movs	r3, #0
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7ff fd7c 	bl	800780c <xTimerGenericCommand>
 8007d14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	603b      	str	r3, [r7, #0]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <prvSwitchTimerLists+0xc0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1b1      	bne.n	8007ca0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <prvSwitchTimerLists+0xc0>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d42:	4b06      	ldr	r3, [pc, #24]	; (8007d5c <prvSwitchTimerLists+0xc4>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a04      	ldr	r2, [pc, #16]	; (8007d58 <prvSwitchTimerLists+0xc0>)
 8007d48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d4a:	4a04      	ldr	r2, [pc, #16]	; (8007d5c <prvSwitchTimerLists+0xc4>)
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	6013      	str	r3, [r2, #0]
}
 8007d50:	bf00      	nop
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	24000d14 	.word	0x24000d14
 8007d5c:	24000d18 	.word	0x24000d18

08007d60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d66:	f000 f965 	bl	8008034 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d6a:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <prvCheckForValidListAndQueue+0x60>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d120      	bne.n	8007db4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d72:	4814      	ldr	r0, [pc, #80]	; (8007dc4 <prvCheckForValidListAndQueue+0x64>)
 8007d74:	f7fd fd33 	bl	80057de <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d78:	4813      	ldr	r0, [pc, #76]	; (8007dc8 <prvCheckForValidListAndQueue+0x68>)
 8007d7a:	f7fd fd30 	bl	80057de <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <prvCheckForValidListAndQueue+0x6c>)
 8007d80:	4a10      	ldr	r2, [pc, #64]	; (8007dc4 <prvCheckForValidListAndQueue+0x64>)
 8007d82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d84:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <prvCheckForValidListAndQueue+0x70>)
 8007d86:	4a10      	ldr	r2, [pc, #64]	; (8007dc8 <prvCheckForValidListAndQueue+0x68>)
 8007d88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <prvCheckForValidListAndQueue+0x74>)
 8007d90:	4a11      	ldr	r2, [pc, #68]	; (8007dd8 <prvCheckForValidListAndQueue+0x78>)
 8007d92:	210c      	movs	r1, #12
 8007d94:	200a      	movs	r0, #10
 8007d96:	f7fd fe3f 	bl	8005a18 <xQueueGenericCreateStatic>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	4a08      	ldr	r2, [pc, #32]	; (8007dc0 <prvCheckForValidListAndQueue+0x60>)
 8007d9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <prvCheckForValidListAndQueue+0x60>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <prvCheckForValidListAndQueue+0x60>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	490b      	ldr	r1, [pc, #44]	; (8007ddc <prvCheckForValidListAndQueue+0x7c>)
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe fc08 	bl	80065c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007db4:	f000 f96e 	bl	8008094 <vPortExitCritical>
}
 8007db8:	bf00      	nop
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	24000d1c 	.word	0x24000d1c
 8007dc4:	24000cec 	.word	0x24000cec
 8007dc8:	24000d00 	.word	0x24000d00
 8007dcc:	24000d14 	.word	0x24000d14
 8007dd0:	24000d18 	.word	0x24000d18
 8007dd4:	24000da0 	.word	0x24000da0
 8007dd8:	24000d28 	.word	0x24000d28
 8007ddc:	08009f6c 	.word	0x08009f6c

08007de0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3b04      	subs	r3, #4
 8007df0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3b04      	subs	r3, #4
 8007dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f023 0201 	bic.w	r2, r3, #1
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3b04      	subs	r3, #4
 8007e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e10:	4a0c      	ldr	r2, [pc, #48]	; (8007e44 <pxPortInitialiseStack+0x64>)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3b14      	subs	r3, #20
 8007e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3b04      	subs	r3, #4
 8007e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f06f 0202 	mvn.w	r2, #2
 8007e2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	3b20      	subs	r3, #32
 8007e34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e36:	68fb      	ldr	r3, [r7, #12]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	08007e49 	.word	0x08007e49

08007e48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e52:	4b12      	ldr	r3, [pc, #72]	; (8007e9c <prvTaskExitError+0x54>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5a:	d00a      	beq.n	8007e72 <prvTaskExitError+0x2a>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	60fb      	str	r3, [r7, #12]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <prvTaskExitError+0x28>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	60bb      	str	r3, [r7, #8]
}
 8007e84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e86:	bf00      	nop
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0fc      	beq.n	8007e88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e8e:	bf00      	nop
 8007e90:	bf00      	nop
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	24000010 	.word	0x24000010

08007ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <pxCurrentTCBConst2>)
 8007ea2:	6819      	ldr	r1, [r3, #0]
 8007ea4:	6808      	ldr	r0, [r1, #0]
 8007ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eaa:	f380 8809 	msr	PSP, r0
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8811 	msr	BASEPRI, r0
 8007eba:	4770      	bx	lr
 8007ebc:	f3af 8000 	nop.w

08007ec0 <pxCurrentTCBConst2>:
 8007ec0:	24000bc0 	.word	0x24000bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop

08007ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ec8:	4808      	ldr	r0, [pc, #32]	; (8007eec <prvPortStartFirstTask+0x24>)
 8007eca:	6800      	ldr	r0, [r0, #0]
 8007ecc:	6800      	ldr	r0, [r0, #0]
 8007ece:	f380 8808 	msr	MSP, r0
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	f380 8814 	msr	CONTROL, r0
 8007eda:	b662      	cpsie	i
 8007edc:	b661      	cpsie	f
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	df00      	svc	0
 8007ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eea:	bf00      	nop
 8007eec:	e000ed08 	.word	0xe000ed08

08007ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ef6:	4b46      	ldr	r3, [pc, #280]	; (8008010 <xPortStartScheduler+0x120>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a46      	ldr	r2, [pc, #280]	; (8008014 <xPortStartScheduler+0x124>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d10a      	bne.n	8007f16 <xPortStartScheduler+0x26>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	613b      	str	r3, [r7, #16]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f16:	4b3e      	ldr	r3, [pc, #248]	; (8008010 <xPortStartScheduler+0x120>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a3f      	ldr	r2, [pc, #252]	; (8008018 <xPortStartScheduler+0x128>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d10a      	bne.n	8007f36 <xPortStartScheduler+0x46>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60fb      	str	r3, [r7, #12]
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f36:	4b39      	ldr	r3, [pc, #228]	; (800801c <xPortStartScheduler+0x12c>)
 8007f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	22ff      	movs	r2, #255	; 0xff
 8007f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	4b31      	ldr	r3, [pc, #196]	; (8008020 <xPortStartScheduler+0x130>)
 8007f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f5e:	4b31      	ldr	r3, [pc, #196]	; (8008024 <xPortStartScheduler+0x134>)
 8007f60:	2207      	movs	r2, #7
 8007f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f64:	e009      	b.n	8007f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f66:	4b2f      	ldr	r3, [pc, #188]	; (8008024 <xPortStartScheduler+0x134>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	4a2d      	ldr	r2, [pc, #180]	; (8008024 <xPortStartScheduler+0x134>)
 8007f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f82:	2b80      	cmp	r3, #128	; 0x80
 8007f84:	d0ef      	beq.n	8007f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f86:	4b27      	ldr	r3, [pc, #156]	; (8008024 <xPortStartScheduler+0x134>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f1c3 0307 	rsb	r3, r3, #7
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d00a      	beq.n	8007fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	60bb      	str	r3, [r7, #8]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fa8:	4b1e      	ldr	r3, [pc, #120]	; (8008024 <xPortStartScheduler+0x134>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	4a1d      	ldr	r2, [pc, #116]	; (8008024 <xPortStartScheduler+0x134>)
 8007fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fb2:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <xPortStartScheduler+0x134>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fba:	4a1a      	ldr	r2, [pc, #104]	; (8008024 <xPortStartScheduler+0x134>)
 8007fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fc6:	4b18      	ldr	r3, [pc, #96]	; (8008028 <xPortStartScheduler+0x138>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a17      	ldr	r2, [pc, #92]	; (8008028 <xPortStartScheduler+0x138>)
 8007fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fd2:	4b15      	ldr	r3, [pc, #84]	; (8008028 <xPortStartScheduler+0x138>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a14      	ldr	r2, [pc, #80]	; (8008028 <xPortStartScheduler+0x138>)
 8007fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fde:	f000 f8dd 	bl	800819c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fe2:	4b12      	ldr	r3, [pc, #72]	; (800802c <xPortStartScheduler+0x13c>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fe8:	f000 f8fc 	bl	80081e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fec:	4b10      	ldr	r3, [pc, #64]	; (8008030 <xPortStartScheduler+0x140>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <xPortStartScheduler+0x140>)
 8007ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ff8:	f7ff ff66 	bl	8007ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ffc:	f7fe ff2a 	bl	8006e54 <vTaskSwitchContext>
	prvTaskExitError();
 8008000:	f7ff ff22 	bl	8007e48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	e000ed00 	.word	0xe000ed00
 8008014:	410fc271 	.word	0x410fc271
 8008018:	410fc270 	.word	0x410fc270
 800801c:	e000e400 	.word	0xe000e400
 8008020:	24000de8 	.word	0x24000de8
 8008024:	24000dec 	.word	0x24000dec
 8008028:	e000ed20 	.word	0xe000ed20
 800802c:	24000010 	.word	0x24000010
 8008030:	e000ef34 	.word	0xe000ef34

08008034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	607b      	str	r3, [r7, #4]
}
 800804c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800804e:	4b0f      	ldr	r3, [pc, #60]	; (800808c <vPortEnterCritical+0x58>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	4a0d      	ldr	r2, [pc, #52]	; (800808c <vPortEnterCritical+0x58>)
 8008056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008058:	4b0c      	ldr	r3, [pc, #48]	; (800808c <vPortEnterCritical+0x58>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d10f      	bne.n	8008080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008060:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <vPortEnterCritical+0x5c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <vPortEnterCritical+0x4c>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	603b      	str	r3, [r7, #0]
}
 800807c:	bf00      	nop
 800807e:	e7fe      	b.n	800807e <vPortEnterCritical+0x4a>
	}
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	24000010 	.word	0x24000010
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800809a:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <vPortExitCritical+0x50>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <vPortExitCritical+0x24>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	607b      	str	r3, [r7, #4]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <vPortExitCritical+0x50>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3b01      	subs	r3, #1
 80080be:	4a09      	ldr	r2, [pc, #36]	; (80080e4 <vPortExitCritical+0x50>)
 80080c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080c2:	4b08      	ldr	r3, [pc, #32]	; (80080e4 <vPortExitCritical+0x50>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <vPortExitCritical+0x42>
 80080ca:	2300      	movs	r3, #0
 80080cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	f383 8811 	msr	BASEPRI, r3
}
 80080d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	24000010 	.word	0x24000010
	...

080080f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080f0:	f3ef 8009 	mrs	r0, PSP
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	4b15      	ldr	r3, [pc, #84]	; (8008150 <pxCurrentTCBConst>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	f01e 0f10 	tst.w	lr, #16
 8008100:	bf08      	it	eq
 8008102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	6010      	str	r0, [r2, #0]
 800810c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008114:	f380 8811 	msr	BASEPRI, r0
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f7fe fe98 	bl	8006e54 <vTaskSwitchContext>
 8008124:	f04f 0000 	mov.w	r0, #0
 8008128:	f380 8811 	msr	BASEPRI, r0
 800812c:	bc09      	pop	{r0, r3}
 800812e:	6819      	ldr	r1, [r3, #0]
 8008130:	6808      	ldr	r0, [r1, #0]
 8008132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008136:	f01e 0f10 	tst.w	lr, #16
 800813a:	bf08      	it	eq
 800813c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008140:	f380 8809 	msr	PSP, r0
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	f3af 8000 	nop.w

08008150 <pxCurrentTCBConst>:
 8008150:	24000bc0 	.word	0x24000bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop

08008158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
}
 8008170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008172:	f7fe fdb7 	bl	8006ce4 <xTaskIncrementTick>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <SysTick_Handler+0x40>)
 800817e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	2300      	movs	r3, #0
 8008186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f383 8811 	msr	BASEPRI, r3
}
 800818e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	e000ed04 	.word	0xe000ed04

0800819c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081a0:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <vPortSetupTimerInterrupt+0x34>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081a6:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <vPortSetupTimerInterrupt+0x38>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081ac:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <vPortSetupTimerInterrupt+0x3c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a0a      	ldr	r2, [pc, #40]	; (80081dc <vPortSetupTimerInterrupt+0x40>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	099b      	lsrs	r3, r3, #6
 80081b8:	4a09      	ldr	r2, [pc, #36]	; (80081e0 <vPortSetupTimerInterrupt+0x44>)
 80081ba:	3b01      	subs	r3, #1
 80081bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081be:	4b04      	ldr	r3, [pc, #16]	; (80081d0 <vPortSetupTimerInterrupt+0x34>)
 80081c0:	2207      	movs	r2, #7
 80081c2:	601a      	str	r2, [r3, #0]
}
 80081c4:	bf00      	nop
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	e000e010 	.word	0xe000e010
 80081d4:	e000e018 	.word	0xe000e018
 80081d8:	24000000 	.word	0x24000000
 80081dc:	10624dd3 	.word	0x10624dd3
 80081e0:	e000e014 	.word	0xe000e014

080081e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081f4 <vPortEnableVFP+0x10>
 80081e8:	6801      	ldr	r1, [r0, #0]
 80081ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081ee:	6001      	str	r1, [r0, #0]
 80081f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081f2:	bf00      	nop
 80081f4:	e000ed88 	.word	0xe000ed88

080081f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081fe:	f3ef 8305 	mrs	r3, IPSR
 8008202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b0f      	cmp	r3, #15
 8008208:	d914      	bls.n	8008234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800820a:	4a17      	ldr	r2, [pc, #92]	; (8008268 <vPortValidateInterruptPriority+0x70>)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008214:	4b15      	ldr	r3, [pc, #84]	; (800826c <vPortValidateInterruptPriority+0x74>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	7afa      	ldrb	r2, [r7, #11]
 800821a:	429a      	cmp	r2, r3
 800821c:	d20a      	bcs.n	8008234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	607b      	str	r3, [r7, #4]
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008234:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <vPortValidateInterruptPriority+0x78>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800823c:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <vPortValidateInterruptPriority+0x7c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	429a      	cmp	r2, r3
 8008242:	d90a      	bls.n	800825a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	603b      	str	r3, [r7, #0]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <vPortValidateInterruptPriority+0x60>
	}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	e000e3f0 	.word	0xe000e3f0
 800826c:	24000de8 	.word	0x24000de8
 8008270:	e000ed0c 	.word	0xe000ed0c
 8008274:	24000dec 	.word	0x24000dec

08008278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08a      	sub	sp, #40	; 0x28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008284:	f7fe fc74 	bl	8006b70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008288:	4b5b      	ldr	r3, [pc, #364]	; (80083f8 <pvPortMalloc+0x180>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008290:	f000 f938 	bl	8008504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008294:	4b59      	ldr	r3, [pc, #356]	; (80083fc <pvPortMalloc+0x184>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4013      	ands	r3, r2
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 8093 	bne.w	80083c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01d      	beq.n	80082e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082a8:	2208      	movs	r2, #8
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4413      	add	r3, r2
 80082ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d014      	beq.n	80082e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f023 0307 	bic.w	r3, r3, #7
 80082c0:	3308      	adds	r3, #8
 80082c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <pvPortMalloc+0x6c>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	617b      	str	r3, [r7, #20]
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d06e      	beq.n	80083c8 <pvPortMalloc+0x150>
 80082ea:	4b45      	ldr	r3, [pc, #276]	; (8008400 <pvPortMalloc+0x188>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d869      	bhi.n	80083c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082f4:	4b43      	ldr	r3, [pc, #268]	; (8008404 <pvPortMalloc+0x18c>)
 80082f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082f8:	4b42      	ldr	r3, [pc, #264]	; (8008404 <pvPortMalloc+0x18c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082fe:	e004      	b.n	800830a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	429a      	cmp	r2, r3
 8008312:	d903      	bls.n	800831c <pvPortMalloc+0xa4>
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1f1      	bne.n	8008300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800831c:	4b36      	ldr	r3, [pc, #216]	; (80083f8 <pvPortMalloc+0x180>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008322:	429a      	cmp	r2, r3
 8008324:	d050      	beq.n	80083c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2208      	movs	r2, #8
 800832c:	4413      	add	r3, r2
 800832e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	2308      	movs	r3, #8
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	429a      	cmp	r2, r3
 8008346:	d91f      	bls.n	8008388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	f003 0307 	and.w	r3, r3, #7
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <pvPortMalloc+0xf8>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	613b      	str	r3, [r7, #16]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	1ad2      	subs	r2, r2, r3
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008382:	69b8      	ldr	r0, [r7, #24]
 8008384:	f000 f920 	bl	80085c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008388:	4b1d      	ldr	r3, [pc, #116]	; (8008400 <pvPortMalloc+0x188>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	4a1b      	ldr	r2, [pc, #108]	; (8008400 <pvPortMalloc+0x188>)
 8008394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008396:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <pvPortMalloc+0x188>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b1b      	ldr	r3, [pc, #108]	; (8008408 <pvPortMalloc+0x190>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d203      	bcs.n	80083aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083a2:	4b17      	ldr	r3, [pc, #92]	; (8008400 <pvPortMalloc+0x188>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a18      	ldr	r2, [pc, #96]	; (8008408 <pvPortMalloc+0x190>)
 80083a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <pvPortMalloc+0x184>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083be:	4b13      	ldr	r3, [pc, #76]	; (800840c <pvPortMalloc+0x194>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3301      	adds	r3, #1
 80083c4:	4a11      	ldr	r2, [pc, #68]	; (800840c <pvPortMalloc+0x194>)
 80083c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083c8:	f7fe fbe0 	bl	8006b8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <pvPortMalloc+0x174>
	__asm volatile
 80083d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	60fb      	str	r3, [r7, #12]
}
 80083e8:	bf00      	nop
 80083ea:	e7fe      	b.n	80083ea <pvPortMalloc+0x172>
	return pvReturn;
 80083ec:	69fb      	ldr	r3, [r7, #28]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3728      	adds	r7, #40	; 0x28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	240107f8 	.word	0x240107f8
 80083fc:	2401080c 	.word	0x2401080c
 8008400:	240107fc 	.word	0x240107fc
 8008404:	240107f0 	.word	0x240107f0
 8008408:	24010800 	.word	0x24010800
 800840c:	24010804 	.word	0x24010804

08008410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d04d      	beq.n	80084be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008422:	2308      	movs	r3, #8
 8008424:	425b      	negs	r3, r3
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	4413      	add	r3, r2
 800842a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <vPortFree+0xb8>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4013      	ands	r3, r2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <vPortFree+0x44>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	60fb      	str	r3, [r7, #12]
}
 8008450:	bf00      	nop
 8008452:	e7fe      	b.n	8008452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00a      	beq.n	8008472 <vPortFree+0x62>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60bb      	str	r3, [r7, #8]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <vPortFree+0xb8>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4013      	ands	r3, r2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01e      	beq.n	80084be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d11a      	bne.n	80084be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <vPortFree+0xb8>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	43db      	mvns	r3, r3
 8008492:	401a      	ands	r2, r3
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008498:	f7fe fb6a 	bl	8006b70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <vPortFree+0xbc>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4413      	add	r3, r2
 80084a6:	4a09      	ldr	r2, [pc, #36]	; (80084cc <vPortFree+0xbc>)
 80084a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084aa:	6938      	ldr	r0, [r7, #16]
 80084ac:	f000 f88c 	bl	80085c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084b0:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <vPortFree+0xc0>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3301      	adds	r3, #1
 80084b6:	4a06      	ldr	r2, [pc, #24]	; (80084d0 <vPortFree+0xc0>)
 80084b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084ba:	f7fe fb67 	bl	8006b8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084be:	bf00      	nop
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	2401080c 	.word	0x2401080c
 80084cc:	240107fc 	.word	0x240107fc
 80084d0:	24010808 	.word	0x24010808

080084d4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80084d8:	4b03      	ldr	r3, [pc, #12]	; (80084e8 <xPortGetFreeHeapSize+0x14>)
 80084da:	681b      	ldr	r3, [r3, #0]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	240107fc 	.word	0x240107fc

080084ec <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80084f0:	4b03      	ldr	r3, [pc, #12]	; (8008500 <xPortGetMinimumEverFreeHeapSize+0x14>)
 80084f2:	681b      	ldr	r3, [r3, #0]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	24010800 	.word	0x24010800

08008504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800850a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800850e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008510:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <prvHeapInit+0xac>)
 8008512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00c      	beq.n	8008538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3307      	adds	r3, #7
 8008522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	4a1f      	ldr	r2, [pc, #124]	; (80085b0 <prvHeapInit+0xac>)
 8008534:	4413      	add	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800853c:	4a1d      	ldr	r2, [pc, #116]	; (80085b4 <prvHeapInit+0xb0>)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008542:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <prvHeapInit+0xb0>)
 8008544:	2200      	movs	r2, #0
 8008546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4413      	add	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008550:	2208      	movs	r2, #8
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0307 	bic.w	r3, r3, #7
 800855e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <prvHeapInit+0xb4>)
 8008564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <prvHeapInit+0xb4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800856e:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <prvHeapInit+0xb4>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008584:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <prvHeapInit+0xb4>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	4a0a      	ldr	r2, [pc, #40]	; (80085bc <prvHeapInit+0xb8>)
 8008592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	4a09      	ldr	r2, [pc, #36]	; (80085c0 <prvHeapInit+0xbc>)
 800859a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800859c:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <prvHeapInit+0xc0>)
 800859e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085a2:	601a      	str	r2, [r3, #0]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	24000df0 	.word	0x24000df0
 80085b4:	240107f0 	.word	0x240107f0
 80085b8:	240107f8 	.word	0x240107f8
 80085bc:	24010800 	.word	0x24010800
 80085c0:	240107fc 	.word	0x240107fc
 80085c4:	2401080c 	.word	0x2401080c

080085c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085d0:	4b28      	ldr	r3, [pc, #160]	; (8008674 <prvInsertBlockIntoFreeList+0xac>)
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e002      	b.n	80085dc <prvInsertBlockIntoFreeList+0x14>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d8f7      	bhi.n	80085d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d108      	bne.n	800860a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	441a      	add	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	441a      	add	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d118      	bne.n	8008650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	4b15      	ldr	r3, [pc, #84]	; (8008678 <prvInsertBlockIntoFreeList+0xb0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d00d      	beq.n	8008646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	441a      	add	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	e008      	b.n	8008658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008646:	4b0c      	ldr	r3, [pc, #48]	; (8008678 <prvInsertBlockIntoFreeList+0xb0>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e003      	b.n	8008658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	429a      	cmp	r2, r3
 800865e:	d002      	beq.n	8008666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	240107f0 	.word	0x240107f0
 8008678:	240107f8 	.word	0x240107f8

0800867c <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
    return memory_order(int(__m) & int(__mod));
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4013      	ands	r3, r2
  }
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <_Z11cube_mallocm>:
/**
 * @brief Malloc inline function, wraps malloc for multi-platform support, asserts successful allocation
 * @param size Size of data to malloc in bytes
 * @return Returns the pointer to the allocated data
*/
inline uint8_t* cube_malloc(uint32_t size) {
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
    uint8_t* ret = (uint8_t*)malloc(size);
#else
    uint8_t* ret = (uint8_t*)pvPortMalloc(size);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fde9 	bl	8008278 <pvPortMalloc>
 80086a6:	60f8      	str	r0, [r7, #12]
#endif
    CUBE_ASSERT(ret, "cube_malloc failed");
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d105      	bne.n	80086ba <_Z11cube_mallocm+0x22>
 80086ae:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <_Z11cube_mallocm+0x2c>)
 80086b0:	2247      	movs	r2, #71	; 0x47
 80086b2:	4905      	ldr	r1, [pc, #20]	; (80086c8 <_Z11cube_mallocm+0x30>)
 80086b4:	2000      	movs	r0, #0
 80086b6:	f000 faa1 	bl	8008bfc <_Z17cube_assert_debugbPKctS0_z>
    return ret;
 80086ba:	68fb      	ldr	r3, [r7, #12]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	08009f74 	.word	0x08009f74
 80086c8:	08009f88 	.word	0x08009f88

080086cc <_Z9cube_freePv>:

/**
 * @brief Free inline function, wraps free for multi-platform support
 * @param ptr Pointer to the data to free
 */
inline void cube_free(void* ptr) {
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
    free(ptr);
#else
    vPortFree(ptr);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff fe9b 	bl	8008410 <vPortFree>
#endif
}
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <_ZN7CommandC1Ev>:
/* Function Implementation ------------------------------------------------------------------*/

/**
 * @brief Default constructor for Command
*/
Command::Command(void)
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
{
    command = COMMAND_NONE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
    taskCommand = 0;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	729a      	strb	r2, [r3, #10]
}
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4618      	mov	r0, r3
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <_ZN7CommandC1E15GLOBAL_COMMANDSt>:
/**
 * @brief Constructor with GLOBAL_COMMANDS and taskCommand params
 * @param command GLOBAL_COMMANDS param to initiate command with
 * @param taskCommand taskCommand param to initiate command with
*/
Command::Command(GLOBAL_COMMANDS command, uint16_t taskCommand)
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	460b      	mov	r3, r1
 8008720:	70fb      	strb	r3, [r7, #3]
 8008722:	4613      	mov	r3, r2
 8008724:	803b      	strh	r3, [r7, #0]
{
    this->command = command;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	701a      	strb	r2, [r3, #0]
    this->taskCommand = taskCommand;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	883a      	ldrh	r2, [r7, #0]
 8008730:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	729a      	strb	r2, [r3, #10]
}
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4618      	mov	r0, r3
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
	...

08008754 <_ZN7Command12AllocateDataEt>:
 * @brief Dynamically allocates memory for the command with the given data size
 * @param dataSize Size of array to allocate
 * @return Pointer to data on success, nullptr on failure (mem already allocated)
*/
uint8_t* Command::AllocateData(uint16_t dataSize)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	807b      	strh	r3, [r7, #2]
    // If we don't have anything allocated, allocate and return success
    if (this->data == nullptr && !bShouldFreeData) {
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d126      	bne.n	80087b6 <_ZN7Command12AllocateDataEt+0x62>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7a9b      	ldrb	r3, [r3, #10]
 800876c:	f083 0301 	eor.w	r3, r3, #1
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d01f      	beq.n	80087b6 <_ZN7Command12AllocateDataEt+0x62>
        this->data = cube_malloc(dataSize);
 8008776:	887b      	ldrh	r3, [r7, #2]
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff ff8d 	bl	8008698 <_Z11cube_mallocm>
 800877e:	4602      	mov	r2, r0
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	605a      	str	r2, [r3, #4]
        this->bShouldFreeData = true;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	729a      	strb	r2, [r3, #10]
        this->dataSize = dataSize;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	887a      	ldrh	r2, [r7, #2]
 800878e:	811a      	strh	r2, [r3, #8]
        statAllocationCounter += 1;
 8008790:	2101      	movs	r1, #1
 8008792:	480b      	ldr	r0, [pc, #44]	; (80087c0 <_ZN7Command12AllocateDataEt+0x6c>)
 8008794:	f000 f872 	bl	800887c <_ZNSt13__atomic_baseItEpLEt>

        //TODO: May want to print out whenever we have an imbalance in statAllocationCounter by more than ~5 or so.
        CUBE_ASSERT(statAllocationCounter < MAX_NUMBER_OF_COMMAND_ALLOCATIONS);
 8008798:	4809      	ldr	r0, [pc, #36]	; (80087c0 <_ZN7Command12AllocateDataEt+0x6c>)
 800879a:	f000 f889 	bl	80088b0 <_ZNKSt13__atomic_baseItEcvtEv>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b63      	cmp	r3, #99	; 0x63
 80087a2:	d905      	bls.n	80087b0 <_ZN7Command12AllocateDataEt+0x5c>
 80087a4:	2300      	movs	r3, #0
 80087a6:	2267      	movs	r2, #103	; 0x67
 80087a8:	4906      	ldr	r1, [pc, #24]	; (80087c4 <_ZN7Command12AllocateDataEt+0x70>)
 80087aa:	2000      	movs	r0, #0
 80087ac:	f000 fa26 	bl	8008bfc <_Z17cube_assert_debugbPKctS0_z>
        return this->data;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	e000      	b.n	80087b8 <_ZN7Command12AllocateDataEt+0x64>
    }
    return nullptr;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	24010810 	.word	0x24010810
 80087c4:	08009fd8 	.word	0x08009fd8

080087c8 <_ZN7Command17CopyDataToCommandEPht>:

/**
 * @brief Copies data from the source array into memory owned by Command and sets the internal data pointer to the new array
 */
bool Command::CopyDataToCommand(uint8_t* dataSrc, uint16_t size)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	80fb      	strh	r3, [r7, #6]
    // If we successfully allocate, copy the data and return success
    if(this->AllocateData(size)
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	4619      	mov	r1, r3
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f7ff ffba 	bl	8008754 <_ZN7Command12AllocateDataEt>
 80087e0:	4603      	mov	r3, r0
        && this->data != nullptr) {
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d005      	beq.n	80087f2 <_ZN7Command17CopyDataToCommandEPht+0x2a>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <_ZN7Command17CopyDataToCommandEPht+0x2a>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <_ZN7Command17CopyDataToCommandEPht+0x2c>
 80087f2:	2300      	movs	r3, #0
    if(this->AllocateData(size)
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d008      	beq.n	800880a <_ZN7Command17CopyDataToCommandEPht+0x42>
        memcpy(this->data, dataSrc, size);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	88fa      	ldrh	r2, [r7, #6]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 fe2b 	bl	800945c <memcpy>
        return true;
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <_ZN7Command17CopyDataToCommandEPht+0x44>
    }

    return false;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <_ZN7Command5ResetEv>:

/**
 * @brief Resets command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high
*/
void Command::Reset()
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
    if(bShouldFreeData && data != nullptr) {
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	7a9b      	ldrb	r3, [r3, #10]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d012      	beq.n	800884a <_ZN7Command5ResetEv+0x36>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00e      	beq.n	800884a <_ZN7Command5ResetEv+0x36>
        cube_free(data);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff ff4b 	bl	80086cc <_Z9cube_freePv>
        statAllocationCounter -= 1;
 8008836:	2101      	movs	r1, #1
 8008838:	4806      	ldr	r0, [pc, #24]	; (8008854 <_ZN7Command5ResetEv+0x40>)
 800883a:	f000 f853 	bl	80088e4 <_ZNSt13__atomic_baseItEmIEt>
		data = nullptr;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	605a      	str	r2, [r3, #4]
        bShouldFreeData = false;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	729a      	strb	r2, [r3, #10]
    }
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	24010810 	.word	0x24010810

08008858 <_ZNK7Command11GetDataSizeEv>:
/**
 * @brief Getter for Data size
 * @return data size if data is allocated, otherwise returns 0 
*/
uint16_t Command::GetDataSize() const
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
    if (data == nullptr)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <_ZNK7Command11GetDataSizeEv+0x14>
        return 0;
 8008868:	2300      	movs	r3, #0
 800886a:	e001      	b.n	8008870 <_ZNK7Command11GetDataSizeEv+0x18>
    return dataSize;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	891b      	ldrh	r3, [r3, #8]
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <_ZNSt13__atomic_baseItEpLEt>:
      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) noexcept
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	807b      	strh	r3, [r7, #2]
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	887a      	ldrh	r2, [r7, #2]
 800888c:	f3bf 8f5b 	dmb	ish
 8008890:	e8d3 1f5f 	ldrexh	r1, [r3]
 8008894:	4411      	add	r1, r2
 8008896:	e8c3 1f50 	strexh	r0, r1, [r3]
 800889a:	2800      	cmp	r0, #0
 800889c:	d1f8      	bne.n	8008890 <_ZNSt13__atomic_baseItEpLEt+0x14>
 800889e:	f3bf 8f5b 	dmb	ish
 80088a2:	b28b      	uxth	r3, r1
 80088a4:	4618      	mov	r0, r3
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <_ZNKSt13__atomic_baseItEcvtEv>:
      operator __int_type() const noexcept
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	2305      	movs	r3, #5
 80088be:	613b      	str	r3, [r7, #16]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 80088c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80088c4:	6938      	ldr	r0, [r7, #16]
 80088c6:	f7ff fed9 	bl	800867c <_ZStanSt12memory_orderSt23__memory_order_modifier>
 80088ca:	60f8      	str	r0, [r7, #12]
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f3bf 8f5b 	dmb	ish
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	f3bf 8f5b 	dmb	ish
 80088d8:	b29b      	uxth	r3, r3
 80088da:	bf00      	nop
      { return load(); }
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <_ZNSt13__atomic_baseItEmIEt>:
      operator-=(__int_type __i) noexcept
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	807b      	strh	r3, [r7, #2]
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	887a      	ldrh	r2, [r7, #2]
 80088f4:	f3bf 8f5b 	dmb	ish
 80088f8:	e8d3 1f5f 	ldrexh	r1, [r3]
 80088fc:	eba1 0102 	sub.w	r1, r1, r2
 8008900:	e8c3 1f50 	strexh	r0, r1, [r3]
 8008904:	2800      	cmp	r0, #0
 8008906:	d1f7      	bne.n	80088f8 <_ZNSt13__atomic_baseItEmIEt+0x14>
 8008908:	f3bf 8f5b 	dmb	ish
 800890c:	b28b      	uxth	r3, r1
 800890e:	4618      	mov	r0, r3
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
	...

0800891c <_ZN5MutexC1Ev>:
#include "semphr.h"

/**
 * @brief Constructor for the Mutex class.
 */
Mutex::Mutex()
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
{
    rtSemaphoreHandle = xSemaphoreCreateMutex();
 8008924:	2001      	movs	r0, #1
 8008926:	f7fd f962 	bl	8005bee <xQueueCreateMutex>
 800892a:	4602      	mov	r2, r0
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]

    CUBE_ASSERT(rtSemaphoreHandle != NULL, "Semaphore creation failed.");
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d105      	bne.n	8008944 <_ZN5MutexC1Ev+0x28>
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <_ZN5MutexC1Ev+0x34>)
 800893a:	2215      	movs	r2, #21
 800893c:	4905      	ldr	r1, [pc, #20]	; (8008954 <_ZN5MutexC1Ev+0x38>)
 800893e:	2000      	movs	r0, #0
 8008940:	f000 f95c 	bl	8008bfc <_Z17cube_assert_debugbPKctS0_z>
}
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	08009ff4 	.word	0x08009ff4
 8008954:	0800a010 	.word	0x0800a010

08008958 <_ZN5MutexD1Ev>:


/**
 * @brief Destructor for the Mutex class.
 */
Mutex::~Mutex()
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
{
    vSemaphoreDelete(rtSemaphoreHandle);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4618      	mov	r0, r3
 8008966:	f7fd fce1 	bl	800632c <vQueueDelete>
}
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <_ZN5Mutex4LockEm>:
 * @brief This function is used to lock the Mutex.
 * @param timeout_ms The time to wait for the Mutex before it fails. If timeout_ms is not provided, the function will wait indefinitely.
 * @return True on success, false on failure.
*/
bool Mutex::Lock(uint32_t timeout_ms)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
    return xSemaphoreTake(rtSemaphoreHandle, MS_TO_TICKS(timeout_ms)) == pdTRUE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	4618      	mov	r0, r3
 8008986:	f7fd fbc5 	bl	8006114 <xQueueSemaphoreTake>
 800898a:	4603      	mov	r3, r0
 800898c:	2b01      	cmp	r3, #1
 800898e:	bf0c      	ite	eq
 8008990:	2301      	moveq	r3, #1
 8008992:	2300      	movne	r3, #0
 8008994:	b2db      	uxtb	r3, r3
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <_ZN5Mutex6UnlockEv>:
/**
 * @brief This function will attempt to unlock the mutex
 * @return True on success (mutex unlocked) false in failure (mutex was not unlocked)
*/
bool Mutex::Unlock()
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
    return xSemaphoreGive(rtSemaphoreHandle) == pdTRUE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	2200      	movs	r2, #0
 80089ae:	2100      	movs	r1, #0
 80089b0:	f7fd f936 	bl	8005c20 <xQueueGenericSend>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	bf0c      	ite	eq
 80089ba:	2301      	moveq	r3, #1
 80089bc:	2300      	movne	r3, #0
 80089be:	b2db      	uxtb	r3, r3
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <_ZN5QueueC1Et>:

/**
 * @brief Constructor with depth for the Queue class
 * @param depth Queue depth
*/
Queue::Queue(uint16_t depth)
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	807b      	strh	r3, [r7, #2]
{
    //Initialize RTOS Queue handle with given depth
    rtQueueHandle = xQueueCreate(depth, sizeof(Command));
 80089d4:	887b      	ldrh	r3, [r7, #2]
 80089d6:	2200      	movs	r2, #0
 80089d8:	210c      	movs	r1, #12
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fd f894 	bl	8005b08 <xQueueGenericCreate>
 80089e0:	4602      	mov	r2, r0
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]
    queueDepth = depth;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	887a      	ldrh	r2, [r7, #2]
 80089ea:	809a      	strh	r2, [r3, #4]
}
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <_ZN5Queue11SendFromISRER7Command>:
 * @brief Sends a command object to the queue, safe to call from ISR
 * @param command Command object reference to send
 * @return true on success, false on failure (queue full)
*/
bool Queue::SendFromISR(Command& command)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b082      	sub	sp, #8
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	6039      	str	r1, [r7, #0]
    //Note: There NULL param here could be used to wake a task right after after exiting the ISR
    if (xQueueSendFromISR(rtQueueHandle, &command, NULL) == pdPASS)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	2300      	movs	r3, #0
 8008a06:	2200      	movs	r2, #0
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	f7fd fa07 	bl	8005e1c <xQueueGenericSendFromISR>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	bf0c      	ite	eq
 8008a14:	2301      	moveq	r3, #1
 8008a16:	2300      	movne	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <_ZN5Queue11SendFromISRER7Command+0x2c>
        return true;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e003      	b.n	8008a2a <_ZN5Queue11SendFromISRER7Command+0x34>

    command.Reset();
 8008a22:	6838      	ldr	r0, [r7, #0]
 8008a24:	f7ff fef6 	bl	8008814 <_ZN7Command5ResetEv>

    return false;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <_ZN5Queue4SendER7Commandb>:
 * 
 * //TODO: It may be possible to have this automatically set the command to not free data externally 
 * as we've "passed" control of the data over, which might let us use a destructor to free the data  
*/
bool Queue::Send(Command& command, bool reportFull)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	71fb      	strb	r3, [r7, #7]
    if (xQueueSend(rtQueueHandle, &command, DEFAULT_QUEUE_SEND_WAIT_TICKS) == pdPASS)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	2300      	movs	r3, #0
 8008a48:	220f      	movs	r2, #15
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	f7fd f8e8 	bl	8005c20 <xQueueGenericSend>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	bf0c      	ite	eq
 8008a56:	2301      	moveq	r3, #1
 8008a58:	2300      	movne	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <_ZN5Queue4SendER7Commandb+0x30>
        return true;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e009      	b.n	8008a78 <_ZN5Queue4SendER7Commandb+0x44>

    if (reportFull) CUBE_PRINT("Could not send data to queue!\n");
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <_ZN5Queue4SendER7Commandb+0x3c>
 8008a6a:	4805      	ldr	r0, [pc, #20]	; (8008a80 <_ZN5Queue4SendER7Commandb+0x4c>)
 8008a6c:	f000 f864 	bl	8008b38 <_Z10cube_printPKcz>

    command.Reset();
 8008a70:	68b8      	ldr	r0, [r7, #8]
 8008a72:	f7ff fecf 	bl	8008814 <_ZN7Command5ResetEv>

    return false;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	0800a054 	.word	0x0800a054

08008a84 <_ZN5Queue11ReceiveWaitER7Command>:
 * @brief Polls queue with specific timeout, blocks forever
 * @param cm Command object to copy received data into
 * @return TRUE if we received a command, FALSE otherwise (should rarely return false)
*/
bool Queue::ReceiveWait(Command& cm)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
    if (xQueueReceive(rtQueueHandle, &cm, HAL_MAX_DELAY) == pdTRUE) {
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f04f 32ff 	mov.w	r2, #4294967295
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fd fa5b 	bl	8005f54 <xQueueReceive>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	bf0c      	ite	eq
 8008aa4:	2301      	moveq	r3, #1
 8008aa6:	2300      	movne	r3, #0
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <_ZN5Queue11ReceiveWaitER7Command+0x2e>
        return true;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <_ZN5Queue11ReceiveWaitER7Command+0x30>
    }
    return false;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <_Znwj>:

/* Other ------------------------------------------------------------------*/
// Override the new and delete operator to ensure heap4 is used for dynamic memory allocation
inline void* operator new(size_t size) { return cube_malloc(size); }
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff fde7 	bl	8008698 <_Z11cube_mallocm>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <_ZN4TaskC1Et>:

/**
 * @brief Constructor with queue depth
 * @param depth Optionally 0, uses the given depth for the event queue
*/
Task::Task(uint16_t depth)
 8008ad4:	b590      	push	{r4, r7, lr}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	807b      	strh	r3, [r7, #2]
 8008ae0:	4a0e      	ldr	r2, [pc, #56]	; (8008b1c <_ZN4TaskC1Et+0x48>)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	601a      	str	r2, [r3, #0]
{
    if (depth == 0)
 8008ae6:	887b      	ldrh	r3, [r7, #2]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d103      	bne.n	8008af4 <_ZN4TaskC1Et+0x20>
        qEvtQueue = nullptr;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	609a      	str	r2, [r3, #8]
 8008af2:	e00b      	b.n	8008b0c <_ZN4TaskC1Et+0x38>
    else
        qEvtQueue = new Queue(depth);
 8008af4:	2008      	movs	r0, #8
 8008af6:	f7ff ffe1 	bl	8008abc <_Znwj>
 8008afa:	4603      	mov	r3, r0
 8008afc:	461c      	mov	r4, r3
 8008afe:	887b      	ldrh	r3, [r7, #2]
 8008b00:	4619      	mov	r1, r3
 8008b02:	4620      	mov	r0, r4
 8008b04:	f7ff ff60 	bl	80089c8 <_ZN5QueueC1Et>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	609c      	str	r4, [r3, #8]
    rtTaskHandle = nullptr;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	605a      	str	r2, [r3, #4]
}
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd90      	pop	{r4, r7, pc}
 8008b1c:	0800a2b8 	.word	0x0800a2b8

08008b20 <_ZNK4Task13GetEventQueueEv>:
    Task(void);
    Task(uint16_t depth);

    virtual void InitTask() = 0;

    Queue* GetEventQueue() const { return qEvtQueue; }
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <_Z10cube_printPKcz>:
* @brief Variadic print function, sends a command packet to the queue
* @param str String to print with printf style formatting
* @param ... Additional arguments to print if assertion fails, in same format as printf
*/
void cube_print(const char* str, ...)
{
 8008b38:	b40f      	push	{r0, r1, r2, r3}
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b0b6      	sub	sp, #216	; 0xd8
 8008b3e:	af00      	add	r7, sp, #0
#ifndef DISABLE_DEBUG
    //Try to take the VA list mutex
    if (Global::vaListMutex.Lock(DEBUG_TAKE_MAX_TIME_MS)) {
 8008b40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008b44:	482a      	ldr	r0, [pc, #168]	; (8008bf0 <_Z10cube_printPKcz+0xb8>)
 8008b46:	f7ff ff15 	bl	8008974 <_ZN5Mutex4LockEm>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d041      	beq.n	8008bd4 <_Z10cube_printPKcz+0x9c>
        // If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
        uint8_t str_buffer[DEBUG_PRINT_MAX_SIZE] = {};
 8008b50:	2300      	movs	r3, #0
 8008b52:	607b      	str	r3, [r7, #4]
 8008b54:	f107 0308 	add.w	r3, r7, #8
 8008b58:	22bc      	movs	r2, #188	; 0xbc
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fbf3 	bl	8009348 <memset>
        va_list argument_list;
        va_start(argument_list, str);
 8008b62:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008b66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 8008b6a:	1d38      	adds	r0, r7, #4
 8008b6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008b70:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008b74:	21bf      	movs	r1, #191	; 0xbf
 8008b76:	f000 fbd9 	bl	800932c <vsniprintf>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        va_end(argument_list);
        if (buflen > 0) {
 8008b80:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	dd06      	ble.n	8008b96 <_Z10cube_printPKcz+0x5e>
            str_buffer[buflen] = '\0';
 8008b88:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8008b8c:	33d8      	adds	r3, #216	; 0xd8
 8008b8e:	443b      	add	r3, r7
 8008b90:	2200      	movs	r2, #0
 8008b92:	f803 2cd4 	strb.w	r2, [r3, #-212]
        }

        // Release the VA List Mutex
        Global::vaListMutex.Unlock();
 8008b96:	4816      	ldr	r0, [pc, #88]	; (8008bf0 <_Z10cube_printPKcz+0xb8>)
 8008b98:	f7ff ff01 	bl	800899e <_ZN5Mutex6UnlockEv>

        //Generate a command
        Command cmd(DATA_COMMAND, (uint16_t)CUBE_TASK_COMMAND_SEND_DEBUG); // Set the UART channel to send data on
 8008b9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	2102      	movs	r1, #2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff fdb6 	bl	8008716 <_ZN7CommandC1E15GLOBAL_COMMANDSt>

        //Copy data into the command
        cmd.CopyDataToCommand(str_buffer, buflen);
 8008baa:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8008bae:	1d39      	adds	r1, r7, #4
 8008bb0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff fe07 	bl	80087c8 <_ZN7Command17CopyDataToCommandEPht>

        //Send this packet off to the UART Task
        CubeTask::Inst().GetEventQueue()->Send(cmd, false);
 8008bba:	f7f7 fddb 	bl	8000774 <_ZN8CubeTask4InstEv>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff ffad 	bl	8008b20 <_ZNK4Task13GetEventQueueEv>
 8008bc6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4619      	mov	r1, r3
 8008bce:	f7ff ff31 	bl	8008a34 <_ZN5Queue4SendER7Commandb>
    {
        // Print out that we could not acquire the VA list mutex
        CUBE_ASSERT(false, "Could not acquire VA_LIST mutex");
    }
#endif
}
 8008bd2:	e005      	b.n	8008be0 <_Z10cube_printPKcz+0xa8>
        CUBE_ASSERT(false, "Could not acquire VA_LIST mutex");
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <_Z10cube_printPKcz+0xbc>)
 8008bd6:	2238      	movs	r2, #56	; 0x38
 8008bd8:	4907      	ldr	r1, [pc, #28]	; (8008bf8 <_Z10cube_printPKcz+0xc0>)
 8008bda:	2000      	movs	r0, #0
 8008bdc:	f000 f80e 	bl	8008bfc <_Z17cube_assert_debugbPKctS0_z>
}
 8008be0:	bf00      	nop
 8008be2:	37d8      	adds	r7, #216	; 0xd8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bea:	b004      	add	sp, #16
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	24010814 	.word	0x24010814
 8008bf4:	0800a074 	.word	0x0800a074
 8008bf8:	0800a094 	.word	0x0800a094

08008bfc <_Z17cube_assert_debugbPKctS0_z>:
 * @param file File that the assertion is in (__FILE__)
 * @param line Line number that the assertion is on (__LINE__)
 * @param str Optional message to print if assertion fails. Must be less than 192 characters AFTER formatting
 * @param ... Additional arguments to print if assertion fails, in same format as printf
 */
void cube_assert_debug(bool condition, const char* file, const uint16_t line, const char* str, ...) {
 8008bfc:	b408      	push	{r3}
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b0d9      	sub	sp, #356	; 0x164
 8008c02:	af02      	add	r7, sp, #8
 8008c04:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008c08:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008c0c:	6019      	str	r1, [r3, #0]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008c14:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8008c18:	4602      	mov	r2, r0
 8008c1a:	701a      	strb	r2, [r3, #0]
 8008c1c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008c20:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008c24:	460a      	mov	r2, r1
 8008c26:	801a      	strh	r2, [r3, #0]
    // If assertion succeeds, do nothing
    if (condition) {
 8008c28:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008c2c:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f040 8091 	bne.w	8008d5a <_Z17cube_assert_debugbPKctS0_z+0x15e>
        return;
    }

#ifndef DISABLE_DEBUG

    bool printMessage = false;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

    // NOTE: Be careful! If va_list funcs while RTOS is active ALL calls to any vsnprint functions MUST have a mutex lock/unlock
    // NOTE: https://nadler.com/embedded/newlibAndFreeRTOS.html

    // We have an assert fail, we try to take control of the Debug semaphore, and then suspend all other parts of the system
    if (Global::vaListMutex.Lock(ASSERT_TAKE_MAX_TIME_MS)) {
 8008c3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008c42:	484a      	ldr	r0, [pc, #296]	; (8008d6c <_Z17cube_assert_debugbPKctS0_z+0x170>)
 8008c44:	f7ff fe96 	bl	8008974 <_ZN5Mutex4LockEm>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <_Z17cube_assert_debugbPKctS0_z+0x58>
        // We have the mutex, we can now safely print the message
        printMessage = true;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    }

    vTaskSuspendAll();
 8008c54:	f7fd ff8c 	bl	8006b70 <vTaskSuspendAll>

    //If we have the vaListMutex, we can safely use vsnprintf
    if (printMessage) {
 8008c58:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d072      	beq.n	8008d46 <_Z17cube_assert_debugbPKctS0_z+0x14a>
        // Print out the assertion header through the supported interface, we don't have a UART task running, so we directly use HAL
        uint8_t header_buf[ASSERT_BUFFER_MAX_SIZE] = {};
 8008c60:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008c64:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	229c      	movs	r2, #156	; 0x9c
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 fb68 	bl	8009348 <memset>
        int16_t res = snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [%s] @ Line # [%d]\r\n", file, line);
 8008c78:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008c7c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008c80:	881a      	ldrh	r2, [r3, #0]
 8008c82:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008c86:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008c8a:	f107 000c 	add.w	r0, r7, #12
 8008c8e:	9200      	str	r2, [sp, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a37      	ldr	r2, [pc, #220]	; (8008d70 <_Z17cube_assert_debugbPKctS0_z+0x174>)
 8008c94:	219f      	movs	r1, #159	; 0x9f
 8008c96:	f000 fae9 	bl	800926c <sniprintf>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
        if (res < 0) {
 8008ca0:	f9b7 3154 	ldrsh.w	r3, [r7, #340]	; 0x154
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	da0a      	bge.n	8008cbe <_Z17cube_assert_debugbPKctS0_z+0xc2>
            // If we failed to generate the header, just format the line number
            snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [PATH_TOO_LONG] @ Line # [%d]\r\n", line);
 8008ca8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008cac:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	f107 000c 	add.w	r0, r7, #12
 8008cb6:	4a2f      	ldr	r2, [pc, #188]	; (8008d74 <_Z17cube_assert_debugbPKctS0_z+0x178>)
 8008cb8:	219f      	movs	r1, #159	; 0x9f
 8008cba:	f000 fad7 	bl	800926c <sniprintf>
        }

        // Output the header to the debug port
        DEFAULT_DEBUG_UART_DRIVER->Transmit(header_buf, strlen(reinterpret_cast<char*>(header_buf)));
 8008cbe:	f107 030c 	add.w	r3, r7, #12
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7f7 fb16 	bl	80002f4 <strlen>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	f107 030c 	add.w	r3, r7, #12
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4829      	ldr	r0, [pc, #164]	; (8008d78 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8008cd4:	f000 fa02 	bl	80090dc <_ZN10UARTDriver8TransmitEPht>

        // If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
        if (printMessage && str != nullptr) {
 8008cd8:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d037      	beq.n	8008d50 <_Z17cube_assert_debugbPKctS0_z+0x154>
 8008ce0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d033      	beq.n	8008d50 <_Z17cube_assert_debugbPKctS0_z+0x154>
            uint8_t str_buffer[ASSERT_BUFFER_MAX_SIZE] = {};
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008cf2:	229c      	movs	r2, #156	; 0x9c
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fb26 	bl	8009348 <memset>
            va_list argument_list;
            va_start(argument_list, str);
 8008cfc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008d00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 8008d04:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8008d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d0c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8008d10:	219f      	movs	r1, #159	; 0x9f
 8008d12:	f000 fb0b 	bl	800932c <vsniprintf>
 8008d16:	4603      	mov	r3, r0
 8008d18:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152
            va_end(argument_list);
            if (buflen > 0) {
 8008d1c:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dd15      	ble.n	8008d50 <_Z17cube_assert_debugbPKctS0_z+0x154>
                str_buffer[buflen] = '\0';
 8008d24:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 8008d28:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008d2c:	443b      	add	r3, r7
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f803 2cac 	strb.w	r2, [r3, #-172]
                DEFAULT_DEBUG_UART_DRIVER->Transmit(str_buffer, buflen);
 8008d34:	f8b7 2152 	ldrh.w	r2, [r7, #338]	; 0x152
 8008d38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	480e      	ldr	r0, [pc, #56]	; (8008d78 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8008d40:	f000 f9cc 	bl	80090dc <_ZN10UARTDriver8TransmitEPht>
 8008d44:	e004      	b.n	8008d50 <_Z17cube_assert_debugbPKctS0_z+0x154>
            }
        }
    }
    else {
        DEFAULT_DEBUG_UART_DRIVER->Transmit((uint8_t*)"-- ASSERTION FAILED --\r\nCould not acquire vaListMutex\r\n", 55);
 8008d46:	2237      	movs	r2, #55	; 0x37
 8008d48:	490c      	ldr	r1, [pc, #48]	; (8008d7c <_Z17cube_assert_debugbPKctS0_z+0x180>)
 8008d4a:	480b      	ldr	r0, [pc, #44]	; (8008d78 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8008d4c:	f000 f9c6 	bl	80090dc <_ZN10UARTDriver8TransmitEPht>
    }

#endif

    HAL_NVIC_SystemReset();
 8008d50:	f7f8 fc01 	bl	8001556 <HAL_NVIC_SystemReset>

    // We should not reach this code, but if we do, we should resume the scheduler
    xTaskResumeAll();
 8008d54:	f7fd ff1a 	bl	8006b8c <xTaskResumeAll>
 8008d58:	e000      	b.n	8008d5c <_Z17cube_assert_debugbPKctS0_z+0x160>
        return;
 8008d5a:	bf00      	nop
}
 8008d5c:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008d60:	46bd      	mov	sp, r7
 8008d62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d66:	b001      	add	sp, #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	24010814 	.word	0x24010814
 8008d70:	0800a0b0 	.word	0x0800a0b0
 8008d74:	0800a0e8 	.word	0x0800a0e8
 8008d78:	240000bc 	.word	0x240000bc
 8008d7c:	0800a128 	.word	0x0800a128

08008d80 <_Z41__static_initialization_and_destruction_0ii>:
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d107      	bne.n	8008da0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d102      	bne.n	8008da0 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mutex Global::vaListMutex;
 8008d9a:	4809      	ldr	r0, [pc, #36]	; (8008dc0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008d9c:	f7ff fdbe 	bl	800891c <_ZN5MutexC1Ev>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d107      	bne.n	8008db6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d102      	bne.n	8008db6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008db0:	4803      	ldr	r0, [pc, #12]	; (8008dc0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008db2:	f7ff fdd1 	bl	8008958 <_ZN5MutexD1Ev>
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	24010814 	.word	0x24010814

08008dc4 <_GLOBAL__sub_I__ZN6Global11vaListMutexE>:
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008dcc:	2001      	movs	r0, #1
 8008dce:	f7ff ffd7 	bl	8008d80 <_Z41__static_initialization_and_destruction_0ii>
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <_GLOBAL__sub_D__ZN6Global11vaListMutexE>:
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f7ff ffcf 	bl	8008d80 <_Z41__static_initialization_and_destruction_0ii>
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <_ZNK7Command14GetDataPointerEv>:
    uint8_t* GetDataPointer() const { return data; }
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <_ZN8CubeTask7RunTaskEPv>:
    }

    void InitTask();

protected:
    static void RunTask(void* pvParams) { CubeTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	f7f7 fcb6 	bl	8000774 <_ZN8CubeTask4InstEv>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 f837 	bl	8008e80 <_ZN8CubeTask3RunEPv>
 8008e12:	bf00      	nop
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <_ZN8CubeTask8InitTaskEv>:

/**
 * @brief Initializes Cube task with the RTOS scheduler
*/
void CubeTask::InitTask()
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af02      	add	r7, sp, #8
 8008e22:	6078      	str	r0, [r7, #4]
    // Make sure the task is not already initialized
    CUBE_ASSERT(rtTaskHandle == nullptr, "Cannot initialize UART task twice");
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <_ZN8CubeTask8InitTaskEv+0x1c>
 8008e2c:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <_ZN8CubeTask8InitTaskEv+0x50>)
 8008e2e:	2211      	movs	r2, #17
 8008e30:	490f      	ldr	r1, [pc, #60]	; (8008e70 <_ZN8CubeTask8InitTaskEv+0x54>)
 8008e32:	2000      	movs	r0, #0
 8008e34:	f7ff fee2 	bl	8008bfc <_Z17cube_assert_debugbPKctS0_z>

    // Start the task
    BaseType_t rtValue =
        xTaskCreate((TaskFunction_t)CubeTask::RunTask,
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	2302      	movs	r3, #2
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e48:	490a      	ldr	r1, [pc, #40]	; (8008e74 <_ZN8CubeTask8InitTaskEv+0x58>)
 8008e4a:	480b      	ldr	r0, [pc, #44]	; (8008e78 <_ZN8CubeTask8InitTaskEv+0x5c>)
 8008e4c:	f7fd fc9f 	bl	800678e <xTaskCreate>
 8008e50:	60f8      	str	r0, [r7, #12]
            (void*)this,
            (UBaseType_t)UART_TASK_RTOS_PRIORITY,
            (TaskHandle_t*)&rtTaskHandle);

    //Ensure creation succeded
    CUBE_ASSERT(rtValue == pdPASS, "CUBETask::InitTask() - xTaskCreate() failed");
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d005      	beq.n	8008e64 <_ZN8CubeTask8InitTaskEv+0x48>
 8008e58:	4b08      	ldr	r3, [pc, #32]	; (8008e7c <_ZN8CubeTask8InitTaskEv+0x60>)
 8008e5a:	221d      	movs	r2, #29
 8008e5c:	4904      	ldr	r1, [pc, #16]	; (8008e70 <_ZN8CubeTask8InitTaskEv+0x54>)
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f7ff fecc 	bl	8008bfc <_Z17cube_assert_debugbPKctS0_z>
}
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	0800a160 	.word	0x0800a160
 8008e70:	0800a184 	.word	0x0800a184
 8008e74:	0800a19c 	.word	0x0800a19c
 8008e78:	08008dfd 	.word	0x08008dfd
 8008e7c:	0800a1a8 	.word	0x0800a1a8

08008e80 <_ZN8CubeTask3RunEPv>:
/**
 * @brief Instance Run loop for the Cube Task, runs on scheduler start as long as the task is initialized.
 * @param pvParams RTOS Passed void parameters, contains a pointer to the object instance, should not be used
*/
void CubeTask::Run(void * pvParams)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
    //UART Task loop
    while(1) {
        Command cm;
 8008e8a:	f107 030c 	add.w	r3, r7, #12
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7ff fc27 	bl	80086e2 <_ZN7CommandC1Ev>

        //Wait forever for a command
        qEvtQueue->ReceiveWait(cm);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f107 020c 	add.w	r2, r7, #12
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7ff fdf0 	bl	8008a84 <_ZN5Queue11ReceiveWaitER7Command>

        //Process the command
        HandleCommand(cm);
 8008ea4:	f107 030c 	add.w	r3, r7, #12
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f802 	bl	8008eb4 <_ZN8CubeTask13HandleCommandER7Command>
    }
 8008eb0:	e7eb      	b.n	8008e8a <_ZN8CubeTask3RunEPv+0xa>
	...

08008eb4 <_ZN8CubeTask13HandleCommandER7Command>:
 * @brief HandleCommand handles any command passed to the Cube task primary event queue. Responsible for
 *           handling all commands, even if unsupported. (Unexpected commands must still be reset)
 * @param cm Reference to the command object to handle
*/
void CubeTask::HandleCommand(Command& cm)
{
 8008eb4:	b590      	push	{r4, r7, lr}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
    //Switch for the GLOBAL_COMMAND
    switch (cm.GetCommand()) {
 8008ebe:	6838      	ldr	r0, [r7, #0]
 8008ec0:	f7f7 fa76 	bl	80003b0 <_ZNK7Command10GetCommandEv>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d11d      	bne.n	8008f06 <_ZN8CubeTask13HandleCommandER7Command+0x52>
    case DATA_COMMAND: {
        //Switch for task specific command within DATA_COMMAND
        switch (cm.GetTaskCommand()) {
 8008eca:	6838      	ldr	r0, [r7, #0]
 8008ecc:	f7f7 fa7c 	bl	80003c8 <_ZNK7Command14GetTaskCommandEv>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d10d      	bne.n	8008ef2 <_ZN8CubeTask13HandleCommandER7Command+0x3e>
        case CUBE_TASK_COMMAND_SEND_DEBUG:
#ifndef DISABLE_DEBUG
                DEFAULT_DEBUG_UART_DRIVER->Transmit(cm.GetDataPointer(), cm.GetDataSize());
 8008ed6:	6838      	ldr	r0, [r7, #0]
 8008ed8:	f7ff ff84 	bl	8008de4 <_ZNK7Command14GetDataPointerEv>
 8008edc:	4604      	mov	r4, r0
 8008ede:	6838      	ldr	r0, [r7, #0]
 8008ee0:	f7ff fcba 	bl	8008858 <_ZNK7Command11GetDataSizeEv>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	4621      	mov	r1, r4
 8008eea:	480f      	ldr	r0, [pc, #60]	; (8008f28 <_ZN8CubeTask13HandleCommandER7Command+0x74>)
 8008eec:	f000 f8f6 	bl	80090dc <_ZN10UARTDriver8TransmitEPht>
#endif
            break;
 8008ef0:	e008      	b.n	8008f04 <_ZN8CubeTask13HandleCommandER7Command+0x50>
        default:
            CUBE_PRINT("CUBETask - Received Unsupported DATA_COMMAND {%d}\n", cm.GetTaskCommand());
 8008ef2:	6838      	ldr	r0, [r7, #0]
 8008ef4:	f7f7 fa68 	bl	80003c8 <_ZNK7Command14GetTaskCommandEv>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	4619      	mov	r1, r3
 8008efc:	480b      	ldr	r0, [pc, #44]	; (8008f2c <_ZN8CubeTask13HandleCommandER7Command+0x78>)
 8008efe:	f7ff fe1b 	bl	8008b38 <_Z10cube_printPKcz>
            break;
 8008f02:	bf00      	nop
        }
        break;
 8008f04:	e008      	b.n	8008f18 <_ZN8CubeTask13HandleCommandER7Command+0x64>
    }
    default:
        CUBE_PRINT("CUBETask - Received Unsupported Command {%d}\n", cm.GetCommand());
 8008f06:	6838      	ldr	r0, [r7, #0]
 8008f08:	f7f7 fa52 	bl	80003b0 <_ZNK7Command10GetCommandEv>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4807      	ldr	r0, [pc, #28]	; (8008f30 <_ZN8CubeTask13HandleCommandER7Command+0x7c>)
 8008f12:	f7ff fe11 	bl	8008b38 <_Z10cube_printPKcz>
        break;
 8008f16:	bf00      	nop
    }

    //No matter what we happens, we must reset allocated data
    cm.Reset();
 8008f18:	6838      	ldr	r0, [r7, #0]
 8008f1a:	f7ff fc7b 	bl	8008814 <_ZN7Command5ResetEv>
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd90      	pop	{r4, r7, pc}
 8008f26:	bf00      	nop
 8008f28:	240000bc 	.word	0x240000bc
 8008f2c:	0800a1d4 	.word	0x0800a1d4
 8008f30:	0800a208 	.word	0x0800a208

08008f34 <LL_USART_IsActiveFlag_PE>:
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <LL_USART_IsActiveFlag_PE+0x18>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e000      	b.n	8008f4e <LL_USART_IsActiveFlag_PE+0x1a>
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <LL_USART_IsActiveFlag_FE>:
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b083      	sub	sp, #12
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d101      	bne.n	8008f72 <LL_USART_IsActiveFlag_FE+0x18>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e000      	b.n	8008f74 <LL_USART_IsActiveFlag_FE+0x1a>
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <LL_USART_IsActiveFlag_NE>:
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	69db      	ldr	r3, [r3, #28]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d101      	bne.n	8008f98 <LL_USART_IsActiveFlag_NE+0x18>
 8008f94:	2301      	movs	r3, #1
 8008f96:	e000      	b.n	8008f9a <LL_USART_IsActiveFlag_NE+0x1a>
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <LL_USART_IsActiveFlag_ORE>:
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d101      	bne.n	8008fbe <LL_USART_IsActiveFlag_ORE+0x18>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e000      	b.n	8008fc0 <LL_USART_IsActiveFlag_ORE+0x1a>
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b20      	cmp	r3, #32
 8008fde:	d101      	bne.n	8008fe4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e000      	b.n	8008fe6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <LL_USART_IsActiveFlag_TC>:
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009002:	2b40      	cmp	r3, #64	; 0x40
 8009004:	d101      	bne.n	800900a <LL_USART_IsActiveFlag_TC+0x18>
 8009006:	2301      	movs	r3, #1
 8009008:	e000      	b.n	800900c <LL_USART_IsActiveFlag_TC+0x1a>
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	69db      	ldr	r3, [r3, #28]
 8009024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009028:	2b80      	cmp	r3, #128	; 0x80
 800902a:	d101      	bne.n	8009030 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2208      	movs	r2, #8
 800904a:	621a      	str	r2, [r3, #32]
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8009058:	b480      	push	{r7}
 800905a:	b089      	sub	sp, #36	; 0x24
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	60bb      	str	r3, [r7, #8]
   return(result);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f043 0320 	orr.w	r3, r3, #32
 8009072:	61fb      	str	r3, [r7, #28]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	61ba      	str	r2, [r7, #24]
 800907a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	6979      	ldr	r1, [r7, #20]
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	613b      	str	r3, [r7, #16]
   return(result);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	bf14      	ite	ne
 800908c:	2301      	movne	r3, #1
 800908e:	2300      	moveq	r3, #0
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e4      	bne.n	8009060 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	3724      	adds	r7, #36	; 0x24
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b0:	b2db      	uxtb	r3, r3
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80090ca:	78fa      	ldrb	r2, [r7, #3]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <_ZN10UARTDriver8TransmitEPht>:
 * @param data The data to transmit
 * @param len The length of the data to transmit
 * @return True if the transmission was successful, false otherwise
 */
bool UARTDriver::Transmit(uint8_t* data, uint16_t len)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	80fb      	strh	r3, [r7, #6]
    // Loop through and transmit each byte via. polling
    for (uint16_t i = 0; i < len; i++) {
 80090ea:	2300      	movs	r3, #0
 80090ec:	82fb      	strh	r3, [r7, #22]
 80090ee:	e019      	b.n	8009124 <_ZN10UARTDriver8TransmitEPht+0x48>
        LL_USART_TransmitData8(kUart_, data[i]);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	8afb      	ldrh	r3, [r7, #22]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	4413      	add	r3, r2
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	4619      	mov	r1, r3
 80090fe:	f7ff ffde 	bl	80090be <LL_USART_TransmitData8>

        // Wait until the TX Register Empty Flag is set
        while (!LL_USART_IsActiveFlag_TXE(kUart_)) {}
 8009102:	bf00      	nop
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff ff85 	bl	8009018 <LL_USART_IsActiveFlag_TXE_TXFNF>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	bf0c      	ite	eq
 8009114:	2301      	moveq	r3, #1
 8009116:	2300      	movne	r3, #0
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1f2      	bne.n	8009104 <_ZN10UARTDriver8TransmitEPht+0x28>
    for (uint16_t i = 0; i < len; i++) {
 800911e:	8afb      	ldrh	r3, [r7, #22]
 8009120:	3301      	adds	r3, #1
 8009122:	82fb      	strh	r3, [r7, #22]
 8009124:	8afa      	ldrh	r2, [r7, #22]
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	429a      	cmp	r2, r3
 800912a:	d3e1      	bcc.n	80090f0 <_ZN10UARTDriver8TransmitEPht+0x14>
    }

    // Wait until the transfer complete flag is set
    while (!LL_USART_IsActiveFlag_TC(kUart_)) {}
 800912c:	bf00      	nop
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff ff5d 	bl	8008ff2 <LL_USART_IsActiveFlag_TC>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	bf0c      	ite	eq
 800913e:	2301      	moveq	r3, #1
 8009140:	2300      	movne	r3, #0
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1f2      	bne.n	800912e <_ZN10UARTDriver8TransmitEPht+0x52>

    return true;
 8009148:	2301      	movs	r3, #1
}
 800914a:	4618      	mov	r0, r3
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase>:
* @brief Receives 1 byte of data via interrupt
* @param receiver
* @return TRUE if interrupt was successfully enabled, FALSE otherwise
*/
bool UARTDriver::ReceiveIT(uint8_t* charBuf, UARTReceiverBase* receiver)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
    // Check flags
    HandleAndClearRxError();
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 f822 	bl	80091a8 <_ZN10UARTDriver21HandleAndClearRxErrorEv>
    if (LL_USART_IsActiveFlag_RXNE(kUart_)) {
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff ff2f 	bl	8008fcc <LL_USART_IsActiveFlag_RXNE_RXFNE>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	bf14      	ite	ne
 8009174:	2301      	movne	r3, #1
 8009176:	2300      	moveq	r3, #0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d004      	beq.n	8009188 <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase+0x36>
        // Read the data and ignore it
        LL_USART_ReceiveData8(kUart_);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff ff8e 	bl	80090a4 <LL_USART_ReceiveData8>
    }

    // Set the buffer and receiver
    rxCharBuf_ = charBuf;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	605a      	str	r2, [r3, #4]
    rxReceiver_ = receiver;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	609a      	str	r2, [r3, #8]

    // Enable the receive interrupt
    LL_USART_EnableIT_RXNE(kUart_);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff ff5d 	bl	8009058 <LL_USART_EnableIT_RXNE_RXFNE>

    return true;
 800919e:	2301      	movs	r3, #1
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <_ZN10UARTDriver21HandleAndClearRxErrorEv>:
/**
 * @brief Clears any error flags that may have been set
 * @return true if flags had to be cleared, false otherwise
 */
bool UARTDriver::HandleAndClearRxError()
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
    bool shouldClearFlags = false;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
    if (LL_USART_IsActiveFlag_ORE(kUart_)) {
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff fef4 	bl	8008fa6 <LL_USART_IsActiveFlag_ORE>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bf14      	ite	ne
 80091c4:	2301      	movne	r3, #1
 80091c6:	2300      	moveq	r3, #0
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x2a>
        shouldClearFlags = true;
 80091ce:	2301      	movs	r3, #1
 80091d0:	73fb      	strb	r3, [r7, #15]
    }
    if (LL_USART_IsActiveFlag_NE(kUart_)) {
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff fed2 	bl	8008f80 <LL_USART_IsActiveFlag_NE>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bf14      	ite	ne
 80091e2:	2301      	movne	r3, #1
 80091e4:	2300      	moveq	r3, #0
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x48>
        shouldClearFlags = true;
 80091ec:	2301      	movs	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
    }
    if(LL_USART_IsActiveFlag_FE(kUart_)) {
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff feb0 	bl	8008f5a <LL_USART_IsActiveFlag_FE>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	bf14      	ite	ne
 8009200:	2301      	movne	r3, #1
 8009202:	2300      	moveq	r3, #0
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x66>
        shouldClearFlags = true;
 800920a:	2301      	movs	r3, #1
 800920c:	73fb      	strb	r3, [r7, #15]
    }
    if(LL_USART_IsActiveFlag_PE(kUart_)) {
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4618      	mov	r0, r3
 8009214:	f7ff fe8e 	bl	8008f34 <LL_USART_IsActiveFlag_PE>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	bf14      	ite	ne
 800921e:	2301      	movne	r3, #1
 8009220:	2300      	moveq	r3, #0
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x84>
        shouldClearFlags = true;
 8009228:	2301      	movs	r3, #1
 800922a:	73fb      	strb	r3, [r7, #15]
    }

    // Clearing the ORE here also clears PE, NE, FE, IDLE
    if(shouldClearFlags)
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d004      	beq.n	800923c <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x94>
        LL_USART_ClearFlag_ORE(kUart_);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff ff01 	bl	800903e <LL_USART_ClearFlag_ORE>

    return !shouldClearFlags;
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	f083 0301 	eor.w	r3, r3, #1
 8009242:	b2db      	uxtb	r3, r3
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <__cxa_guard_acquire>:
 800924c:	6803      	ldr	r3, [r0, #0]
 800924e:	07db      	lsls	r3, r3, #31
 8009250:	d406      	bmi.n	8009260 <__cxa_guard_acquire+0x14>
 8009252:	7843      	ldrb	r3, [r0, #1]
 8009254:	b103      	cbz	r3, 8009258 <__cxa_guard_acquire+0xc>
 8009256:	deff      	udf	#255	; 0xff
 8009258:	2301      	movs	r3, #1
 800925a:	7043      	strb	r3, [r0, #1]
 800925c:	4618      	mov	r0, r3
 800925e:	4770      	bx	lr
 8009260:	2000      	movs	r0, #0
 8009262:	4770      	bx	lr

08009264 <__cxa_guard_release>:
 8009264:	2301      	movs	r3, #1
 8009266:	6003      	str	r3, [r0, #0]
 8009268:	4770      	bx	lr
	...

0800926c <sniprintf>:
 800926c:	b40c      	push	{r2, r3}
 800926e:	b530      	push	{r4, r5, lr}
 8009270:	4b17      	ldr	r3, [pc, #92]	; (80092d0 <sniprintf+0x64>)
 8009272:	1e0c      	subs	r4, r1, #0
 8009274:	681d      	ldr	r5, [r3, #0]
 8009276:	b09d      	sub	sp, #116	; 0x74
 8009278:	da08      	bge.n	800928c <sniprintf+0x20>
 800927a:	238b      	movs	r3, #139	; 0x8b
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	f04f 30ff 	mov.w	r0, #4294967295
 8009282:	b01d      	add	sp, #116	; 0x74
 8009284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009288:	b002      	add	sp, #8
 800928a:	4770      	bx	lr
 800928c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009290:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009294:	bf14      	ite	ne
 8009296:	f104 33ff 	addne.w	r3, r4, #4294967295
 800929a:	4623      	moveq	r3, r4
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	9307      	str	r3, [sp, #28]
 80092a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092a4:	9002      	str	r0, [sp, #8]
 80092a6:	9006      	str	r0, [sp, #24]
 80092a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092ae:	ab21      	add	r3, sp, #132	; 0x84
 80092b0:	a902      	add	r1, sp, #8
 80092b2:	4628      	mov	r0, r5
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	f000 fa31 	bl	800971c <_svfiprintf_r>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	bfbc      	itt	lt
 80092be:	238b      	movlt	r3, #139	; 0x8b
 80092c0:	602b      	strlt	r3, [r5, #0]
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	d0dd      	beq.n	8009282 <sniprintf+0x16>
 80092c6:	9b02      	ldr	r3, [sp, #8]
 80092c8:	2200      	movs	r2, #0
 80092ca:	701a      	strb	r2, [r3, #0]
 80092cc:	e7d9      	b.n	8009282 <sniprintf+0x16>
 80092ce:	bf00      	nop
 80092d0:	24000060 	.word	0x24000060

080092d4 <_vsniprintf_r>:
 80092d4:	b530      	push	{r4, r5, lr}
 80092d6:	4614      	mov	r4, r2
 80092d8:	2c00      	cmp	r4, #0
 80092da:	b09b      	sub	sp, #108	; 0x6c
 80092dc:	4605      	mov	r5, r0
 80092de:	461a      	mov	r2, r3
 80092e0:	da05      	bge.n	80092ee <_vsniprintf_r+0x1a>
 80092e2:	238b      	movs	r3, #139	; 0x8b
 80092e4:	6003      	str	r3, [r0, #0]
 80092e6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ea:	b01b      	add	sp, #108	; 0x6c
 80092ec:	bd30      	pop	{r4, r5, pc}
 80092ee:	f44f 7302 	mov.w	r3, #520	; 0x208
 80092f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80092f6:	bf14      	ite	ne
 80092f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092fc:	4623      	moveq	r3, r4
 80092fe:	9302      	str	r3, [sp, #8]
 8009300:	9305      	str	r3, [sp, #20]
 8009302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009306:	9100      	str	r1, [sp, #0]
 8009308:	9104      	str	r1, [sp, #16]
 800930a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800930e:	4669      	mov	r1, sp
 8009310:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009312:	f000 fa03 	bl	800971c <_svfiprintf_r>
 8009316:	1c43      	adds	r3, r0, #1
 8009318:	bfbc      	itt	lt
 800931a:	238b      	movlt	r3, #139	; 0x8b
 800931c:	602b      	strlt	r3, [r5, #0]
 800931e:	2c00      	cmp	r4, #0
 8009320:	d0e3      	beq.n	80092ea <_vsniprintf_r+0x16>
 8009322:	9b00      	ldr	r3, [sp, #0]
 8009324:	2200      	movs	r2, #0
 8009326:	701a      	strb	r2, [r3, #0]
 8009328:	e7df      	b.n	80092ea <_vsniprintf_r+0x16>
	...

0800932c <vsniprintf>:
 800932c:	b507      	push	{r0, r1, r2, lr}
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	4613      	mov	r3, r2
 8009332:	460a      	mov	r2, r1
 8009334:	4601      	mov	r1, r0
 8009336:	4803      	ldr	r0, [pc, #12]	; (8009344 <vsniprintf+0x18>)
 8009338:	6800      	ldr	r0, [r0, #0]
 800933a:	f7ff ffcb 	bl	80092d4 <_vsniprintf_r>
 800933e:	b003      	add	sp, #12
 8009340:	f85d fb04 	ldr.w	pc, [sp], #4
 8009344:	24000060 	.word	0x24000060

08009348 <memset>:
 8009348:	4402      	add	r2, r0
 800934a:	4603      	mov	r3, r0
 800934c:	4293      	cmp	r3, r2
 800934e:	d100      	bne.n	8009352 <memset+0xa>
 8009350:	4770      	bx	lr
 8009352:	f803 1b01 	strb.w	r1, [r3], #1
 8009356:	e7f9      	b.n	800934c <memset+0x4>

08009358 <_reclaim_reent>:
 8009358:	4b29      	ldr	r3, [pc, #164]	; (8009400 <_reclaim_reent+0xa8>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4283      	cmp	r3, r0
 800935e:	b570      	push	{r4, r5, r6, lr}
 8009360:	4604      	mov	r4, r0
 8009362:	d04b      	beq.n	80093fc <_reclaim_reent+0xa4>
 8009364:	69c3      	ldr	r3, [r0, #28]
 8009366:	b143      	cbz	r3, 800937a <_reclaim_reent+0x22>
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d144      	bne.n	80093f8 <_reclaim_reent+0xa0>
 800936e:	69e3      	ldr	r3, [r4, #28]
 8009370:	6819      	ldr	r1, [r3, #0]
 8009372:	b111      	cbz	r1, 800937a <_reclaim_reent+0x22>
 8009374:	4620      	mov	r0, r4
 8009376:	f000 f87f 	bl	8009478 <_free_r>
 800937a:	6961      	ldr	r1, [r4, #20]
 800937c:	b111      	cbz	r1, 8009384 <_reclaim_reent+0x2c>
 800937e:	4620      	mov	r0, r4
 8009380:	f000 f87a 	bl	8009478 <_free_r>
 8009384:	69e1      	ldr	r1, [r4, #28]
 8009386:	b111      	cbz	r1, 800938e <_reclaim_reent+0x36>
 8009388:	4620      	mov	r0, r4
 800938a:	f000 f875 	bl	8009478 <_free_r>
 800938e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009390:	b111      	cbz	r1, 8009398 <_reclaim_reent+0x40>
 8009392:	4620      	mov	r0, r4
 8009394:	f000 f870 	bl	8009478 <_free_r>
 8009398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800939a:	b111      	cbz	r1, 80093a2 <_reclaim_reent+0x4a>
 800939c:	4620      	mov	r0, r4
 800939e:	f000 f86b 	bl	8009478 <_free_r>
 80093a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80093a4:	b111      	cbz	r1, 80093ac <_reclaim_reent+0x54>
 80093a6:	4620      	mov	r0, r4
 80093a8:	f000 f866 	bl	8009478 <_free_r>
 80093ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80093ae:	b111      	cbz	r1, 80093b6 <_reclaim_reent+0x5e>
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 f861 	bl	8009478 <_free_r>
 80093b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80093b8:	b111      	cbz	r1, 80093c0 <_reclaim_reent+0x68>
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 f85c 	bl	8009478 <_free_r>
 80093c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80093c2:	b111      	cbz	r1, 80093ca <_reclaim_reent+0x72>
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 f857 	bl	8009478 <_free_r>
 80093ca:	6a23      	ldr	r3, [r4, #32]
 80093cc:	b1b3      	cbz	r3, 80093fc <_reclaim_reent+0xa4>
 80093ce:	4620      	mov	r0, r4
 80093d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093d4:	4718      	bx	r3
 80093d6:	5949      	ldr	r1, [r1, r5]
 80093d8:	b941      	cbnz	r1, 80093ec <_reclaim_reent+0x94>
 80093da:	3504      	adds	r5, #4
 80093dc:	69e3      	ldr	r3, [r4, #28]
 80093de:	2d80      	cmp	r5, #128	; 0x80
 80093e0:	68d9      	ldr	r1, [r3, #12]
 80093e2:	d1f8      	bne.n	80093d6 <_reclaim_reent+0x7e>
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 f847 	bl	8009478 <_free_r>
 80093ea:	e7c0      	b.n	800936e <_reclaim_reent+0x16>
 80093ec:	680e      	ldr	r6, [r1, #0]
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 f842 	bl	8009478 <_free_r>
 80093f4:	4631      	mov	r1, r6
 80093f6:	e7ef      	b.n	80093d8 <_reclaim_reent+0x80>
 80093f8:	2500      	movs	r5, #0
 80093fa:	e7ef      	b.n	80093dc <_reclaim_reent+0x84>
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	bf00      	nop
 8009400:	24000060 	.word	0x24000060

08009404 <__errno>:
 8009404:	4b01      	ldr	r3, [pc, #4]	; (800940c <__errno+0x8>)
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	24000060 	.word	0x24000060

08009410 <__libc_init_array>:
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	4d0d      	ldr	r5, [pc, #52]	; (8009448 <__libc_init_array+0x38>)
 8009414:	4c0d      	ldr	r4, [pc, #52]	; (800944c <__libc_init_array+0x3c>)
 8009416:	1b64      	subs	r4, r4, r5
 8009418:	10a4      	asrs	r4, r4, #2
 800941a:	2600      	movs	r6, #0
 800941c:	42a6      	cmp	r6, r4
 800941e:	d109      	bne.n	8009434 <__libc_init_array+0x24>
 8009420:	4d0b      	ldr	r5, [pc, #44]	; (8009450 <__libc_init_array+0x40>)
 8009422:	4c0c      	ldr	r4, [pc, #48]	; (8009454 <__libc_init_array+0x44>)
 8009424:	f000 fc6a 	bl	8009cfc <_init>
 8009428:	1b64      	subs	r4, r4, r5
 800942a:	10a4      	asrs	r4, r4, #2
 800942c:	2600      	movs	r6, #0
 800942e:	42a6      	cmp	r6, r4
 8009430:	d105      	bne.n	800943e <__libc_init_array+0x2e>
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	f855 3b04 	ldr.w	r3, [r5], #4
 8009438:	4798      	blx	r3
 800943a:	3601      	adds	r6, #1
 800943c:	e7ee      	b.n	800941c <__libc_init_array+0xc>
 800943e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009442:	4798      	blx	r3
 8009444:	3601      	adds	r6, #1
 8009446:	e7f2      	b.n	800942e <__libc_init_array+0x1e>
 8009448:	0800a2fc 	.word	0x0800a2fc
 800944c:	0800a2fc 	.word	0x0800a2fc
 8009450:	0800a2fc 	.word	0x0800a2fc
 8009454:	0800a308 	.word	0x0800a308

08009458 <__retarget_lock_acquire_recursive>:
 8009458:	4770      	bx	lr

0800945a <__retarget_lock_release_recursive>:
 800945a:	4770      	bx	lr

0800945c <memcpy>:
 800945c:	440a      	add	r2, r1
 800945e:	4291      	cmp	r1, r2
 8009460:	f100 33ff 	add.w	r3, r0, #4294967295
 8009464:	d100      	bne.n	8009468 <memcpy+0xc>
 8009466:	4770      	bx	lr
 8009468:	b510      	push	{r4, lr}
 800946a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800946e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009472:	4291      	cmp	r1, r2
 8009474:	d1f9      	bne.n	800946a <memcpy+0xe>
 8009476:	bd10      	pop	{r4, pc}

08009478 <_free_r>:
 8009478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800947a:	2900      	cmp	r1, #0
 800947c:	d044      	beq.n	8009508 <_free_r+0x90>
 800947e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009482:	9001      	str	r0, [sp, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	f1a1 0404 	sub.w	r4, r1, #4
 800948a:	bfb8      	it	lt
 800948c:	18e4      	addlt	r4, r4, r3
 800948e:	f000 f8df 	bl	8009650 <__malloc_lock>
 8009492:	4a1e      	ldr	r2, [pc, #120]	; (800950c <_free_r+0x94>)
 8009494:	9801      	ldr	r0, [sp, #4]
 8009496:	6813      	ldr	r3, [r2, #0]
 8009498:	b933      	cbnz	r3, 80094a8 <_free_r+0x30>
 800949a:	6063      	str	r3, [r4, #4]
 800949c:	6014      	str	r4, [r2, #0]
 800949e:	b003      	add	sp, #12
 80094a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094a4:	f000 b8da 	b.w	800965c <__malloc_unlock>
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	d908      	bls.n	80094be <_free_r+0x46>
 80094ac:	6825      	ldr	r5, [r4, #0]
 80094ae:	1961      	adds	r1, r4, r5
 80094b0:	428b      	cmp	r3, r1
 80094b2:	bf01      	itttt	eq
 80094b4:	6819      	ldreq	r1, [r3, #0]
 80094b6:	685b      	ldreq	r3, [r3, #4]
 80094b8:	1949      	addeq	r1, r1, r5
 80094ba:	6021      	streq	r1, [r4, #0]
 80094bc:	e7ed      	b.n	800949a <_free_r+0x22>
 80094be:	461a      	mov	r2, r3
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	b10b      	cbz	r3, 80094c8 <_free_r+0x50>
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	d9fa      	bls.n	80094be <_free_r+0x46>
 80094c8:	6811      	ldr	r1, [r2, #0]
 80094ca:	1855      	adds	r5, r2, r1
 80094cc:	42a5      	cmp	r5, r4
 80094ce:	d10b      	bne.n	80094e8 <_free_r+0x70>
 80094d0:	6824      	ldr	r4, [r4, #0]
 80094d2:	4421      	add	r1, r4
 80094d4:	1854      	adds	r4, r2, r1
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	6011      	str	r1, [r2, #0]
 80094da:	d1e0      	bne.n	800949e <_free_r+0x26>
 80094dc:	681c      	ldr	r4, [r3, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	6053      	str	r3, [r2, #4]
 80094e2:	440c      	add	r4, r1
 80094e4:	6014      	str	r4, [r2, #0]
 80094e6:	e7da      	b.n	800949e <_free_r+0x26>
 80094e8:	d902      	bls.n	80094f0 <_free_r+0x78>
 80094ea:	230c      	movs	r3, #12
 80094ec:	6003      	str	r3, [r0, #0]
 80094ee:	e7d6      	b.n	800949e <_free_r+0x26>
 80094f0:	6825      	ldr	r5, [r4, #0]
 80094f2:	1961      	adds	r1, r4, r5
 80094f4:	428b      	cmp	r3, r1
 80094f6:	bf04      	itt	eq
 80094f8:	6819      	ldreq	r1, [r3, #0]
 80094fa:	685b      	ldreq	r3, [r3, #4]
 80094fc:	6063      	str	r3, [r4, #4]
 80094fe:	bf04      	itt	eq
 8009500:	1949      	addeq	r1, r1, r5
 8009502:	6021      	streq	r1, [r4, #0]
 8009504:	6054      	str	r4, [r2, #4]
 8009506:	e7ca      	b.n	800949e <_free_r+0x26>
 8009508:	b003      	add	sp, #12
 800950a:	bd30      	pop	{r4, r5, pc}
 800950c:	24010958 	.word	0x24010958

08009510 <sbrk_aligned>:
 8009510:	b570      	push	{r4, r5, r6, lr}
 8009512:	4e0e      	ldr	r6, [pc, #56]	; (800954c <sbrk_aligned+0x3c>)
 8009514:	460c      	mov	r4, r1
 8009516:	6831      	ldr	r1, [r6, #0]
 8009518:	4605      	mov	r5, r0
 800951a:	b911      	cbnz	r1, 8009522 <sbrk_aligned+0x12>
 800951c:	f000 fba6 	bl	8009c6c <_sbrk_r>
 8009520:	6030      	str	r0, [r6, #0]
 8009522:	4621      	mov	r1, r4
 8009524:	4628      	mov	r0, r5
 8009526:	f000 fba1 	bl	8009c6c <_sbrk_r>
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	d00a      	beq.n	8009544 <sbrk_aligned+0x34>
 800952e:	1cc4      	adds	r4, r0, #3
 8009530:	f024 0403 	bic.w	r4, r4, #3
 8009534:	42a0      	cmp	r0, r4
 8009536:	d007      	beq.n	8009548 <sbrk_aligned+0x38>
 8009538:	1a21      	subs	r1, r4, r0
 800953a:	4628      	mov	r0, r5
 800953c:	f000 fb96 	bl	8009c6c <_sbrk_r>
 8009540:	3001      	adds	r0, #1
 8009542:	d101      	bne.n	8009548 <sbrk_aligned+0x38>
 8009544:	f04f 34ff 	mov.w	r4, #4294967295
 8009548:	4620      	mov	r0, r4
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	2401095c 	.word	0x2401095c

08009550 <_malloc_r>:
 8009550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009554:	1ccd      	adds	r5, r1, #3
 8009556:	f025 0503 	bic.w	r5, r5, #3
 800955a:	3508      	adds	r5, #8
 800955c:	2d0c      	cmp	r5, #12
 800955e:	bf38      	it	cc
 8009560:	250c      	movcc	r5, #12
 8009562:	2d00      	cmp	r5, #0
 8009564:	4607      	mov	r7, r0
 8009566:	db01      	blt.n	800956c <_malloc_r+0x1c>
 8009568:	42a9      	cmp	r1, r5
 800956a:	d905      	bls.n	8009578 <_malloc_r+0x28>
 800956c:	230c      	movs	r3, #12
 800956e:	603b      	str	r3, [r7, #0]
 8009570:	2600      	movs	r6, #0
 8009572:	4630      	mov	r0, r6
 8009574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009578:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800964c <_malloc_r+0xfc>
 800957c:	f000 f868 	bl	8009650 <__malloc_lock>
 8009580:	f8d8 3000 	ldr.w	r3, [r8]
 8009584:	461c      	mov	r4, r3
 8009586:	bb5c      	cbnz	r4, 80095e0 <_malloc_r+0x90>
 8009588:	4629      	mov	r1, r5
 800958a:	4638      	mov	r0, r7
 800958c:	f7ff ffc0 	bl	8009510 <sbrk_aligned>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	4604      	mov	r4, r0
 8009594:	d155      	bne.n	8009642 <_malloc_r+0xf2>
 8009596:	f8d8 4000 	ldr.w	r4, [r8]
 800959a:	4626      	mov	r6, r4
 800959c:	2e00      	cmp	r6, #0
 800959e:	d145      	bne.n	800962c <_malloc_r+0xdc>
 80095a0:	2c00      	cmp	r4, #0
 80095a2:	d048      	beq.n	8009636 <_malloc_r+0xe6>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	4631      	mov	r1, r6
 80095a8:	4638      	mov	r0, r7
 80095aa:	eb04 0903 	add.w	r9, r4, r3
 80095ae:	f000 fb5d 	bl	8009c6c <_sbrk_r>
 80095b2:	4581      	cmp	r9, r0
 80095b4:	d13f      	bne.n	8009636 <_malloc_r+0xe6>
 80095b6:	6821      	ldr	r1, [r4, #0]
 80095b8:	1a6d      	subs	r5, r5, r1
 80095ba:	4629      	mov	r1, r5
 80095bc:	4638      	mov	r0, r7
 80095be:	f7ff ffa7 	bl	8009510 <sbrk_aligned>
 80095c2:	3001      	adds	r0, #1
 80095c4:	d037      	beq.n	8009636 <_malloc_r+0xe6>
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	442b      	add	r3, r5
 80095ca:	6023      	str	r3, [r4, #0]
 80095cc:	f8d8 3000 	ldr.w	r3, [r8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d038      	beq.n	8009646 <_malloc_r+0xf6>
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	42a2      	cmp	r2, r4
 80095d8:	d12b      	bne.n	8009632 <_malloc_r+0xe2>
 80095da:	2200      	movs	r2, #0
 80095dc:	605a      	str	r2, [r3, #4]
 80095de:	e00f      	b.n	8009600 <_malloc_r+0xb0>
 80095e0:	6822      	ldr	r2, [r4, #0]
 80095e2:	1b52      	subs	r2, r2, r5
 80095e4:	d41f      	bmi.n	8009626 <_malloc_r+0xd6>
 80095e6:	2a0b      	cmp	r2, #11
 80095e8:	d917      	bls.n	800961a <_malloc_r+0xca>
 80095ea:	1961      	adds	r1, r4, r5
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	6025      	str	r5, [r4, #0]
 80095f0:	bf18      	it	ne
 80095f2:	6059      	strne	r1, [r3, #4]
 80095f4:	6863      	ldr	r3, [r4, #4]
 80095f6:	bf08      	it	eq
 80095f8:	f8c8 1000 	streq.w	r1, [r8]
 80095fc:	5162      	str	r2, [r4, r5]
 80095fe:	604b      	str	r3, [r1, #4]
 8009600:	4638      	mov	r0, r7
 8009602:	f104 060b 	add.w	r6, r4, #11
 8009606:	f000 f829 	bl	800965c <__malloc_unlock>
 800960a:	f026 0607 	bic.w	r6, r6, #7
 800960e:	1d23      	adds	r3, r4, #4
 8009610:	1af2      	subs	r2, r6, r3
 8009612:	d0ae      	beq.n	8009572 <_malloc_r+0x22>
 8009614:	1b9b      	subs	r3, r3, r6
 8009616:	50a3      	str	r3, [r4, r2]
 8009618:	e7ab      	b.n	8009572 <_malloc_r+0x22>
 800961a:	42a3      	cmp	r3, r4
 800961c:	6862      	ldr	r2, [r4, #4]
 800961e:	d1dd      	bne.n	80095dc <_malloc_r+0x8c>
 8009620:	f8c8 2000 	str.w	r2, [r8]
 8009624:	e7ec      	b.n	8009600 <_malloc_r+0xb0>
 8009626:	4623      	mov	r3, r4
 8009628:	6864      	ldr	r4, [r4, #4]
 800962a:	e7ac      	b.n	8009586 <_malloc_r+0x36>
 800962c:	4634      	mov	r4, r6
 800962e:	6876      	ldr	r6, [r6, #4]
 8009630:	e7b4      	b.n	800959c <_malloc_r+0x4c>
 8009632:	4613      	mov	r3, r2
 8009634:	e7cc      	b.n	80095d0 <_malloc_r+0x80>
 8009636:	230c      	movs	r3, #12
 8009638:	603b      	str	r3, [r7, #0]
 800963a:	4638      	mov	r0, r7
 800963c:	f000 f80e 	bl	800965c <__malloc_unlock>
 8009640:	e797      	b.n	8009572 <_malloc_r+0x22>
 8009642:	6025      	str	r5, [r4, #0]
 8009644:	e7dc      	b.n	8009600 <_malloc_r+0xb0>
 8009646:	605b      	str	r3, [r3, #4]
 8009648:	deff      	udf	#255	; 0xff
 800964a:	bf00      	nop
 800964c:	24010958 	.word	0x24010958

08009650 <__malloc_lock>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__malloc_lock+0x8>)
 8009652:	f7ff bf01 	b.w	8009458 <__retarget_lock_acquire_recursive>
 8009656:	bf00      	nop
 8009658:	24010954 	.word	0x24010954

0800965c <__malloc_unlock>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__malloc_unlock+0x8>)
 800965e:	f7ff befc 	b.w	800945a <__retarget_lock_release_recursive>
 8009662:	bf00      	nop
 8009664:	24010954 	.word	0x24010954

08009668 <__ssputs_r>:
 8009668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	688e      	ldr	r6, [r1, #8]
 800966e:	461f      	mov	r7, r3
 8009670:	42be      	cmp	r6, r7
 8009672:	680b      	ldr	r3, [r1, #0]
 8009674:	4682      	mov	sl, r0
 8009676:	460c      	mov	r4, r1
 8009678:	4690      	mov	r8, r2
 800967a:	d82c      	bhi.n	80096d6 <__ssputs_r+0x6e>
 800967c:	898a      	ldrh	r2, [r1, #12]
 800967e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009682:	d026      	beq.n	80096d2 <__ssputs_r+0x6a>
 8009684:	6965      	ldr	r5, [r4, #20]
 8009686:	6909      	ldr	r1, [r1, #16]
 8009688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800968c:	eba3 0901 	sub.w	r9, r3, r1
 8009690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009694:	1c7b      	adds	r3, r7, #1
 8009696:	444b      	add	r3, r9
 8009698:	106d      	asrs	r5, r5, #1
 800969a:	429d      	cmp	r5, r3
 800969c:	bf38      	it	cc
 800969e:	461d      	movcc	r5, r3
 80096a0:	0553      	lsls	r3, r2, #21
 80096a2:	d527      	bpl.n	80096f4 <__ssputs_r+0x8c>
 80096a4:	4629      	mov	r1, r5
 80096a6:	f7ff ff53 	bl	8009550 <_malloc_r>
 80096aa:	4606      	mov	r6, r0
 80096ac:	b360      	cbz	r0, 8009708 <__ssputs_r+0xa0>
 80096ae:	6921      	ldr	r1, [r4, #16]
 80096b0:	464a      	mov	r2, r9
 80096b2:	f7ff fed3 	bl	800945c <memcpy>
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	6126      	str	r6, [r4, #16]
 80096c4:	6165      	str	r5, [r4, #20]
 80096c6:	444e      	add	r6, r9
 80096c8:	eba5 0509 	sub.w	r5, r5, r9
 80096cc:	6026      	str	r6, [r4, #0]
 80096ce:	60a5      	str	r5, [r4, #8]
 80096d0:	463e      	mov	r6, r7
 80096d2:	42be      	cmp	r6, r7
 80096d4:	d900      	bls.n	80096d8 <__ssputs_r+0x70>
 80096d6:	463e      	mov	r6, r7
 80096d8:	6820      	ldr	r0, [r4, #0]
 80096da:	4632      	mov	r2, r6
 80096dc:	4641      	mov	r1, r8
 80096de:	f000 faab 	bl	8009c38 <memmove>
 80096e2:	68a3      	ldr	r3, [r4, #8]
 80096e4:	1b9b      	subs	r3, r3, r6
 80096e6:	60a3      	str	r3, [r4, #8]
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	4433      	add	r3, r6
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	2000      	movs	r0, #0
 80096f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f4:	462a      	mov	r2, r5
 80096f6:	f000 fac9 	bl	8009c8c <_realloc_r>
 80096fa:	4606      	mov	r6, r0
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d1e0      	bne.n	80096c2 <__ssputs_r+0x5a>
 8009700:	6921      	ldr	r1, [r4, #16]
 8009702:	4650      	mov	r0, sl
 8009704:	f7ff feb8 	bl	8009478 <_free_r>
 8009708:	230c      	movs	r3, #12
 800970a:	f8ca 3000 	str.w	r3, [sl]
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009714:	81a3      	strh	r3, [r4, #12]
 8009716:	f04f 30ff 	mov.w	r0, #4294967295
 800971a:	e7e9      	b.n	80096f0 <__ssputs_r+0x88>

0800971c <_svfiprintf_r>:
 800971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009720:	4698      	mov	r8, r3
 8009722:	898b      	ldrh	r3, [r1, #12]
 8009724:	061b      	lsls	r3, r3, #24
 8009726:	b09d      	sub	sp, #116	; 0x74
 8009728:	4607      	mov	r7, r0
 800972a:	460d      	mov	r5, r1
 800972c:	4614      	mov	r4, r2
 800972e:	d50e      	bpl.n	800974e <_svfiprintf_r+0x32>
 8009730:	690b      	ldr	r3, [r1, #16]
 8009732:	b963      	cbnz	r3, 800974e <_svfiprintf_r+0x32>
 8009734:	2140      	movs	r1, #64	; 0x40
 8009736:	f7ff ff0b 	bl	8009550 <_malloc_r>
 800973a:	6028      	str	r0, [r5, #0]
 800973c:	6128      	str	r0, [r5, #16]
 800973e:	b920      	cbnz	r0, 800974a <_svfiprintf_r+0x2e>
 8009740:	230c      	movs	r3, #12
 8009742:	603b      	str	r3, [r7, #0]
 8009744:	f04f 30ff 	mov.w	r0, #4294967295
 8009748:	e0d0      	b.n	80098ec <_svfiprintf_r+0x1d0>
 800974a:	2340      	movs	r3, #64	; 0x40
 800974c:	616b      	str	r3, [r5, #20]
 800974e:	2300      	movs	r3, #0
 8009750:	9309      	str	r3, [sp, #36]	; 0x24
 8009752:	2320      	movs	r3, #32
 8009754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009758:	f8cd 800c 	str.w	r8, [sp, #12]
 800975c:	2330      	movs	r3, #48	; 0x30
 800975e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009904 <_svfiprintf_r+0x1e8>
 8009762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009766:	f04f 0901 	mov.w	r9, #1
 800976a:	4623      	mov	r3, r4
 800976c:	469a      	mov	sl, r3
 800976e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009772:	b10a      	cbz	r2, 8009778 <_svfiprintf_r+0x5c>
 8009774:	2a25      	cmp	r2, #37	; 0x25
 8009776:	d1f9      	bne.n	800976c <_svfiprintf_r+0x50>
 8009778:	ebba 0b04 	subs.w	fp, sl, r4
 800977c:	d00b      	beq.n	8009796 <_svfiprintf_r+0x7a>
 800977e:	465b      	mov	r3, fp
 8009780:	4622      	mov	r2, r4
 8009782:	4629      	mov	r1, r5
 8009784:	4638      	mov	r0, r7
 8009786:	f7ff ff6f 	bl	8009668 <__ssputs_r>
 800978a:	3001      	adds	r0, #1
 800978c:	f000 80a9 	beq.w	80098e2 <_svfiprintf_r+0x1c6>
 8009790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009792:	445a      	add	r2, fp
 8009794:	9209      	str	r2, [sp, #36]	; 0x24
 8009796:	f89a 3000 	ldrb.w	r3, [sl]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 80a1 	beq.w	80098e2 <_svfiprintf_r+0x1c6>
 80097a0:	2300      	movs	r3, #0
 80097a2:	f04f 32ff 	mov.w	r2, #4294967295
 80097a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097aa:	f10a 0a01 	add.w	sl, sl, #1
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	9307      	str	r3, [sp, #28]
 80097b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097b6:	931a      	str	r3, [sp, #104]	; 0x68
 80097b8:	4654      	mov	r4, sl
 80097ba:	2205      	movs	r2, #5
 80097bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c0:	4850      	ldr	r0, [pc, #320]	; (8009904 <_svfiprintf_r+0x1e8>)
 80097c2:	f7f6 fda5 	bl	8000310 <memchr>
 80097c6:	9a04      	ldr	r2, [sp, #16]
 80097c8:	b9d8      	cbnz	r0, 8009802 <_svfiprintf_r+0xe6>
 80097ca:	06d0      	lsls	r0, r2, #27
 80097cc:	bf44      	itt	mi
 80097ce:	2320      	movmi	r3, #32
 80097d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097d4:	0711      	lsls	r1, r2, #28
 80097d6:	bf44      	itt	mi
 80097d8:	232b      	movmi	r3, #43	; 0x2b
 80097da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097de:	f89a 3000 	ldrb.w	r3, [sl]
 80097e2:	2b2a      	cmp	r3, #42	; 0x2a
 80097e4:	d015      	beq.n	8009812 <_svfiprintf_r+0xf6>
 80097e6:	9a07      	ldr	r2, [sp, #28]
 80097e8:	4654      	mov	r4, sl
 80097ea:	2000      	movs	r0, #0
 80097ec:	f04f 0c0a 	mov.w	ip, #10
 80097f0:	4621      	mov	r1, r4
 80097f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097f6:	3b30      	subs	r3, #48	; 0x30
 80097f8:	2b09      	cmp	r3, #9
 80097fa:	d94d      	bls.n	8009898 <_svfiprintf_r+0x17c>
 80097fc:	b1b0      	cbz	r0, 800982c <_svfiprintf_r+0x110>
 80097fe:	9207      	str	r2, [sp, #28]
 8009800:	e014      	b.n	800982c <_svfiprintf_r+0x110>
 8009802:	eba0 0308 	sub.w	r3, r0, r8
 8009806:	fa09 f303 	lsl.w	r3, r9, r3
 800980a:	4313      	orrs	r3, r2
 800980c:	9304      	str	r3, [sp, #16]
 800980e:	46a2      	mov	sl, r4
 8009810:	e7d2      	b.n	80097b8 <_svfiprintf_r+0x9c>
 8009812:	9b03      	ldr	r3, [sp, #12]
 8009814:	1d19      	adds	r1, r3, #4
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	9103      	str	r1, [sp, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfbb      	ittet	lt
 800981e:	425b      	neglt	r3, r3
 8009820:	f042 0202 	orrlt.w	r2, r2, #2
 8009824:	9307      	strge	r3, [sp, #28]
 8009826:	9307      	strlt	r3, [sp, #28]
 8009828:	bfb8      	it	lt
 800982a:	9204      	strlt	r2, [sp, #16]
 800982c:	7823      	ldrb	r3, [r4, #0]
 800982e:	2b2e      	cmp	r3, #46	; 0x2e
 8009830:	d10c      	bne.n	800984c <_svfiprintf_r+0x130>
 8009832:	7863      	ldrb	r3, [r4, #1]
 8009834:	2b2a      	cmp	r3, #42	; 0x2a
 8009836:	d134      	bne.n	80098a2 <_svfiprintf_r+0x186>
 8009838:	9b03      	ldr	r3, [sp, #12]
 800983a:	1d1a      	adds	r2, r3, #4
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	9203      	str	r2, [sp, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	bfb8      	it	lt
 8009844:	f04f 33ff 	movlt.w	r3, #4294967295
 8009848:	3402      	adds	r4, #2
 800984a:	9305      	str	r3, [sp, #20]
 800984c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009914 <_svfiprintf_r+0x1f8>
 8009850:	7821      	ldrb	r1, [r4, #0]
 8009852:	2203      	movs	r2, #3
 8009854:	4650      	mov	r0, sl
 8009856:	f7f6 fd5b 	bl	8000310 <memchr>
 800985a:	b138      	cbz	r0, 800986c <_svfiprintf_r+0x150>
 800985c:	9b04      	ldr	r3, [sp, #16]
 800985e:	eba0 000a 	sub.w	r0, r0, sl
 8009862:	2240      	movs	r2, #64	; 0x40
 8009864:	4082      	lsls	r2, r0
 8009866:	4313      	orrs	r3, r2
 8009868:	3401      	adds	r4, #1
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009870:	4825      	ldr	r0, [pc, #148]	; (8009908 <_svfiprintf_r+0x1ec>)
 8009872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009876:	2206      	movs	r2, #6
 8009878:	f7f6 fd4a 	bl	8000310 <memchr>
 800987c:	2800      	cmp	r0, #0
 800987e:	d038      	beq.n	80098f2 <_svfiprintf_r+0x1d6>
 8009880:	4b22      	ldr	r3, [pc, #136]	; (800990c <_svfiprintf_r+0x1f0>)
 8009882:	bb1b      	cbnz	r3, 80098cc <_svfiprintf_r+0x1b0>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	3307      	adds	r3, #7
 8009888:	f023 0307 	bic.w	r3, r3, #7
 800988c:	3308      	adds	r3, #8
 800988e:	9303      	str	r3, [sp, #12]
 8009890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009892:	4433      	add	r3, r6
 8009894:	9309      	str	r3, [sp, #36]	; 0x24
 8009896:	e768      	b.n	800976a <_svfiprintf_r+0x4e>
 8009898:	fb0c 3202 	mla	r2, ip, r2, r3
 800989c:	460c      	mov	r4, r1
 800989e:	2001      	movs	r0, #1
 80098a0:	e7a6      	b.n	80097f0 <_svfiprintf_r+0xd4>
 80098a2:	2300      	movs	r3, #0
 80098a4:	3401      	adds	r4, #1
 80098a6:	9305      	str	r3, [sp, #20]
 80098a8:	4619      	mov	r1, r3
 80098aa:	f04f 0c0a 	mov.w	ip, #10
 80098ae:	4620      	mov	r0, r4
 80098b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098b4:	3a30      	subs	r2, #48	; 0x30
 80098b6:	2a09      	cmp	r2, #9
 80098b8:	d903      	bls.n	80098c2 <_svfiprintf_r+0x1a6>
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0c6      	beq.n	800984c <_svfiprintf_r+0x130>
 80098be:	9105      	str	r1, [sp, #20]
 80098c0:	e7c4      	b.n	800984c <_svfiprintf_r+0x130>
 80098c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098c6:	4604      	mov	r4, r0
 80098c8:	2301      	movs	r3, #1
 80098ca:	e7f0      	b.n	80098ae <_svfiprintf_r+0x192>
 80098cc:	ab03      	add	r3, sp, #12
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	462a      	mov	r2, r5
 80098d2:	4b0f      	ldr	r3, [pc, #60]	; (8009910 <_svfiprintf_r+0x1f4>)
 80098d4:	a904      	add	r1, sp, #16
 80098d6:	4638      	mov	r0, r7
 80098d8:	f3af 8000 	nop.w
 80098dc:	1c42      	adds	r2, r0, #1
 80098de:	4606      	mov	r6, r0
 80098e0:	d1d6      	bne.n	8009890 <_svfiprintf_r+0x174>
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	065b      	lsls	r3, r3, #25
 80098e6:	f53f af2d 	bmi.w	8009744 <_svfiprintf_r+0x28>
 80098ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ec:	b01d      	add	sp, #116	; 0x74
 80098ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f2:	ab03      	add	r3, sp, #12
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	462a      	mov	r2, r5
 80098f8:	4b05      	ldr	r3, [pc, #20]	; (8009910 <_svfiprintf_r+0x1f4>)
 80098fa:	a904      	add	r1, sp, #16
 80098fc:	4638      	mov	r0, r7
 80098fe:	f000 f879 	bl	80099f4 <_printf_i>
 8009902:	e7eb      	b.n	80098dc <_svfiprintf_r+0x1c0>
 8009904:	0800a2c8 	.word	0x0800a2c8
 8009908:	0800a2d2 	.word	0x0800a2d2
 800990c:	00000000 	.word	0x00000000
 8009910:	08009669 	.word	0x08009669
 8009914:	0800a2ce 	.word	0x0800a2ce

08009918 <_printf_common>:
 8009918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800991c:	4616      	mov	r6, r2
 800991e:	4699      	mov	r9, r3
 8009920:	688a      	ldr	r2, [r1, #8]
 8009922:	690b      	ldr	r3, [r1, #16]
 8009924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009928:	4293      	cmp	r3, r2
 800992a:	bfb8      	it	lt
 800992c:	4613      	movlt	r3, r2
 800992e:	6033      	str	r3, [r6, #0]
 8009930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009934:	4607      	mov	r7, r0
 8009936:	460c      	mov	r4, r1
 8009938:	b10a      	cbz	r2, 800993e <_printf_common+0x26>
 800993a:	3301      	adds	r3, #1
 800993c:	6033      	str	r3, [r6, #0]
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	0699      	lsls	r1, r3, #26
 8009942:	bf42      	ittt	mi
 8009944:	6833      	ldrmi	r3, [r6, #0]
 8009946:	3302      	addmi	r3, #2
 8009948:	6033      	strmi	r3, [r6, #0]
 800994a:	6825      	ldr	r5, [r4, #0]
 800994c:	f015 0506 	ands.w	r5, r5, #6
 8009950:	d106      	bne.n	8009960 <_printf_common+0x48>
 8009952:	f104 0a19 	add.w	sl, r4, #25
 8009956:	68e3      	ldr	r3, [r4, #12]
 8009958:	6832      	ldr	r2, [r6, #0]
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	42ab      	cmp	r3, r5
 800995e:	dc26      	bgt.n	80099ae <_printf_common+0x96>
 8009960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009964:	1e13      	subs	r3, r2, #0
 8009966:	6822      	ldr	r2, [r4, #0]
 8009968:	bf18      	it	ne
 800996a:	2301      	movne	r3, #1
 800996c:	0692      	lsls	r2, r2, #26
 800996e:	d42b      	bmi.n	80099c8 <_printf_common+0xb0>
 8009970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009974:	4649      	mov	r1, r9
 8009976:	4638      	mov	r0, r7
 8009978:	47c0      	blx	r8
 800997a:	3001      	adds	r0, #1
 800997c:	d01e      	beq.n	80099bc <_printf_common+0xa4>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	6922      	ldr	r2, [r4, #16]
 8009982:	f003 0306 	and.w	r3, r3, #6
 8009986:	2b04      	cmp	r3, #4
 8009988:	bf02      	ittt	eq
 800998a:	68e5      	ldreq	r5, [r4, #12]
 800998c:	6833      	ldreq	r3, [r6, #0]
 800998e:	1aed      	subeq	r5, r5, r3
 8009990:	68a3      	ldr	r3, [r4, #8]
 8009992:	bf0c      	ite	eq
 8009994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009998:	2500      	movne	r5, #0
 800999a:	4293      	cmp	r3, r2
 800999c:	bfc4      	itt	gt
 800999e:	1a9b      	subgt	r3, r3, r2
 80099a0:	18ed      	addgt	r5, r5, r3
 80099a2:	2600      	movs	r6, #0
 80099a4:	341a      	adds	r4, #26
 80099a6:	42b5      	cmp	r5, r6
 80099a8:	d11a      	bne.n	80099e0 <_printf_common+0xc8>
 80099aa:	2000      	movs	r0, #0
 80099ac:	e008      	b.n	80099c0 <_printf_common+0xa8>
 80099ae:	2301      	movs	r3, #1
 80099b0:	4652      	mov	r2, sl
 80099b2:	4649      	mov	r1, r9
 80099b4:	4638      	mov	r0, r7
 80099b6:	47c0      	blx	r8
 80099b8:	3001      	adds	r0, #1
 80099ba:	d103      	bne.n	80099c4 <_printf_common+0xac>
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295
 80099c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c4:	3501      	adds	r5, #1
 80099c6:	e7c6      	b.n	8009956 <_printf_common+0x3e>
 80099c8:	18e1      	adds	r1, r4, r3
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	2030      	movs	r0, #48	; 0x30
 80099ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099d2:	4422      	add	r2, r4
 80099d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099dc:	3302      	adds	r3, #2
 80099de:	e7c7      	b.n	8009970 <_printf_common+0x58>
 80099e0:	2301      	movs	r3, #1
 80099e2:	4622      	mov	r2, r4
 80099e4:	4649      	mov	r1, r9
 80099e6:	4638      	mov	r0, r7
 80099e8:	47c0      	blx	r8
 80099ea:	3001      	adds	r0, #1
 80099ec:	d0e6      	beq.n	80099bc <_printf_common+0xa4>
 80099ee:	3601      	adds	r6, #1
 80099f0:	e7d9      	b.n	80099a6 <_printf_common+0x8e>
	...

080099f4 <_printf_i>:
 80099f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	7e0f      	ldrb	r7, [r1, #24]
 80099fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099fc:	2f78      	cmp	r7, #120	; 0x78
 80099fe:	4691      	mov	r9, r2
 8009a00:	4680      	mov	r8, r0
 8009a02:	460c      	mov	r4, r1
 8009a04:	469a      	mov	sl, r3
 8009a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a0a:	d807      	bhi.n	8009a1c <_printf_i+0x28>
 8009a0c:	2f62      	cmp	r7, #98	; 0x62
 8009a0e:	d80a      	bhi.n	8009a26 <_printf_i+0x32>
 8009a10:	2f00      	cmp	r7, #0
 8009a12:	f000 80d4 	beq.w	8009bbe <_printf_i+0x1ca>
 8009a16:	2f58      	cmp	r7, #88	; 0x58
 8009a18:	f000 80c0 	beq.w	8009b9c <_printf_i+0x1a8>
 8009a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a24:	e03a      	b.n	8009a9c <_printf_i+0xa8>
 8009a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a2a:	2b15      	cmp	r3, #21
 8009a2c:	d8f6      	bhi.n	8009a1c <_printf_i+0x28>
 8009a2e:	a101      	add	r1, pc, #4	; (adr r1, 8009a34 <_printf_i+0x40>)
 8009a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a34:	08009a8d 	.word	0x08009a8d
 8009a38:	08009aa1 	.word	0x08009aa1
 8009a3c:	08009a1d 	.word	0x08009a1d
 8009a40:	08009a1d 	.word	0x08009a1d
 8009a44:	08009a1d 	.word	0x08009a1d
 8009a48:	08009a1d 	.word	0x08009a1d
 8009a4c:	08009aa1 	.word	0x08009aa1
 8009a50:	08009a1d 	.word	0x08009a1d
 8009a54:	08009a1d 	.word	0x08009a1d
 8009a58:	08009a1d 	.word	0x08009a1d
 8009a5c:	08009a1d 	.word	0x08009a1d
 8009a60:	08009ba5 	.word	0x08009ba5
 8009a64:	08009acd 	.word	0x08009acd
 8009a68:	08009b5f 	.word	0x08009b5f
 8009a6c:	08009a1d 	.word	0x08009a1d
 8009a70:	08009a1d 	.word	0x08009a1d
 8009a74:	08009bc7 	.word	0x08009bc7
 8009a78:	08009a1d 	.word	0x08009a1d
 8009a7c:	08009acd 	.word	0x08009acd
 8009a80:	08009a1d 	.word	0x08009a1d
 8009a84:	08009a1d 	.word	0x08009a1d
 8009a88:	08009b67 	.word	0x08009b67
 8009a8c:	682b      	ldr	r3, [r5, #0]
 8009a8e:	1d1a      	adds	r2, r3, #4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	602a      	str	r2, [r5, #0]
 8009a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e09f      	b.n	8009be0 <_printf_i+0x1ec>
 8009aa0:	6820      	ldr	r0, [r4, #0]
 8009aa2:	682b      	ldr	r3, [r5, #0]
 8009aa4:	0607      	lsls	r7, r0, #24
 8009aa6:	f103 0104 	add.w	r1, r3, #4
 8009aaa:	6029      	str	r1, [r5, #0]
 8009aac:	d501      	bpl.n	8009ab2 <_printf_i+0xbe>
 8009aae:	681e      	ldr	r6, [r3, #0]
 8009ab0:	e003      	b.n	8009aba <_printf_i+0xc6>
 8009ab2:	0646      	lsls	r6, r0, #25
 8009ab4:	d5fb      	bpl.n	8009aae <_printf_i+0xba>
 8009ab6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009aba:	2e00      	cmp	r6, #0
 8009abc:	da03      	bge.n	8009ac6 <_printf_i+0xd2>
 8009abe:	232d      	movs	r3, #45	; 0x2d
 8009ac0:	4276      	negs	r6, r6
 8009ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ac6:	485a      	ldr	r0, [pc, #360]	; (8009c30 <_printf_i+0x23c>)
 8009ac8:	230a      	movs	r3, #10
 8009aca:	e012      	b.n	8009af2 <_printf_i+0xfe>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	6820      	ldr	r0, [r4, #0]
 8009ad0:	1d19      	adds	r1, r3, #4
 8009ad2:	6029      	str	r1, [r5, #0]
 8009ad4:	0605      	lsls	r5, r0, #24
 8009ad6:	d501      	bpl.n	8009adc <_printf_i+0xe8>
 8009ad8:	681e      	ldr	r6, [r3, #0]
 8009ada:	e002      	b.n	8009ae2 <_printf_i+0xee>
 8009adc:	0641      	lsls	r1, r0, #25
 8009ade:	d5fb      	bpl.n	8009ad8 <_printf_i+0xe4>
 8009ae0:	881e      	ldrh	r6, [r3, #0]
 8009ae2:	4853      	ldr	r0, [pc, #332]	; (8009c30 <_printf_i+0x23c>)
 8009ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ae6:	bf0c      	ite	eq
 8009ae8:	2308      	moveq	r3, #8
 8009aea:	230a      	movne	r3, #10
 8009aec:	2100      	movs	r1, #0
 8009aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009af2:	6865      	ldr	r5, [r4, #4]
 8009af4:	60a5      	str	r5, [r4, #8]
 8009af6:	2d00      	cmp	r5, #0
 8009af8:	bfa2      	ittt	ge
 8009afa:	6821      	ldrge	r1, [r4, #0]
 8009afc:	f021 0104 	bicge.w	r1, r1, #4
 8009b00:	6021      	strge	r1, [r4, #0]
 8009b02:	b90e      	cbnz	r6, 8009b08 <_printf_i+0x114>
 8009b04:	2d00      	cmp	r5, #0
 8009b06:	d04b      	beq.n	8009ba0 <_printf_i+0x1ac>
 8009b08:	4615      	mov	r5, r2
 8009b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8009b12:	5dc7      	ldrb	r7, [r0, r7]
 8009b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b18:	4637      	mov	r7, r6
 8009b1a:	42bb      	cmp	r3, r7
 8009b1c:	460e      	mov	r6, r1
 8009b1e:	d9f4      	bls.n	8009b0a <_printf_i+0x116>
 8009b20:	2b08      	cmp	r3, #8
 8009b22:	d10b      	bne.n	8009b3c <_printf_i+0x148>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	07de      	lsls	r6, r3, #31
 8009b28:	d508      	bpl.n	8009b3c <_printf_i+0x148>
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	6861      	ldr	r1, [r4, #4]
 8009b2e:	4299      	cmp	r1, r3
 8009b30:	bfde      	ittt	le
 8009b32:	2330      	movle	r3, #48	; 0x30
 8009b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b3c:	1b52      	subs	r2, r2, r5
 8009b3e:	6122      	str	r2, [r4, #16]
 8009b40:	f8cd a000 	str.w	sl, [sp]
 8009b44:	464b      	mov	r3, r9
 8009b46:	aa03      	add	r2, sp, #12
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	f7ff fee4 	bl	8009918 <_printf_common>
 8009b50:	3001      	adds	r0, #1
 8009b52:	d14a      	bne.n	8009bea <_printf_i+0x1f6>
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295
 8009b58:	b004      	add	sp, #16
 8009b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	f043 0320 	orr.w	r3, r3, #32
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	4833      	ldr	r0, [pc, #204]	; (8009c34 <_printf_i+0x240>)
 8009b68:	2778      	movs	r7, #120	; 0x78
 8009b6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	6829      	ldr	r1, [r5, #0]
 8009b72:	061f      	lsls	r7, r3, #24
 8009b74:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b78:	d402      	bmi.n	8009b80 <_printf_i+0x18c>
 8009b7a:	065f      	lsls	r7, r3, #25
 8009b7c:	bf48      	it	mi
 8009b7e:	b2b6      	uxthmi	r6, r6
 8009b80:	07df      	lsls	r7, r3, #31
 8009b82:	bf48      	it	mi
 8009b84:	f043 0320 	orrmi.w	r3, r3, #32
 8009b88:	6029      	str	r1, [r5, #0]
 8009b8a:	bf48      	it	mi
 8009b8c:	6023      	strmi	r3, [r4, #0]
 8009b8e:	b91e      	cbnz	r6, 8009b98 <_printf_i+0x1a4>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	f023 0320 	bic.w	r3, r3, #32
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	2310      	movs	r3, #16
 8009b9a:	e7a7      	b.n	8009aec <_printf_i+0xf8>
 8009b9c:	4824      	ldr	r0, [pc, #144]	; (8009c30 <_printf_i+0x23c>)
 8009b9e:	e7e4      	b.n	8009b6a <_printf_i+0x176>
 8009ba0:	4615      	mov	r5, r2
 8009ba2:	e7bd      	b.n	8009b20 <_printf_i+0x12c>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	6826      	ldr	r6, [r4, #0]
 8009ba8:	6961      	ldr	r1, [r4, #20]
 8009baa:	1d18      	adds	r0, r3, #4
 8009bac:	6028      	str	r0, [r5, #0]
 8009bae:	0635      	lsls	r5, r6, #24
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	d501      	bpl.n	8009bb8 <_printf_i+0x1c4>
 8009bb4:	6019      	str	r1, [r3, #0]
 8009bb6:	e002      	b.n	8009bbe <_printf_i+0x1ca>
 8009bb8:	0670      	lsls	r0, r6, #25
 8009bba:	d5fb      	bpl.n	8009bb4 <_printf_i+0x1c0>
 8009bbc:	8019      	strh	r1, [r3, #0]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6123      	str	r3, [r4, #16]
 8009bc2:	4615      	mov	r5, r2
 8009bc4:	e7bc      	b.n	8009b40 <_printf_i+0x14c>
 8009bc6:	682b      	ldr	r3, [r5, #0]
 8009bc8:	1d1a      	adds	r2, r3, #4
 8009bca:	602a      	str	r2, [r5, #0]
 8009bcc:	681d      	ldr	r5, [r3, #0]
 8009bce:	6862      	ldr	r2, [r4, #4]
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	f7f6 fb9c 	bl	8000310 <memchr>
 8009bd8:	b108      	cbz	r0, 8009bde <_printf_i+0x1ea>
 8009bda:	1b40      	subs	r0, r0, r5
 8009bdc:	6060      	str	r0, [r4, #4]
 8009bde:	6863      	ldr	r3, [r4, #4]
 8009be0:	6123      	str	r3, [r4, #16]
 8009be2:	2300      	movs	r3, #0
 8009be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009be8:	e7aa      	b.n	8009b40 <_printf_i+0x14c>
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	462a      	mov	r2, r5
 8009bee:	4649      	mov	r1, r9
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	47d0      	blx	sl
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d0ad      	beq.n	8009b54 <_printf_i+0x160>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	079b      	lsls	r3, r3, #30
 8009bfc:	d413      	bmi.n	8009c26 <_printf_i+0x232>
 8009bfe:	68e0      	ldr	r0, [r4, #12]
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	4298      	cmp	r0, r3
 8009c04:	bfb8      	it	lt
 8009c06:	4618      	movlt	r0, r3
 8009c08:	e7a6      	b.n	8009b58 <_printf_i+0x164>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	4649      	mov	r1, r9
 8009c10:	4640      	mov	r0, r8
 8009c12:	47d0      	blx	sl
 8009c14:	3001      	adds	r0, #1
 8009c16:	d09d      	beq.n	8009b54 <_printf_i+0x160>
 8009c18:	3501      	adds	r5, #1
 8009c1a:	68e3      	ldr	r3, [r4, #12]
 8009c1c:	9903      	ldr	r1, [sp, #12]
 8009c1e:	1a5b      	subs	r3, r3, r1
 8009c20:	42ab      	cmp	r3, r5
 8009c22:	dcf2      	bgt.n	8009c0a <_printf_i+0x216>
 8009c24:	e7eb      	b.n	8009bfe <_printf_i+0x20a>
 8009c26:	2500      	movs	r5, #0
 8009c28:	f104 0619 	add.w	r6, r4, #25
 8009c2c:	e7f5      	b.n	8009c1a <_printf_i+0x226>
 8009c2e:	bf00      	nop
 8009c30:	0800a2d9 	.word	0x0800a2d9
 8009c34:	0800a2ea 	.word	0x0800a2ea

08009c38 <memmove>:
 8009c38:	4288      	cmp	r0, r1
 8009c3a:	b510      	push	{r4, lr}
 8009c3c:	eb01 0402 	add.w	r4, r1, r2
 8009c40:	d902      	bls.n	8009c48 <memmove+0x10>
 8009c42:	4284      	cmp	r4, r0
 8009c44:	4623      	mov	r3, r4
 8009c46:	d807      	bhi.n	8009c58 <memmove+0x20>
 8009c48:	1e43      	subs	r3, r0, #1
 8009c4a:	42a1      	cmp	r1, r4
 8009c4c:	d008      	beq.n	8009c60 <memmove+0x28>
 8009c4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c56:	e7f8      	b.n	8009c4a <memmove+0x12>
 8009c58:	4402      	add	r2, r0
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	428a      	cmp	r2, r1
 8009c5e:	d100      	bne.n	8009c62 <memmove+0x2a>
 8009c60:	bd10      	pop	{r4, pc}
 8009c62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c6a:	e7f7      	b.n	8009c5c <memmove+0x24>

08009c6c <_sbrk_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4d06      	ldr	r5, [pc, #24]	; (8009c88 <_sbrk_r+0x1c>)
 8009c70:	2300      	movs	r3, #0
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	602b      	str	r3, [r5, #0]
 8009c78:	f7f7 fa26 	bl	80010c8 <_sbrk>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_sbrk_r+0x1a>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_sbrk_r+0x1a>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	24010950 	.word	0x24010950

08009c8c <_realloc_r>:
 8009c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c90:	4680      	mov	r8, r0
 8009c92:	4614      	mov	r4, r2
 8009c94:	460e      	mov	r6, r1
 8009c96:	b921      	cbnz	r1, 8009ca2 <_realloc_r+0x16>
 8009c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9c:	4611      	mov	r1, r2
 8009c9e:	f7ff bc57 	b.w	8009550 <_malloc_r>
 8009ca2:	b92a      	cbnz	r2, 8009cb0 <_realloc_r+0x24>
 8009ca4:	f7ff fbe8 	bl	8009478 <_free_r>
 8009ca8:	4625      	mov	r5, r4
 8009caa:	4628      	mov	r0, r5
 8009cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb0:	f000 f81b 	bl	8009cea <_malloc_usable_size_r>
 8009cb4:	4284      	cmp	r4, r0
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	d802      	bhi.n	8009cc0 <_realloc_r+0x34>
 8009cba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cbe:	d812      	bhi.n	8009ce6 <_realloc_r+0x5a>
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	f7ff fc44 	bl	8009550 <_malloc_r>
 8009cc8:	4605      	mov	r5, r0
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d0ed      	beq.n	8009caa <_realloc_r+0x1e>
 8009cce:	42bc      	cmp	r4, r7
 8009cd0:	4622      	mov	r2, r4
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	bf28      	it	cs
 8009cd6:	463a      	movcs	r2, r7
 8009cd8:	f7ff fbc0 	bl	800945c <memcpy>
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4640      	mov	r0, r8
 8009ce0:	f7ff fbca 	bl	8009478 <_free_r>
 8009ce4:	e7e1      	b.n	8009caa <_realloc_r+0x1e>
 8009ce6:	4635      	mov	r5, r6
 8009ce8:	e7df      	b.n	8009caa <_realloc_r+0x1e>

08009cea <_malloc_usable_size_r>:
 8009cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cee:	1f18      	subs	r0, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bfbc      	itt	lt
 8009cf4:	580b      	ldrlt	r3, [r1, r0]
 8009cf6:	18c0      	addlt	r0, r0, r3
 8009cf8:	4770      	bx	lr
	...

08009cfc <_init>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	bf00      	nop
 8009d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d02:	bc08      	pop	{r3}
 8009d04:	469e      	mov	lr, r3
 8009d06:	4770      	bx	lr

08009d08 <_fini>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr
